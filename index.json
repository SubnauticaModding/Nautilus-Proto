{
  "api/Nautilus.Assets.CustomModelData.html": {
    "href": "api/Nautilus.Assets.CustomModelData.html",
    "title": "Class CustomModelData",
    "keywords": "Class CustomModelData Namespace Nautilus.Assets Assembly Nautilus.dll Custom Model data that Nautilus will use to apply custom looks to certain prefabs. public class CustomModelData Inheritance object CustomModelData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties CustomIllumMap The custom lighting texture for the item. This property is optional and will default to the standard illum texture for batteries or power cells. public Texture2D CustomIllumMap { get; init; } Property Value Texture2D CustomIllumStrength The custom lighting strength for the item. This property is will default to 1.0f if the CustomIllumMap is set but will use the default value for batteries or power cells if no CustomIllumMap is set. public float CustomIllumStrength { get; init; } Property Value float CustomNormalMap The custom bump texture for the item. This property is optional and will default to the standard bump texture for batteries or power cells. public Texture2D CustomNormalMap { get; init; } Property Value Texture2D CustomSpecMap The custom Spec Texture for the item. This property is optional and will default to the standard spec texture for batteries or power cells. public Texture2D CustomSpecMap { get; init; } Property Value Texture2D CustomTexture The custom skin for the item. This property is optional and will default to the standard texture for batteries or power cells. public Texture2D CustomTexture { get; init; } Property Value Texture2D TargetPath Name of the model to target with these changes. public string TargetPath { get; init; } Property Value string"
  },
  "api/Nautilus.Assets.CustomModelData.Targets.html": {
    "href": "api/Nautilus.Assets.CustomModelData.Targets.html",
    "title": "Class CustomModelData.Targets",
    "keywords": "Class CustomModelData.Targets Namespace Nautilus.Assets Assembly Nautilus.dll A class with some common target names public static class CustomModelData.Targets Inheritance object CustomModelData.Targets Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Battery public static string Battery Field Value string Beacon public static string Beacon Field Value string BeaconFP public static string BeaconFP Field Value string DoubleTank public static string DoubleTank Field Value string Fabricator public static string Fabricator Field Value string Gravsphere public static string Gravsphere Field Value string Gravsphere_tower_01 public static string Gravsphere_tower_01 Field Value string Gravsphere_tower_02 public static string Gravsphere_tower_02 Field Value string Gravsphere_tower_03 public static string Gravsphere_tower_03 Field Value string Gravsphere_tower_04 public static string Gravsphere_tower_04 Field Value string Gravsphere_tower_05 public static string Gravsphere_tower_05 Field Value string IonBattery public static string IonBattery Field Value string Knife public static string Knife Field Value string LaserCutter public static string LaserCutter Field Value string MedicalCabinetBase public static string MedicalCabinetBase Field Value string MedicalCabinetDoor public static string MedicalCabinetDoor Field Value string MedicalCabinetMedKit public static string MedicalCabinetMedKit Field Value string Radio public static string Radio Field Value string Tank public static string Tank Field Value string Welder public static string Welder Field Value string"
  },
  "api/Nautilus.Assets.CustomPrefab.html": {
    "href": "api/Nautilus.Assets.CustomPrefab.html",
    "title": "Class CustomPrefab",
    "keywords": "Class CustomPrefab Namespace Nautilus.Assets Assembly Nautilus.dll Represents a class with everything needed to make a custom prefab work. public class CustomPrefab : ICustomPrefab Inheritance object CustomPrefab Implements ICustomPrefab Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) GadgetExtensions.CreateFabricator(ICustomPrefab, out CraftTree.Type) GadgetExtensions.SetEquipment(ICustomPrefab, EquipmentType) GadgetExtensions.SetPdaGroupCategory(ICustomPrefab, TechGroup, TechCategory) GadgetExtensions.SetRecipe(ICustomPrefab, RecipeData) GadgetExtensions.SetRecipeFromJson(ICustomPrefab, string) GadgetExtensions.SetSpawns(ICustomPrefab, params LootDistributionData.BiomeData[]) GadgetExtensions.SetSpawns(ICustomPrefab, params SpawnLocation[]) GadgetExtensions.SetSpawns(ICustomPrefab, WorldEntityInfo, params LootDistributionData.BiomeData[]) GadgetExtensions.SetUnlock(ICustomPrefab, TechType, int) Constructors CustomPrefab() Constructs a custom prefab object. public CustomPrefab() CustomPrefab(PrefabInfo) Constructs a custom prefab object. public CustomPrefab(PrefabInfo info) Parameters info PrefabInfo The information this prefab will be registered as. CustomPrefab(string, string, string) Constructs a custom prefab object with the Info assigned appropriately. public CustomPrefab(string classId, string displayName, string description) Parameters classId string The class identifier used for the PrefabIdentifier component whenever applicable. displayName string The display name for this item. description string The description for this item. CustomPrefab(string, string, string, Sprite) Constructs a custom prefab object with the Info assigned appropriately. public CustomPrefab(string classId, string displayName, string description, Atlas.Sprite icon) Parameters classId string The class identifier used for the PrefabIdentifier component whenever applicable. displayName string The display name for this item. description string The description for this item. icon Atlas.Sprite The icon for this item. CustomPrefab(string, string, string, Sprite) Constructs a custom prefab object with the Info assigned appropriately. public CustomPrefab(string classId, string displayName, string description, Sprite icon) Parameters classId string The class identifier used for the PrefabIdentifier component whenever applicable. displayName string The display name for this item. description string The description for this item. icon Sprite The icon for this item. Properties Info The prefab info for this custom prefab. public required PrefabInfo Info { get; set; } Property Value PrefabInfo OnPrefabPostProcess Function that will be executed after the Nautilus's basic processing for Prefab has been completed. public PrefabPostProcessorAsync OnPrefabPostProcess { get; protected set; } Property Value PrefabPostProcessorAsync Prefab Function which constructs a game object for this prefab. public PrefabFactoryAsync Prefab { get; protected set; } Property Value PrefabFactoryAsync Methods AddGadget<TGadget>(TGadget) Adds a gadget to this custom prefab. public TGadget AddGadget<TGadget>(TGadget gadget) where TGadget : Gadget Parameters gadget TGadget The gadget to add Returns TGadget A reference to the added gadget. Type Parameters TGadget Type of the gadget. AddOnRegister(Action) Adds an action that will be called during the registration of the prefab. public void AddOnRegister(Action onRegisterCallback) Parameters onRegisterCallback Action The action that will be called. AddOnUnregister(Action) Adds an action that will be called when this prefab has performed an unregister operation. public void AddOnUnregister(Action onUnregisterCallback) Parameters onUnregisterCallback Action The action that will be called. GetGadget(Type) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. public Gadget GetGadget(Type gadgetType) Parameters gadgetType Type The type of the gadget to get. Returns Gadget The gadget instance if found, otherwise; null. GetGadget<TGadget>() Gets the gadget instance associated with the specified gadget type attached to this custom prefab. public TGadget GetGadget<TGadget>() where TGadget : Gadget Returns TGadget The gadget instance if found, otherwise; null. Type Parameters TGadget The type of the gadget to get. Register() Registers this custom prefab into the game. public void Register() RemoveGadget(Type) Removes the gadget with the specified type. public bool RemoveGadget(Type gadget) Parameters gadget Type The type of the gadget to remove. Returns bool true if the gadget was successfully found and removed, otherwise; false. This method returns false if the gadget type was not found in this custom prefab. RemoveGadget<TGadget>() Removes the gadget with the specified type. public bool RemoveGadget<TGadget>() where TGadget : Gadget Returns bool true if the gadget was successfully found and removed, otherwise; false. This method returns false if the gadget type was not found in this custom prefab. Type Parameters TGadget The type of the gadget to remove. SetGameObject(PrefabTemplate) Sets a prefab template as the game object constructor of this custom prefab. public void SetGameObject(PrefabTemplate prefabTemplate) Parameters prefabTemplate PrefabTemplate The prefab template object to set. SetGameObject(Func<IOut<GameObject>, IEnumerator>) Sets a function as the game object constructor of this custom prefab. This is an asynchronous version. public void SetGameObject(Func<IOut<GameObject>, IEnumerator> prefabAsync) Parameters prefabAsync Func<IOut<GameObject>, IEnumerator> The function to set. SetGameObject(Func<GameObject>) Sets a function as the game object constructor of this custom prefab. This is a synchronous version. public void SetGameObject(Func<GameObject> prefab) Parameters prefab Func<GameObject> The function to set. SetGameObject(GameObject) Sets a game object as the prefab of this custom prefab. public void SetGameObject(GameObject prefab) Parameters prefab GameObject The game object to set. SetPrefabPostProcessor(Action<GameObject>) Sets a post processor for the Prefab. This is a synchronous version. public void SetPrefabPostProcessor(Action<GameObject> postProcessor) Parameters postProcessor Action<GameObject> The post processor to set. SetPrefabPostProcessor(Func<GameObject, IEnumerator>) Sets a post processor for the Prefab. This is an asynchronous version. public void SetPrefabPostProcessor(Func<GameObject, IEnumerator> postProcessorAsync) Parameters postProcessorAsync Func<GameObject, IEnumerator> The post processor to set. TryGetGadget<TGadget>(out TGadget) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. public bool TryGetGadget<TGadget>(out TGadget gadget) where TGadget : Gadget Parameters gadget TGadget The instance of the gadget found associated with the type. If not found, this will be null instead. Returns bool true if the gadget associated with type was found, otherwise; false. Type Parameters TGadget The type of the gadget to get. Unregister() Unregisters this custom prefab from the game. public void Unregister() Remarks The class ID reference will be completely erased, however, the TechType instance will remain in the game."
  },
  "api/Nautilus.Assets.Gadgets.CraftingGadget.html": {
    "href": "api/Nautilus.Assets.Gadgets.CraftingGadget.html",
    "title": "Class CraftingGadget",
    "keywords": "Class CraftingGadget Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents a crafting gadget public class CraftingGadget : Gadget Inheritance object Gadget CraftingGadget Inherited Members Gadget.prefab object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors CraftingGadget(ICustomPrefab, RecipeData) Constructs a crafting gadget. public CraftingGadget(ICustomPrefab prefab, RecipeData recipeData) Parameters prefab ICustomPrefab The custom prefab to operate on. recipeData RecipeData The crafting recipe to add. Properties CraftingTime The amount of seconds it takes to craft this item. Values equal to or less than zero will be ignored. public float CraftingTime { get; set; } Property Value float FabricatorType Craft Tree this node will appear in. public CraftTree.Type FabricatorType { get; set; } Property Value CraftTree.Type RecipeData The crafting recipe to add. public required RecipeData RecipeData { get; set; } Property Value RecipeData StepsToFabricatorTab The steps to get to a tab you want this node to appear in. If null or empty, it will instead appear at the craft tree's root. public string[] StepsToFabricatorTab { get; set; } Property Value string[] Methods Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in Register(). protected override void Build() WithCraftingTime(float) The amount of seconds it takes to craft this item. Values equal to or less than zero will be ignored. public CraftingGadget WithCraftingTime(float craftingTime) Parameters craftingTime float Amount of seconds Returns CraftingGadget A reference to this instance after the operation has completed. WithFabricatorType(Type) Adds this prefab to a CraftTree type. public CraftingGadget WithFabricatorType(CraftTree.Type fabricatorType) Parameters fabricatorType CraftTree.Type The craft tree type to add this crafting node to. Returns CraftingGadget A reference to this instance after the operation has completed. WithStepsToFabricatorTab(params string[]) Adds this node to a specific tab you want it to appear in. public CraftingGadget WithStepsToFabricatorTab(params string[] stepsToFabricator) Parameters stepsToFabricator string[] The steps required to get to the tab in question. If null, it will appear at the craft tree's root. Returns CraftingGadget A reference to this instance after the operation has completed."
  },
  "api/Nautilus.Assets.Gadgets.EquipmentGadget.html": {
    "href": "api/Nautilus.Assets.Gadgets.EquipmentGadget.html",
    "title": "Class EquipmentGadget",
    "keywords": "Class EquipmentGadget Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents an equipment gadget public class EquipmentGadget : Gadget Inheritance object Gadget EquipmentGadget Inherited Members Gadget.prefab object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors EquipmentGadget(ICustomPrefab) Constructs an equipment gadget. public EquipmentGadget(ICustomPrefab prefab) Parameters prefab ICustomPrefab The custom prefab to operate on. EquipmentGadget(ICustomPrefab, EquipmentType) Constructs an equipment gadget. public EquipmentGadget(ICustomPrefab prefab, EquipmentType equipmentType) Parameters prefab ICustomPrefab The custom prefab to operate on. equipmentType EquipmentType The type of equipment slot this item can fit into. Properties EquipmentType The type of equipment slot this item can fit into. public required EquipmentType EquipmentType { get; set; } Property Value EquipmentType QuickSlotType The way the game should treat this item as when in a quick slot. public QuickSlotType QuickSlotType { get; set; } Property Value QuickSlotType Methods Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in Register(). protected override void Build() WithQuickSlotType(QuickSlotType) Sets the way the game should treat this item as when in a quick slot. public EquipmentGadget WithQuickSlotType(QuickSlotType quickSlotType) Parameters quickSlotType QuickSlotType The quick slot type Returns EquipmentGadget A reference to this instance after the operation has completed."
  },
  "api/Nautilus.Assets.Gadgets.FabricatorGadget.html": {
    "href": "api/Nautilus.Assets.Gadgets.FabricatorGadget.html",
    "title": "Class FabricatorGadget",
    "keywords": "Class FabricatorGadget Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents a craft tree/fabricator gadget. public class FabricatorGadget : Gadget Inheritance object Gadget FabricatorGadget Inherited Members Gadget.prefab object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors FabricatorGadget(ICustomPrefab) Constructs a fabricator gadget. public FabricatorGadget(ICustomPrefab prefab) Parameters prefab ICustomPrefab The custom prefab to operate on. Properties CraftTreeType The ID value for your custom craft tree. public CraftTree.Type CraftTreeType { get; } Property Value CraftTree.Type Root The root node of the crafting tree. public ModCraftTreeRoot Root { get; } Property Value ModCraftTreeRoot Methods AddCraftNode(string, string) Safely attempts to add a new crafting node to the custom crafting tree of this fabricator. If the modded TechType is not found, the craft node will not be added. public FabricatorGadget AddCraftNode(string moddedTechType, string parentTabId = null) Parameters moddedTechType string The modded item to craft. parentTabId string Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns FabricatorGadget AddCraftNode(TechType, string) Adds a new crafting node to the custom crafting tree of this fabricator. public FabricatorGadget AddCraftNode(TechType techType, string parentTabId = null) Parameters techType TechType The item to craft. parentTabId string Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns FabricatorGadget AddTabNode(string, string, Sprite, string, string) Adds a new tab node to the custom crafting tree of this fabricator. public FabricatorGadget AddTabNode(string tabId, string displayText, Atlas.Sprite tabIcon, string language = \"English\", string parentTabId = null) Parameters tabId string The internal ID for the tab node. displayText string The in-game text shown for the tab node. If null or empty, this will use the language line \"{CraftTreeTypeName}_{tabId}\" instead. tabIcon Atlas.Sprite The sprite used for the tab node. language string The language for the display name. Defaults to English. parentTabId string Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns FabricatorGadget Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in Register(). protected override void Build()"
  },
  "api/Nautilus.Assets.Gadgets.Gadget.html": {
    "href": "api/Nautilus.Assets.Gadgets.Gadget.html",
    "title": "Class Gadget",
    "keywords": "Class Gadget Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents a class that handles registers to game code. public abstract class Gadget Inheritance object Gadget Derived CraftingGadget EquipmentGadget FabricatorGadget ScanningGadget Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors Gadget(ICustomPrefab) Constructs a gadget instance. public Gadget(ICustomPrefab prefab) Parameters prefab ICustomPrefab The custom prefab to operate on. Fields prefab The custom prefab to operate on protected readonly ICustomPrefab prefab Field Value ICustomPrefab Methods Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in Register(). protected abstract void Build()"
  },
  "api/Nautilus.Assets.Gadgets.GadgetExtensions.html": {
    "href": "api/Nautilus.Assets.Gadgets.GadgetExtensions.html",
    "title": "Class GadgetExtensions",
    "keywords": "Class GadgetExtensions Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents extension methods for the Gadget class. public static class GadgetExtensions Inheritance object GadgetExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateFabricator(ICustomPrefab, out Type) Creates a craft tree for this prefab. The created craft tree is immediately returned after this method is executed. public static FabricatorGadget CreateFabricator(this ICustomPrefab customPrefab, out CraftTree.Type treeType) Parameters customPrefab ICustomPrefab The custom prefab to set equipment slot for. treeType CraftTree.Type The created custom craft tree type. Returns FabricatorGadget An instance to the created FabricatorGadget to continue the fabricator settings on. SetEquipment(ICustomPrefab, EquipmentType) Sets the type of equipment slot this item can fit into. public static EquipmentGadget SetEquipment(this ICustomPrefab customPrefab, EquipmentType equipmentType) Parameters customPrefab ICustomPrefab The custom prefab to set equipment slot for. equipmentType EquipmentType The type of equipment slot this item can fit into. Returns EquipmentGadget An instance to the created EquipmentGadget to continue the equipment settings on. SetPdaGroupCategory(ICustomPrefab, TechGroup, TechCategory) Adds this item into a blueprint category to appear in. public static ScanningGadget SetPdaGroupCategory(this ICustomPrefab customPrefab, TechGroup group, TechCategory category) Parameters customPrefab ICustomPrefab The custom prefab to add unlocks to. group TechGroup The main group in the PDA blueprints where this item appears category TechCategory The category within the group in the PDA blueprints where this item appears. Returns ScanningGadget An instance to the created ScanningGadget to continue the scanning settings on. Remarks If the specified group is a tech group that is present in the uGUI_BuilderMenu.groups list, this item will automatically become buildable. To avoid this, or make this item a buildable manually, use the SetBuildable(bool) method. SetRecipe(ICustomPrefab, RecipeData) Adds recipe to this custom prefab. public static CraftingGadget SetRecipe(this ICustomPrefab customPrefab, RecipeData recipeData) Parameters customPrefab ICustomPrefab The custom prefab to add recipe to. recipeData RecipeData The recipe to add. Returns CraftingGadget An instance to the created CraftingGadget to continue the recipe settings on. SetRecipeFromJson(ICustomPrefab, string) Adds recipe from a json file to this custom prefab. public static CraftingGadget SetRecipeFromJson(this ICustomPrefab customPrefab, string filePath) Parameters customPrefab ICustomPrefab The custom prefab to add recipe to. filePath string The path to the recipe json file. A string with valid recipe data json is also acceptable. Returns CraftingGadget An instance to the created CraftingGadget to continue the recipe settings on. SetSpawns(ICustomPrefab, params BiomeData[]) Adds biome spawns for this custom prefab with default UWE.WorldEntityInfo values. public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, params LootDistributionData.BiomeData[] biomesToSpawnIn) Parameters customPrefab ICustomPrefab The custom prefab to add biome spawns for. biomesToSpawnIn BiomeData[] The biomes to spawn in. Returns ICustomPrefab A reference to this instance after the operation has completed. SetSpawns(ICustomPrefab, params SpawnLocation[]) Adds coordinated spawns for this custom prefab. public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, params SpawnLocation[] spawnLocations) Parameters customPrefab ICustomPrefab The custom prefab to add coordinated spawns for. spawnLocations SpawnLocation[] The spawn locations to spawn in. Returns ICustomPrefab A reference to this instance after the operation has completed. SetSpawns(ICustomPrefab, WorldEntityInfo, params BiomeData[]) Adds biome spawns for this custom prefab. public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, WorldEntityInfo entityInfo, params LootDistributionData.BiomeData[] biomesToSpawnIn) Parameters customPrefab ICustomPrefab The custom prefab to add biome spawns for. entityInfo WorldEntityInfo Data on how the biome spawner should treat this object as. biomesToSpawnIn BiomeData[] The biomes to spawn in. Returns ICustomPrefab A reference to this instance after the operation has completed. SetUnlock(ICustomPrefab, TechType, int) Adds unlocks to this custom prefab. public static ScanningGadget SetUnlock(this ICustomPrefab customPrefab, TechType requiredForUnlock, int fragmentsToScan = 1) Parameters customPrefab ICustomPrefab The custom prefab to add unlocks to. requiredForUnlock TechType The blueprint to set as a requirement. fragmentsToScan int Amount of requiredForUnlock that must be scanned to unlock this item. Returns ScanningGadget An instance to the created ScanningGadget to continue the scanning settings on."
  },
  "api/Nautilus.Assets.Gadgets.html": {
    "href": "api/Nautilus.Assets.Gadgets.html",
    "title": "Namespace Nautilus.Assets.Gadgets",
    "keywords": "Namespace Nautilus.Assets.Gadgets Classes CraftingGadget Represents a crafting gadget EquipmentGadget Represents an equipment gadget FabricatorGadget Represents a craft tree/fabricator gadget. Gadget Represents a class that handles registers to game code. GadgetExtensions Represents extension methods for the Gadget class. ScanningGadget Represents a scanning gadget."
  },
  "api/Nautilus.Assets.Gadgets.ScanningGadget.html": {
    "href": "api/Nautilus.Assets.Gadgets.ScanningGadget.html",
    "title": "Class ScanningGadget",
    "keywords": "Class ScanningGadget Namespace Nautilus.Assets.Gadgets Assembly Nautilus.dll Represents a scanning gadget. public class ScanningGadget : Gadget Inheritance object Gadget ScanningGadget Inherited Members Gadget.prefab object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ScanningGadget(ICustomPrefab) Constructs a scanning gadget. public ScanningGadget(ICustomPrefab prefab) Parameters prefab ICustomPrefab The custom prefab to operate on. ScanningGadget(ICustomPrefab, TechType, int) Constructs a scanning gadget. public ScanningGadget(ICustomPrefab prefab, TechType requiredForUnlock, int fragmentsToScan = 1) Parameters prefab ICustomPrefab The custom prefab to operate on. requiredForUnlock TechType The blueprint that must first be unlocked to unlock this item. fragmentsToScan int The amount of RequiredForUnlock that must be scanned to unlock this item. Properties AnalysisTech Additional logic on what will happen when this item is unlocked. public KnownTech.AnalysisTech AnalysisTech { get; set; } Property Value KnownTech.AnalysisTech CategoryForPda The category within the group in the PDA blueprints where this item appears. public TechCategory CategoryForPda { get; set; } Property Value TechCategory CompoundTechsForUnlock Multiple blueprints that must first be scanned or picked up to unlocked this item. public List<TechType> CompoundTechsForUnlock { get; set; } Property Value List<TechType> EncyclopediaEntryData Adds an encyclopedia entry for this item in the PDA. public PDAEncyclopedia.EntryData EncyclopediaEntryData { get; set; } Property Value PDAEncyclopedia.EntryData FragmentsToScan Amount of RequiredForUnlock that must be scanned to unlock this item. public int FragmentsToScan { get; set; } Property Value int GroupForPda The main group in the PDA blueprints where this item appears. public TechGroup GroupForPda { get; set; } Property Value TechGroup RequiredForUnlock The blueprint that must first be scanned or picked up to unlocked this item. public required TechType RequiredForUnlock { get; set; } Property Value TechType ScannerEntryData Additional logic on how the Scanner tool will interact with this item. public PDAScanner.EntryData ScannerEntryData { get; set; } Property Value PDAScanner.EntryData Methods Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in Register(). protected override void Build() SetBuildable(bool) Classifies this item as buildable via the habitat builder. public ScanningGadget SetBuildable(bool isBuildable = true) Parameters isBuildable bool Should this item be buildable? Returns ScanningGadget A reference to this instance after the operation has completed. WithAnalysisTech(Sprite, List<StoryGoal>, FMODAsset, string) Adds additional info on what should happen when this item is unlocked. public ScanningGadget WithAnalysisTech(Sprite popupSprite, List<StoryGoal> storyGoalsToTrigger = null, FMODAsset unlockSound = null, string unlockMessage = \"NotificationBlueprintUnlocked\") Parameters popupSprite Sprite The sprite that should popup on unlock. storyGoalsToTrigger List<StoryGoal> The story goals that should be triggered on unlock. unlockSound FMODAsset The sound that will be played on unlock. unlockMessage string Message which should be shown on unlock. Returns ScanningGadget A reference to this instance after the operation has completed. WithCompoundTechsForUnlock(List<TechType>) Adds multiple blueprints that must first be scanned or picked up to unlocked this item. public ScanningGadget WithCompoundTechsForUnlock(List<TechType> compoundTechs) Parameters compoundTechs List<TechType> The compound blueprints. Returns ScanningGadget A reference to this instance after the operation has completed. WithEncyclopediaEntry(string, Sprite, Texture2D, FMODAsset) Adds an encyclopedia entry for this item in the PDA. public ScanningGadget WithEncyclopediaEntry(string path, Sprite popupSprite, Texture2D encyImage = null, FMODAsset encyAudio = null) Parameters path string The path this entry will appear in. popupSprite Sprite The sprite that will popup once this entry is unlocked. encyImage Texture2D The entry image that will appear in the encyclopedia entry encyAudio FMODAsset The audio that can be played in the entry. Returns ScanningGadget A reference to this instance after the operation has completed. WithPdaGroupCategory(TechGroup, TechCategory) Adds this item into a blueprint category to appear in. public ScanningGadget WithPdaGroupCategory(TechGroup group, TechCategory category) Parameters group TechGroup The main group in the PDA blueprints where this item appears category TechCategory The category within the group in the PDA blueprints where this item appears. Returns ScanningGadget A reference to this instance after the operation has completed. Remarks If the specified group is a tech group that is present in the uGUI_BuilderMenu.groups list, this item will automatically become buildable. To avoid this, or make this item a buildable manually, use the SetBuildable(bool) method. WithScannerEntry(float, bool, string, bool) Adds additional info on how the Scanner tool should treat this item when scanning it. public ScanningGadget WithScannerEntry(float scanTime, bool isFragment = false, string encyKey = null, bool destroyAfterScan = false) Parameters scanTime float The amount of seconds it takes to scan this item. isFragment bool Is this a fragment? encyKey string The encyclopedia key to unlock once the scanning is completed. destroyAfterScan bool Should this object be destroyed after a successful scan? Returns ScanningGadget A reference to this instance after the operation has completed."
  },
  "api/Nautilus.Assets.html": {
    "href": "api/Nautilus.Assets.html",
    "title": "Namespace Nautilus.Assets",
    "keywords": "Namespace Nautilus.Assets Classes CustomModelData Custom Model data that Nautilus will use to apply custom looks to certain prefabs. CustomModelData.Targets A class with some common target names CustomPrefab Represents a class with everything needed to make a custom prefab work. ModPrefabCache Class used by PrefabInfo to store game objects that used as prefabs. Game objects in cache are inactive and will not be on scene. SpawnLocation Defines the spawn location with world position and optional euler angles. Used in the Coordinated Spawns system. Structs PrefabInfo Data class that represents information about a prefab. Interfaces ICustomPrefab Specifies the contract for a custom prefab. Delegates PrefabFactoryAsync A delegate for prefab construction used by Nautilus to create game objects dynamically. PrefabPostProcessorAsync Delegate used for Nautilus's prefab post processing event to modify the processed prefab via a dynamic method."
  },
  "api/Nautilus.Assets.ICustomPrefab.html": {
    "href": "api/Nautilus.Assets.ICustomPrefab.html",
    "title": "Interface ICustomPrefab",
    "keywords": "Interface ICustomPrefab Namespace Nautilus.Assets Assembly Nautilus.dll Specifies the contract for a custom prefab. public interface ICustomPrefab Extension Methods GadgetExtensions.CreateFabricator(ICustomPrefab, out CraftTree.Type) GadgetExtensions.SetEquipment(ICustomPrefab, EquipmentType) GadgetExtensions.SetPdaGroupCategory(ICustomPrefab, TechGroup, TechCategory) GadgetExtensions.SetRecipe(ICustomPrefab, RecipeData) GadgetExtensions.SetRecipeFromJson(ICustomPrefab, string) GadgetExtensions.SetSpawns(ICustomPrefab, params LootDistributionData.BiomeData[]) GadgetExtensions.SetSpawns(ICustomPrefab, params SpawnLocation[]) GadgetExtensions.SetSpawns(ICustomPrefab, WorldEntityInfo, params LootDistributionData.BiomeData[]) GadgetExtensions.SetUnlock(ICustomPrefab, TechType, int) JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties Info The prefab info for this custom prefab. PrefabInfo Info { get; } Property Value PrefabInfo OnPrefabPostProcess Function that will be executed after the Nautilus's basic processing for Prefab has been completed. PrefabPostProcessorAsync OnPrefabPostProcess { get; } Property Value PrefabPostProcessorAsync Prefab Function which constructs a game object for this prefab. PrefabFactoryAsync Prefab { get; } Property Value PrefabFactoryAsync Methods AddGadget<TGadget>(TGadget) Adds a gadget to this custom prefab. TGadget AddGadget<TGadget>(TGadget gadget) where TGadget : Gadget Parameters gadget TGadget The gadget to add Returns TGadget A reference to the added gadget. Type Parameters TGadget Type of the gadget. AddOnRegister(Action) Adds an action that will be called during the registration of the prefab. void AddOnRegister(Action onRegisterCallback) Parameters onRegisterCallback Action The action that will be called. AddOnUnregister(Action) Adds an action that will be called when this prefab has performed an unregister operation. void AddOnUnregister(Action onUnregisterCallback) Parameters onUnregisterCallback Action The action that will be called. GetGadget(Type) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. Gadget GetGadget(Type gadgetType) Parameters gadgetType Type The type of the gadget to get. Returns Gadget The gadget instance if found, otherwise; null. GetGadget<TGadget>() Gets the gadget instance associated with the specified gadget type attached to this custom prefab. TGadget GetGadget<TGadget>() where TGadget : Gadget Returns TGadget The gadget instance if found, otherwise; null. Type Parameters TGadget The type of the gadget to get. RemoveGadget(Type) Removes the gadget with the specified type. bool RemoveGadget(Type gadget) Parameters gadget Type The type of the gadget to remove. Returns bool true if the gadget was successfully found and removed, otherwise; false. This method returns false if the gadget type was not found in this custom prefab. RemoveGadget<TGadget>() Removes the gadget with the specified type. bool RemoveGadget<TGadget>() where TGadget : Gadget Returns bool true if the gadget was successfully found and removed, otherwise; false. This method returns false if the gadget type was not found in this custom prefab. Type Parameters TGadget The type of the gadget to remove. TryGetGadget<TGadget>(out TGadget) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. bool TryGetGadget<TGadget>(out TGadget gadget) where TGadget : Gadget Parameters gadget TGadget The instance of the gadget found associated with the type. If not found, this will be null instead. Returns bool true if the gadget associated with type was found, otherwise; false. Type Parameters TGadget The type of the gadget to get."
  },
  "api/Nautilus.Assets.ModPrefabCache.html": {
    "href": "api/Nautilus.Assets.ModPrefabCache.html",
    "title": "Class ModPrefabCache",
    "keywords": "Class ModPrefabCache Namespace Nautilus.Assets Assembly Nautilus.dll Class used by PrefabInfo to store game objects that used as prefabs. Game objects in cache are inactive and will not be on scene. public static class ModPrefabCache Inheritance object ModPrefabCache Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddPrefab(GameObject, bool) Add prefab to cache public static void AddPrefab(GameObject prefab, bool autoremove = true) Parameters prefab GameObject Prefab to add. autoremove bool Is prefab needed to be removed from cache after use. Prefabs without autoremove flag can be safely deleted by UnityEngine.Object.Destroy(UnityEngine.Object) AddPrefabCopy(GameObject, bool) Add prefab copy to cache (instatiated copy will not run 'Awake') public static GameObject AddPrefabCopy(GameObject prefab, bool autoremove = true) Parameters prefab GameObject Prefab to copy and add. autoremove bool Is prefab copy needed to be removed from cache after use. Prefabs without autoremove flag can be safely deleted by UnityEngine.Object.Destroy(UnityEngine.Object) Returns GameObject Prefab copy"
  },
  "api/Nautilus.Assets.PrefabFactoryAsync.html": {
    "href": "api/Nautilus.Assets.PrefabFactoryAsync.html",
    "title": "Delegate PrefabFactoryAsync",
    "keywords": "Delegate PrefabFactoryAsync Namespace Nautilus.Assets Assembly Nautilus.dll A delegate for prefab construction used by Nautilus to create game objects dynamically. public delegate IEnumerator PrefabFactoryAsync(TaskResult<GameObject> gameObject) Parameters gameObject TaskResult<GameObject> Returns IEnumerator Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags)"
  },
  "api/Nautilus.Assets.PrefabInfo.html": {
    "href": "api/Nautilus.Assets.PrefabInfo.html",
    "title": "Struct PrefabInfo",
    "keywords": "Struct PrefabInfo Namespace Nautilus.Assets Assembly Nautilus.dll Data class that represents information about a prefab. public record struct PrefabInfo : IEquatable<PrefabInfo> Implements IEquatable<PrefabInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors PrefabInfo(string, string, TechType) Data class that represents information about a prefab. public PrefabInfo(string ClassID, string PrefabFileName, TechType TechType) Parameters ClassID string The class identifier used for the PrefabIdentifier component whenever applicable. PrefabFileName string Name of the prefab file. TechType TechType The TechType of the corresponding item. Properties ClassID The class identifier used for the PrefabIdentifier component whenever applicable. public string ClassID { readonly get; set; } Property Value string PrefabFileName Name of the prefab file. public string PrefabFileName { readonly get; set; } Property Value string TechType The TechType of the corresponding item. public TechType TechType { readonly get; set; } Property Value TechType Methods WithFileName(string) Sets the prefab file name as prefab info. public PrefabInfo WithFileName(string fileName) Parameters fileName string The prefab file name. Returns PrefabInfo A reference to this instance after the operation has completed. WithIcon(Sprite) Adds an icon for TechType. public PrefabInfo WithIcon(Atlas.Sprite sprite) Parameters sprite Atlas.Sprite Returns PrefabInfo A reference to this instance after the operation has completed. WithIcon(Sprite) Adds an icon for TechType. public PrefabInfo WithIcon(Sprite sprite) Parameters sprite Sprite Returns PrefabInfo A reference to this instance after the operation has completed. WithSizeInInventory(Vector2int) Sets the size of this tech type in the inventory. public PrefabInfo WithSizeInInventory(Vector2int size) Parameters size Vector2int The 2x2 vector size Returns PrefabInfo A reference to this instance after the operation has completed. WithTechType(string, string, string, string, bool, Assembly) Constructs a new PrefabInfo instance with automatically set PrefabFileName and TechType. public static PrefabInfo WithTechType(string classId, string displayName, string description, string language = \"English\", bool unlockAtStart = true, Assembly techTypeOwner = null) Parameters classId string The class identifier used for the PrefabIdentifier component whenever applicable. displayName string The display name of this Tech Type, can be anything. If null or empty, this will use the language line \"{enumName}\" instead. description string The tooltip displayed when hovered in the PDA, can be anything. If null or empty, this will use the language line \"Tooltip_{enumName}\" instead. language string The language for this entry. Defaults to English. unlockAtStart bool Whether this tech type should be unlocked on game start or not. Default to true. techTypeOwner Assembly The assembly that owns the created tech type. The name of this assembly will be shown in the PDA. Returns PrefabInfo An instance of the constructed PrefabInfo."
  },
  "api/Nautilus.Assets.PrefabPostProcessorAsync.html": {
    "href": "api/Nautilus.Assets.PrefabPostProcessorAsync.html",
    "title": "Delegate PrefabPostProcessorAsync",
    "keywords": "Delegate PrefabPostProcessorAsync Namespace Nautilus.Assets Assembly Nautilus.dll Delegate used for Nautilus's prefab post processing event to modify the processed prefab via a dynamic method. public delegate IEnumerator PrefabPostProcessorAsync(GameObject gameObject) Parameters gameObject GameObject Returns IEnumerator Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags)"
  },
  "api/Nautilus.Assets.PrefabTemplates.CloneTemplate.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.CloneTemplate.html",
    "title": "Class CloneTemplate",
    "keywords": "Class CloneTemplate Namespace Nautilus.Assets.PrefabTemplates Assembly Nautilus.dll Represents a prefab clone template. public class CloneTemplate : PrefabTemplate Inheritance object PrefabTemplate CloneTemplate Inherited Members PrefabTemplate.info object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors CloneTemplate(PrefabInfo, string) Creates a CloneTemplate instance. public CloneTemplate(PrefabInfo info, string classIdToClone) Parameters info PrefabInfo The prefab info to base this template off of. classIdToClone string The class ID to clone and use for this template. CloneTemplate(PrefabInfo, TechType) Creates a CloneTemplate instance. public CloneTemplate(PrefabInfo info, TechType techTypeToClone) Parameters info PrefabInfo The prefab info to base this template off of. techTypeToClone TechType The tech type to clone and use for this template. Properties ModelDatas Reskinning model data to apply to the clone. public List<CustomModelData> ModelDatas { get; } Property Value List<CustomModelData> ModifyPrefab Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more. public Action<GameObject> ModifyPrefab { get; set; } Property Value Action<GameObject> Methods GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate cloned prefab. public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters gameObject TaskResult<GameObject> The cloned prefab is set into this argument. If the provided task result already has a game object, this method will only call the ModifyPrefab callback on it. Otherwise; Creates a prefab clone, then runs the ModifyPrefab callback. Returns IEnumerator A coroutine operation. Must be used with either yield return, or StartCoroutine(IEnumerator)."
  },
  "api/Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.html",
    "title": "Class EnergySourceTemplate",
    "keywords": "Class EnergySourceTemplate Namespace Nautilus.Assets.PrefabTemplates Assembly Nautilus.dll Represents an energy source template. This template is capable of returning a Battery or a Power Cell. public class EnergySourceTemplate : PrefabTemplate Inheritance object PrefabTemplate EnergySourceTemplate Inherited Members PrefabTemplate.info object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors EnergySourceTemplate(PrefabInfo, int) Creates an EnergySourceTemplate instance. public EnergySourceTemplate(PrefabInfo info, int energyAmount) Parameters info PrefabInfo The prefab info to base this template off of. energyAmount int The amount of energy this source should have. Properties IsPowerCell Is this energy source a Power Cell? public bool IsPowerCell { get; set; } Property Value bool UseIonModelAsBase Determines which model to use as the base. If true, this template will use the Precursor Ion Battery or Power cell. Otherwise; uses the default Battery or Power Cell models. public bool UseIonModelAsBase { get; set; } Property Value bool Methods GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate energy source prefab. public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters gameObject TaskResult<GameObject> The energy source prefab is set into this argument. If the provided task result already has a game object, it will try to set the necessary components first. Otherwise; sets the standard Battery or Power Cell. Returns IEnumerator A coroutine operation. Must be used with either yield return, or StartCoroutine(IEnumerator)."
  },
  "api/Nautilus.Assets.PrefabTemplates.FabricatorTemplate.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.FabricatorTemplate.html",
    "title": "Class FabricatorTemplate",
    "keywords": "Class FabricatorTemplate Namespace Nautilus.Assets.PrefabTemplates Assembly Nautilus.dll Represents an fabricator template. This template is capable of returning a Fabricator or a Workbench. public class FabricatorTemplate : PrefabTemplate Inheritance object PrefabTemplate FabricatorTemplate Inherited Members PrefabTemplate.info object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors FabricatorTemplate(PrefabInfo, Type) Creates a FabricatorTemplate instance. public FabricatorTemplate(PrefabInfo info, CraftTree.Type craftTreeType) Parameters info PrefabInfo The prefab info to base this template off of. craftTreeType CraftTree.Type The craft tree type for this template. Properties ColorTint Applies a simple color tint to the fabricator model. public Color? ColorTint { get; set; } Property Value Color? ConstructableFlags Indicates where this fabricator can be placed. By default, this is set to the following flags: Inside for all fabricators. Wall for non-workbench fabricators. And Ground and Rotatable for workbench. public ConstructableFlags ConstructableFlags { get; set; } Property Value ConstructableFlags FabricatorModel The model this template will use. Leave it to Custom if you've got a custom model. public FabricatorTemplate.Model FabricatorModel { get; set; } Property Value FabricatorTemplate.Model ModifyPrefab Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more. public Action<GameObject> ModifyPrefab { get; set; } Property Value Action<GameObject> Methods GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate fabricator prefab. public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters gameObject TaskResult<GameObject> The fabricator prefab is set into this argument. If the provided task result already has a game object, it will try to set the necessary components first. Otherwise; sets the standard Battery or Power Cell. Returns IEnumerator A coroutine operation. Must be used with either yield return, or StartCoroutine(IEnumerator)."
  },
  "api/Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.html",
    "title": "Enum FabricatorTemplate.Model",
    "keywords": "Enum FabricatorTemplate.Model Namespace Nautilus.Assets.PrefabTemplates Assembly Nautilus.dll Defines a list of available models for your custom fabricator. public enum FabricatorTemplate.Model Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields Custom = 0 Use this option only if you want to provide your own custom model for your fabricator. To use this value, you must pass a non-null game object to the task result in the GetPrefabAsync(TaskResult<GameObject>) method. Fabricator = 1 The regular fabricator like the one in the life pod. MoonPool = 3 The style of fabricator found in the Moon Pool and the Cyclops sub. Workbench = 2 The modification station that upgrades your equipment."
  },
  "api/Nautilus.Assets.PrefabTemplates.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.html",
    "title": "Namespace Nautilus.Assets.PrefabTemplates",
    "keywords": "Namespace Nautilus.Assets.PrefabTemplates Classes CloneTemplate Represents a prefab clone template. EnergySourceTemplate Represents an energy source template. This template is capable of returning a Battery or a Power Cell. FabricatorTemplate Represents an fabricator template. This template is capable of returning a Fabricator or a Workbench. PrefabTemplate Represents the contract for a prefab template. Enums FabricatorTemplate.Model Defines a list of available models for your custom fabricator."
  },
  "api/Nautilus.Assets.PrefabTemplates.PrefabTemplate.html": {
    "href": "api/Nautilus.Assets.PrefabTemplates.PrefabTemplate.html",
    "title": "Class PrefabTemplate",
    "keywords": "Class PrefabTemplate Namespace Nautilus.Assets.PrefabTemplates Assembly Nautilus.dll Represents the contract for a prefab template. public abstract class PrefabTemplate Inheritance object PrefabTemplate Derived CloneTemplate EnergySourceTemplate FabricatorTemplate Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors PrefabTemplate(PrefabInfo) Constructs a prefab template. public PrefabTemplate(PrefabInfo info) Parameters info PrefabInfo The prefab info to base this template off of. Fields info The prefab info to operate on. protected readonly PrefabInfo info Field Value PrefabInfo Methods GetPrefabAsync(TaskResult<GameObject>) Gets a prefab of this template type. The returned object can be accessed via TaskResult<T>.Get(). public abstract IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters gameObject TaskResult<GameObject> The prefab computation result is set into this argument. If the provided task result already has a game object set to it, it will try to set the necessary components first. Otherwise; sets a default implementation of this entity type. Returns IEnumerator A coroutine operation. Must be used with either yield return, or StartCoroutine(IEnumerator)."
  },
  "api/Nautilus.Assets.SpawnLocation.html": {
    "href": "api/Nautilus.Assets.SpawnLocation.html",
    "title": "Class SpawnLocation",
    "keywords": "Class SpawnLocation Namespace Nautilus.Assets Assembly Nautilus.dll Defines the spawn location with world position and optional euler angles. Used in the Coordinated Spawns system. public record SpawnLocation : IEquatable<SpawnLocation> Inheritance object SpawnLocation Implements IEquatable<SpawnLocation> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors SpawnLocation(Vector3, Vector3) Defines the spawn location with world position and optional euler angles. Used in the Coordinated Spawns system. public SpawnLocation(Vector3 Position, Vector3 EulerAngles = default) Parameters Position Vector3 The world position. EulerAngles Vector3 Euler angles for the rotation the spawned object will appear with. Properties EulerAngles Euler angles for the rotation the spawned object will appear with. public Vector3 EulerAngles { get; init; } Property Value Vector3 Position The world position. public Vector3 Position { get; init; } Property Value Vector3"
  },
  "api/Nautilus.Commands.ConsoleCommandAttribute.html": {
    "href": "api/Nautilus.Commands.ConsoleCommandAttribute.html",
    "title": "Class ConsoleCommandAttribute",
    "keywords": "Class ConsoleCommandAttribute Namespace Nautilus.Commands Assembly Nautilus.dll Attribute used to signify the decorated method should be called in response to a console command. Decorated method must be both public and static. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class ConsoleCommandAttribute : Attribute, _Attribute Inheritance object Attribute ConsoleCommandAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Remarks The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: string, bool, int, float, double. If the method has a return type, it will be printed to both the screen and the log. Constructors ConsoleCommandAttribute(string) Signifies the decorated method should be called when the given command is entered in the dev console. Decorated method must be both public and static. public ConsoleCommandAttribute(string command) Parameters command string The unique, case-insensitive command that when entered into the dev console will call the decorated method. Remarks The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: string, bool, int, float, double. If the method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(string, Type, string, Type[]) RegisterConsoleCommand<T>(string, T) RegisterConsoleCommands(Type) ConsoleCommandsHandler Properties Command The unique, case-insensitive command that when entered, will call the decorated method. public string Command { get; } Property Value string See Also RegisterConsoleCommand(string, Type, string, Type[]) RegisterConsoleCommand<T>(string, T) RegisterConsoleCommands(Type) ConsoleCommandsHandler See Also RegisterConsoleCommand(string, Type, string, Type[]) RegisterConsoleCommand<T>(string, T) RegisterConsoleCommands(Type) ConsoleCommandsHandler"
  },
  "api/Nautilus.Commands.html": {
    "href": "api/Nautilus.Commands.html",
    "title": "Namespace Nautilus.Commands",
    "keywords": "Namespace Nautilus.Commands Classes ConsoleCommandAttribute Attribute used to signify the decorated method should be called in response to a console command. Decorated method must be both public and static."
  },
  "api/Nautilus.Crafting.html": {
    "href": "api/Nautilus.Crafting.html",
    "title": "Namespace Nautilus.Crafting",
    "keywords": "Namespace Nautilus.Crafting Classes ModCraftTreeCraft A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something. ModCraftTreeLinkingNode Abstract class that provides methods for adding new nodes into the crafting tree. ModCraftTreeNode Basic data structure of a crafting tree node. ModCraftTreeRoot The root node of a CraftTree. The whole tree starts here. Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. ModCraftTreeTab A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories. RecipeData A class that fully describes a recipe for a TechType identified item."
  },
  "api/Nautilus.Crafting.ModCraftTreeCraft.html": {
    "href": "api/Nautilus.Crafting.ModCraftTreeCraft.html",
    "title": "Class ModCraftTreeCraft",
    "keywords": "Class ModCraftTreeCraft Namespace Nautilus.Crafting Assembly Nautilus.dll A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something. public class ModCraftTreeCraft : ModCraftTreeNode Inheritance object ModCraftTreeNode ModCraftTreeCraft Inherited Members ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) See Also ModCraftTreeNode"
  },
  "api/Nautilus.Crafting.ModCraftTreeLinkingNode.html": {
    "href": "api/Nautilus.Crafting.ModCraftTreeLinkingNode.html",
    "title": "Class ModCraftTreeLinkingNode",
    "keywords": "Class ModCraftTreeLinkingNode Namespace Nautilus.Crafting Assembly Nautilus.dll Abstract class that provides methods for adding new nodes into the crafting tree. public abstract class ModCraftTreeLinkingNode : ModCraftTreeNode Inheritance object ModCraftTreeNode ModCraftTreeLinkingNode Derived ModCraftTreeRoot ModCraftTreeTab Inherited Members ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Fields ChildNodes The child nodes linked bellow this node. public readonly List<ModCraftTreeNode> ChildNodes Field Value List<ModCraftTreeNode> See Also ModCraftTreeNode Methods AddCraftingNode(IEnumerable<TechType>) Creates a collection of new crafting nodes for the crafting tree and links it to the calling node. public void AddCraftingNode(IEnumerable<TechType> techTypes) Parameters techTypes IEnumerable<TechType> The TechTypes to be crafted. See Also ModCraftTreeNode AddCraftingNode(TechType) Creates a new crafting node for the crafting tree and links it to the calling node. public void AddCraftingNode(TechType techType) Parameters techType TechType The TechType to be crafted. See Also ModCraftTreeNode AddCraftingNode(params TechType[]) Creates a collection of new crafting nodes for the crafting tree and links it to the calling node. public void AddCraftingNode(params TechType[] techTypes) Parameters techTypes TechType[] The TechTypes to be crafted. See Also ModCraftTreeNode AddModdedCraftingNode(string) Creates a new crafting node for a modded item and links it to the calling node. If the modded item isn't present for the player, this call is safely ignored. public void AddModdedCraftingNode(string moddedTechTypeName) Parameters moddedTechTypeName string The internal name of the custom TechType to be crafted. Remarks If the player doesn't have the mod for this TechType installed, then nothing will happen. See Also ModCraftTreeNode AddTabNode(string) Creates a new tab node for the crafting tree and links it to the calling node. public ModCraftTreeTab AddTabNode(string nameID) Parameters nameID string The name/ID of this node. Returns ModCraftTreeTab A new tab node linked to the root node and ready to use. See Also ModCraftTreeNode AddTabNode(string, string, Sprite, string) Creates a new tab node for the crafting tree and links it to the calling node. public ModCraftTreeTab AddTabNode(string nameID, string displayText, Atlas.Sprite sprite, string language = \"English\") Parameters nameID string The name/ID of this node. displayText string The hover text to display in-game. If null or empty, this will use the language line \"{CraftTreeName}_{nameID}\" instead. sprite Atlas.Sprite The custom sprite to display on this tab node. language string The language for the display name. Defaults to English. Returns ModCraftTreeTab A new tab node linked to the root node and ready to use. See Also ModCraftTreeNode AddTabNode(string, string, Sprite, string) Creates a new tab node for the crafting tree and links it to the calling node. public ModCraftTreeTab AddTabNode(string nameID, string displayText, Sprite sprite, string language = \"English\") Parameters nameID string The name/ID of this node. displayText string The hover text to display in-game. If null or empty, this will use the language line \"{CraftTreeName}_{nameID}\" instead. sprite Sprite The custom sprite to display on this tab node. language string The language for the display name. Defaults to English. Returns ModCraftTreeTab A new tab node linked to the root node and ready to use. See Also ModCraftTreeNode GetCraftingNode(TechType) Gets the crafting node from the calling node. public ModCraftTreeCraft GetCraftingNode(TechType techType) Parameters techType TechType The TechType whose node to get. Returns ModCraftTreeCraft See Also ModCraftTreeNode GetNode(string) Gets the node associated with the ID specified. Used if you don't know whether node is a tab or a craft node. public ModCraftTreeNode GetNode(string nameID) Parameters nameID string Returns ModCraftTreeNode See Also ModCraftTreeNode GetTabNode(string) Gets the tab from the calling node. public ModCraftTreeTab GetTabNode(string nameID) Parameters nameID string The name id of the tab to get. Returns ModCraftTreeTab See Also ModCraftTreeNode See Also ModCraftTreeNode"
  },
  "api/Nautilus.Crafting.ModCraftTreeNode.html": {
    "href": "api/Nautilus.Crafting.ModCraftTreeNode.html",
    "title": "Class ModCraftTreeNode",
    "keywords": "Class ModCraftTreeNode Namespace Nautilus.Crafting Assembly Nautilus.dll Basic data structure of a crafting tree node. public abstract class ModCraftTreeNode Inheritance object ModCraftTreeNode Derived ModCraftTreeCraft ModCraftTreeLinkingNode Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Fields Action The action this node takes in the crafting tree. public readonly TreeAction Action Field Value TreeAction CraftNode The the in-game representation of this node. public CraftNode CraftNode Field Value CraftNode Name The name ID for this tab node. public readonly string Name Field Value string TechType The tech type ID associated to this node. For item nodes, it is the item ID to be crafted. For root and tab nodes, this is always TechType.None. public readonly TechType TechType Field Value TechType Methods RemoveNode() Removes the calling node from parent. public void RemoveNode()"
  },
  "api/Nautilus.Crafting.ModCraftTreeRoot.html": {
    "href": "api/Nautilus.Crafting.ModCraftTreeRoot.html",
    "title": "Class ModCraftTreeRoot",
    "keywords": "Class ModCraftTreeRoot Namespace Nautilus.Crafting Assembly Nautilus.dll The root node of a CraftTree. The whole tree starts here. Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. public class ModCraftTreeRoot : ModCraftTreeLinkingNode Inheritance object ModCraftTreeNode ModCraftTreeLinkingNode ModCraftTreeRoot Inherited Members ModCraftTreeLinkingNode.ChildNodes ModCraftTreeLinkingNode.AddTabNode(string, string, Atlas.Sprite, string) ModCraftTreeLinkingNode.AddTabNode(string, string, Sprite, string) ModCraftTreeLinkingNode.AddTabNode(string) ModCraftTreeLinkingNode.GetTabNode(string) ModCraftTreeLinkingNode.GetCraftingNode(TechType) ModCraftTreeLinkingNode.GetNode(string) ModCraftTreeLinkingNode.AddCraftingNode(TechType) ModCraftTreeLinkingNode.AddCraftingNode(params TechType[]) ModCraftTreeLinkingNode.AddCraftingNode(IEnumerable<TechType>) ModCraftTreeLinkingNode.AddModdedCraftingNode(string) ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Fields CraftTreeCreation The craft tree creation function. Default implementaion returns a new CraftTree instantiated with SchemeAsString and the root CraftNode. You can replace this function with your own to have more control of the crafting tree when it is being created. public Func<CraftTree> CraftTreeCreation Field Value Func<CraftTree> See Also ModCraftTreeLinkingNode Methods AddCraftNode(string, string) Safely attempts to add a new crafting node to the custom crafting tree of this fabricator. If the modded TechType is not found, the craft node will not be added. public ModCraftTreeRoot AddCraftNode(string moddedTechType, string parentTabId = null) Parameters moddedTechType string The modded item to craft. parentTabId string Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns ModCraftTreeRoot See Also ModCraftTreeLinkingNode AddCraftNode(TechType, string) Adds a new crafting node to the custom crafting tree of this fabricator. public ModCraftTreeRoot AddCraftNode(TechType techType, string parentTabId = null) Parameters techType TechType The item to craft. parentTabId string Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns ModCraftTreeRoot See Also ModCraftTreeLinkingNode AddTabNode(string, string, Sprite, string, string) Adds a new tab node to the custom crafting tree of this fabricator. public ModCraftTreeRoot AddTabNode(string tabId, string displayText, Atlas.Sprite tabSprite, string language = \"English\", string parentTabId = null) Parameters tabId string The internal ID for the tab node. displayText string The in-game text shown for the tab node. If null or empty, this will use the language line \"{CraftTreeName}_{tabId}\" instead. tabSprite Atlas.Sprite The sprite used for the tab node. language string The language for the display name. Defaults to English. parentTabId string Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns ModCraftTreeRoot See Also ModCraftTreeLinkingNode AddTabNode(string, string, Sprite, string, string) Adds a new tab node to the custom crafting tree of this fabricator. public ModCraftTreeRoot AddTabNode(string tabId, string displayText, Sprite tabSprite, string language = \"English\", string parentTabId = null) Parameters tabId string The internal ID for the tab node. displayText string The in-game text shown for the tab node. If null or empty, this will use the language line \"{CraftTreeName}_{tabId}\" instead. tabSprite Sprite The sprite used for the tab node. language string The language for the display name. Defaults to English. parentTabId string Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns ModCraftTreeRoot See Also ModCraftTreeLinkingNode GetNode(params string[]) Gets the node at the specified path from the root. public ModCraftTreeNode GetNode(params string[] stepsToNode) Parameters stepsToNode string[] The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. Returns ModCraftTreeNode If the specified tab node is found, returns that ModCraftTreeNode; Otherwise, returns null. See Also ModCraftTreeLinkingNode GetTabNode(params string[]) Gets the tab node at the specified path from the root. public ModCraftTreeTab GetTabNode(params string[] stepsToTab) Parameters stepsToTab string[] The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. Returns ModCraftTreeTab If the specified tab node is found, returns that ModCraftTreeTab; Otherwise, returns null. See Also ModCraftTreeLinkingNode See Also ModCraftTreeLinkingNode"
  },
  "api/Nautilus.Crafting.ModCraftTreeTab.html": {
    "href": "api/Nautilus.Crafting.ModCraftTreeTab.html",
    "title": "Class ModCraftTreeTab",
    "keywords": "Class ModCraftTreeTab Namespace Nautilus.Crafting Assembly Nautilus.dll A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories. public class ModCraftTreeTab : ModCraftTreeLinkingNode Inheritance object ModCraftTreeNode ModCraftTreeLinkingNode ModCraftTreeTab Inherited Members ModCraftTreeLinkingNode.ChildNodes ModCraftTreeLinkingNode.AddTabNode(string, string, Atlas.Sprite, string) ModCraftTreeLinkingNode.AddTabNode(string, string, Sprite, string) ModCraftTreeLinkingNode.AddTabNode(string) ModCraftTreeLinkingNode.GetTabNode(string) ModCraftTreeLinkingNode.GetCraftingNode(TechType) ModCraftTreeLinkingNode.GetNode(string) ModCraftTreeLinkingNode.AddCraftingNode(TechType) ModCraftTreeLinkingNode.AddCraftingNode(params TechType[]) ModCraftTreeLinkingNode.AddCraftingNode(IEnumerable<TechType>) ModCraftTreeLinkingNode.AddModdedCraftingNode(string) ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) See Also ModCraftTreeLinkingNode"
  },
  "api/Nautilus.Crafting.RecipeData.html": {
    "href": "api/Nautilus.Crafting.RecipeData.html",
    "title": "Class RecipeData",
    "keywords": "Class RecipeData Namespace Nautilus.Crafting Assembly Nautilus.dll A class that fully describes a recipe for a TechType identified item. public class RecipeData : ITechData Inheritance object RecipeData Implements ITechData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors RecipeData() Initializes a new instance of the RecipeData class a custom recipe. public RecipeData() RecipeData(params Ingredient[]) Initializes a new instance of the RecipeData class for a custom recipe with a collection of ingridients. public RecipeData(params CraftData.Ingredient[] ingredients) Parameters ingredients Ingredient[] The ingredients. RecipeData(List<Ingredient>) Initializes a new instance of the RecipeData class for a custom recipe with a list of ingridients. public RecipeData(List<CraftData.Ingredient> ingredients) Parameters ingredients List<CraftData.Ingredient> The ingredients. Fields Ingredients The list of ingredients required for this recipe. [JsonProperty] public List<CraftData.Ingredient> Ingredients Field Value List<CraftData.Ingredient> LinkedItems The items that will also be created when this recipe is crafted. [JsonProperty] public List<TechType> LinkedItems Field Value List<TechType> Properties craftAmount Gets or sets the how many copies of the item are created when crafting this recipe. [JsonProperty] public int craftAmount { get; set; } Property Value int The quantity of the item this recipe yields. ingredientCount Gets the number of different ingredients for this recipe. [JsonIgnore] public int ingredientCount { get; } Property Value int The number of ingredients for this recipe. linkedItemCount Gets the number of items linked to this recipe. [JsonIgnore] public int linkedItemCount { get; } Property Value int The number of linked items. Methods GetIngredient(int) Gets the ingredient at the specified index. public CraftData.Ingredient GetIngredient(int index) Parameters index int The index. Returns CraftData.Ingredient The CraftData.Ingredient at the requested the index if the index is value; Otherwise returns null. GetLinkedItem(int) Gets the linked item at the specified index. public TechType GetLinkedItem(int index) Parameters index int The index. Returns TechType The TechType at the requested the index if the index is value; Otherwise returns null."
  },
  "api/Nautilus.Extensions.GameObjectExtensions.html": {
    "href": "api/Nautilus.Extensions.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions",
    "keywords": "Class GameObjectExtensions Namespace Nautilus.Extensions Assembly Nautilus.dll Contains extension methods for Unity objects. public static class GameObjectExtensions Inheritance object GameObjectExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) Adds a component with the TNewComponent type, then copies the field values of the TCopiedComponent into it. public static TNewComponent AddAndCopyComponent<TNewComponent, TCopiedComponent>(this GameObject obj) where TNewComponent : Component, TCopiedComponent Parameters obj GameObject The Game object to perform this action on. Returns TNewComponent The new component with the correct field values. Type Parameters TNewComponent The type of the new component. TCopiedComponent The type of the copied component. Remarks This method only takes effect on public fields that are serializable, or non-public fields with the UnityEngine.SerializeField attribute. See Also CopyComponent<TSelfComponent, TCopiedComponent>(TSelfComponent, TCopiedComponent) EnsureAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) CopyComponent<TSelfComponent, TCopiedComponent>(TSelfComponent, TCopiedComponent) Copies the field values from the specified component to the current component. public static TSelfComponent CopyComponent<TSelfComponent, TCopiedComponent>(this TSelfComponent @this, TCopiedComponent copyFrom) where TSelfComponent : Component, TCopiedComponent Parameters this TSelfComponent The current instance to copy to. copyFrom TCopiedComponent The specified instance to copy from. Returns TSelfComponent The current component with the correct field values. Type Parameters TSelfComponent The type of this component. TCopiedComponent The type of the copied component. Remarks This method only takes effect on public fields that are serializable, or non-public fields with the UnityEngine.SerializeField attribute. See Also AddAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) EnsureAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) EnsureAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) Ensures a component with the TNewComponent type exists, then copies the field values of the TCopiedComponent into it. public static TNewComponent EnsureAndCopyComponent<TNewComponent, TCopiedComponent>(this GameObject obj) where TNewComponent : Component, TCopiedComponent Parameters obj GameObject The Game object to perform this action on. Returns TNewComponent The new component with the correct field values. Type Parameters TNewComponent The type of the new component. TCopiedComponent The type of the copied component. Remarks This method only takes effect on public fields that are serializable, or non-public fields with the UnityEngine.SerializeField attribute. See Also CopyComponent<TSelfComponent, TCopiedComponent>(TSelfComponent, TCopiedComponent) EnsureAndCopyComponent<TNewComponent, TCopiedComponent>(GameObject) Exists<T>(T) Checks if the object exists. This method is a wrapper to allow null-coalescing operator usage by respecting Unity's object life cycle. public static T Exists<T>(this T @object) where T : Object Parameters object T the object Returns T The object if exists, otherwise null. Type Parameters T the UnityEngine.Object type"
  },
  "api/Nautilus.Extensions.GeneralExtensions.html": {
    "href": "api/Nautilus.Extensions.GeneralExtensions.html",
    "title": "Class GeneralExtensions",
    "keywords": "Class GeneralExtensions Namespace Nautilus.Extensions Assembly Nautilus.dll Contains extensions that are not exclusively specific to one type. public static class GeneralExtensions Inheritance object GeneralExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Add<T>(T[], T) Adds an object to the end of the Array. public static void Add<T>(this T[] array, T item) Parameters array T[] The array to perform this action on. item T The object to be added to the end of the Array. The value can be null for reference types. Type Parameters T TrimClone(string) Removes the \"(Clone)\" part from names. public static string TrimClone(this string @this) Parameters this string The string to perform this action on. Returns string The new string without \"(Clone)\". If the specified string does not contain \"(Clone)\", it simply returns the string as-is."
  },
  "api/Nautilus.Extensions.html": {
    "href": "api/Nautilus.Extensions.html",
    "title": "Namespace Nautilus.Extensions",
    "keywords": "Namespace Nautilus.Extensions Classes GameObjectExtensions Contains extension methods for Unity objects. GeneralExtensions Contains extensions that are not exclusively specific to one type."
  },
  "api/Nautilus.FMod.FModMultiSounds.html": {
    "href": "api/Nautilus.FMod.FModMultiSounds.html",
    "title": "Class FModMultiSounds",
    "keywords": "Class FModMultiSounds Namespace Nautilus.FMod Assembly Nautilus.dll This class is used to register FMOD events with multiple sounds in one event. public class FModMultiSounds : IFModSound Inheritance object FModMultiSounds Implements IFModSound Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors FModMultiSounds(Sound[], string, bool) Constructs a new instance of FModMultiSounds. Used to register FMOD events with multiple sounds in one event. public FModMultiSounds(Sound[] sounds, string busPath, bool randomizeSounds = false) Parameters sounds Sound[] The sounds to register for this object. Please ensure that none of the sounds are on FMOD.MODE.LOOP_NORMAL or FMOD.MODE.LOOP_BIDI modes. busPath string FMOD.Studio.Bus path to play these sounds under. randomizeSounds bool Makes the sounds play in a randomized order. when false, sounds will play subsequently. FModMultiSounds(string[], MODE, string, bool) Constructs a new instance of FModMultiSounds. Used to register FMOD events with multiple sounds in one event. public FModMultiSounds(string[] soundPaths, MODE mode, string busPath, bool randomizeSounds = false) Parameters soundPaths string[] The sound paths to register for this object. Paths must be relative to the base game folder. mode MODE The mode to set the clips to. Cannot be MODE.LOOP_NORMAL or MODE.LOOP_BIDI. busPath string FMOD.Studio.Bus path to play these sounds under. randomizeSounds bool Makes the sounds play in a randomized order. when false, sounds will play subsequently. FModMultiSounds(AudioClip[], MODE, string, bool) Constructs a new instance of FModMultiSounds. Used to register FMOD events with multiple sounds in one event. public FModMultiSounds(AudioClip[] clips, MODE mode, string busPath, bool randomizeSounds = false) Parameters clips AudioClip[] The clips to register for this object. mode MODE The mode to set the clips to. Cannot be MODE.LOOP_NORMAL or MODE.LOOP_BIDI. busPath string FMOD.Studio.Bus path to play these sounds under. randomizeSounds bool Makes the sounds play in a randomized order. when false, sounds will play subsequently. Fields randomizeSounds Makes the sounds play in a randomized order. when false, sounds will play subsequently. public bool randomizeSounds Field Value bool"
  },
  "api/Nautilus.FMod.html": {
    "href": "api/Nautilus.FMod.html",
    "title": "Namespace Nautilus.FMod",
    "keywords": "Namespace Nautilus.FMod Classes FModMultiSounds This class is used to register FMOD events with multiple sounds in one event."
  },
  "api/Nautilus.FMod.Interfaces.html": {
    "href": "api/Nautilus.FMod.Interfaces.html",
    "title": "Namespace Nautilus.FMod.Interfaces",
    "keywords": "Namespace Nautilus.FMod.Interfaces Interfaces IFModSound This interface is used to integrate with CustomSoundHandler."
  },
  "api/Nautilus.FMod.Interfaces.IFModSound.html": {
    "href": "api/Nautilus.FMod.Interfaces.IFModSound.html",
    "title": "Interface IFModSound",
    "keywords": "Interface IFModSound Namespace Nautilus.FMod.Interfaces Assembly Nautilus.dll This interface is used to integrate with CustomSoundHandler. public interface IFModSound Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods TryPlaySound(out Channel) Defines how to play sound in this object. bool TryPlaySound(out Channel channel) Parameters channel Channel The channel on which the sound was created. Returns bool If the sound was reported as played."
  },
  "api/Nautilus.Handlers.ConsoleCommandsHandler.html": {
    "href": "api/Nautilus.Handlers.ConsoleCommandsHandler.html",
    "title": "Class ConsoleCommandsHandler",
    "keywords": "Class ConsoleCommandsHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for registering your custom console commands. public static class ConsoleCommandsHandler Inheritance object ConsoleCommandsHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterConsoleCommand(string, Type, string, Type[]) Registers your custom console command by targeting a public static method. public static void RegisterConsoleCommand(string command, Type declaringType, string methodName, Type[] parameters) Parameters command string The case-insensitive command to register. declaringType Type The declaring type that holds the method to call when the command is entered. methodName string The name of the method to call within the declaring type when the command is entered. Method must be static. parameters Type[] The parameter types the method receives, for targeting overloads. Remarks Target method must be static. The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: string, bool, int, float, double. If the method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand<T>(string, T) RegisterConsoleCommands(Type) ConsoleCommandAttribute RegisterConsoleCommand<T>(string, T) Registers your custom console command by passing a delegate. public static void RegisterConsoleCommand<T>(string command, T callback) where T : Delegate Parameters command string The case-insensitive command to register. callback T The callback to handle the command. Type Parameters T The delegate type. Remarks Supported parameter types: string, bool, int, float, double. If the delegate has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(string, Type, string, Type[]) RegisterConsoleCommands(Type) ConsoleCommandAttribute RegisterConsoleCommands(Type) Registers public static methods decorated with the ConsoleCommandAttribute within the type as console commands. public static void RegisterConsoleCommands(Type type) Parameters type Type Remarks Target methods must be static. Commands can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: string, bool, int, float, double. If a decorated method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(string, Type, string, Type[]) RegisterConsoleCommand<T>(string, T) ConsoleCommandAttribute"
  },
  "api/Nautilus.Handlers.CoordinatedSpawnsHandler.html": {
    "href": "api/Nautilus.Handlers.CoordinatedSpawnsHandler.html",
    "title": "Class CoordinatedSpawnsHandler",
    "keywords": "Class CoordinatedSpawnsHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for registering Coordinated Spawns. public static class CoordinatedSpawnsHandler Inheritance object CoordinatedSpawnsHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterCoordinatedSpawn(SpawnInfo) Registers a Coordinated Spawn. public static void RegisterCoordinatedSpawn(SpawnInfo spawnInfo) Parameters spawnInfo SpawnInfo the SpawnInfo to spawn. RegisterCoordinatedSpawns(List<SpawnInfo>) registers Many Coordinated Spawns. public static void RegisterCoordinatedSpawns(List<SpawnInfo> spawnInfos) Parameters spawnInfos List<SpawnInfo> The SpawnInfos to spawn. RegisterCoordinatedSpawnsForOneTechType(TechType, params SpawnLocation[]) Registers Multiple Coordinated spawns with rotations for one single passed TechType. public static void RegisterCoordinatedSpawnsForOneTechType(TechType techTypeToSpawn, params SpawnLocation[] spawnLocations) Parameters techTypeToSpawn TechType The TechType to spawn. spawnLocations SpawnLocation[] The spawn locations to spawn in. Euler angles are optional."
  },
  "api/Nautilus.Handlers.CraftDataHandler.html": {
    "href": "api/Nautilus.Handlers.CraftDataHandler.html",
    "title": "Class CraftDataHandler",
    "keywords": "Class CraftDataHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for adding and editing crafted items. public static class CraftDataHandler Inheritance object CraftDataHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddBuildable(TechType) Allows you to add items to the buildable list. public static void AddBuildable(TechType techType) Parameters techType TechType The TechType which you want to add to the buildable list. AddToGroup(TechGroup, TechCategory, TechType) Allows you to add items to the game's internal grouping system. Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA. public static void AddToGroup(TechGroup group, TechCategory category, TechType techType) Parameters group TechGroup The TechGroup you want to add your TechType to. category TechCategory The TechCategory (in the TechGroup) you want to add your TechType to. techType TechType The TechType you want to add. AddToGroup(TechGroup, TechCategory, TechType, TechType) Allows you to add items to the game's internal grouping system. Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA. public static void AddToGroup(TechGroup group, TechCategory category, TechType techType, TechType after) Parameters group TechGroup The TechGroup you want to add your TechType to. category TechCategory The TechCategory (in the TechGroup) you want to add your TechType to. techType TechType The TechType you want to add. after TechType Added TechType will be added after this TechType, for sorting purposes. ConvertToRecipeData(ITechData) Converts the games ITechData into Nautilus RecipeData. public static RecipeData ConvertToRecipeData(ITechData iTechData) Parameters iTechData ITechData Returns RecipeData GetModdedRecipeData(TechType) Safely accesses the crafting data from a modded item. WARNING: This method is highly dependent on mod load order. Make sure your mod is loading after the mod whose RecipeData you are trying to access. public static RecipeData GetModdedRecipeData(TechType techType) Parameters techType TechType The TechType whose RecipeData you want to access. Returns RecipeData The RecipeData from the modded item if it exists; Otherwise, returns null. GetRecipeData(TechType) Safely accesses the crafting data from any item. WARNING: This method is highly dependent on mod load order. Make sure your mod is loading after the mod whose RecipeData you are trying to access. public static RecipeData GetRecipeData(TechType techType) Parameters techType TechType The TechType whose RecipeData you want to access. Returns RecipeData Returns RecipeData if it exists; Otherwise, returns null. RemoveFromGroup(TechGroup, TechCategory, TechType) Allows you to remove an existing TechType from the game's internal group system. public static void RemoveFromGroup(TechGroup group, TechCategory category, TechType techType) Parameters group TechGroup The TechGroup in which the TechType is located. category TechCategory The TechCategory in which the TechType is located. techType TechType The TechType which you want to remove. SetBackgroundType(TechType, BackgroundType) Allows you to edit inventory background colors for TechTypes. public static void SetBackgroundType(TechType techType, CraftData.BackgroundType backgroundColor) Parameters techType TechType The TechType whose BackgroundType you want to edit. backgroundColor CraftData.BackgroundType The background color for that TechType. See Also CraftData.BackgroundType SetCookedVariant(TechType, TechType) Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType. Can be used for existing TechTypes too. public static void SetCookedVariant(TechType uncooked, TechType cooked) Parameters uncooked TechType The TechType whose cooked creature counterpart to edit. cooked TechType The cooked creature counterpart for that TechType. SetCraftingTime(TechType, float) Allows you to edit crafting times for TechTypes. Can be used for existing TechTypes too. public static void SetCraftingTime(TechType techType, float time) Parameters techType TechType The TechType whose crafting time you want to edit. time float The crafting time, in seconds, for that TechType. SetEatingSound(TechType, string) Sets the eating sound for the provided TechType. public static void SetEatingSound(TechType consumable, string soundPath) Parameters consumable TechType The item being consumed during Survival.Eat(UnityEngine.GameObject). soundPath string The sound path. Value values are - \"event:/player/drink\" - \"event:/player/drink_stillsuit\" - \"event:/player/use_first_aid\" - \"event:/player/eat\" (default) SetEquipmentType(TechType, EquipmentType) Allows you to edit EquipmentTypes for TechTypes. Can be used for existing TechTypes too. public static void SetEquipmentType(TechType techType, EquipmentType equipmentType) Parameters techType TechType The TechType whose EqiupmentType you want to edit. equipmentType EquipmentType The EquipmentType for that TechType. SetHarvestFinalCutBonus(TechType, int) Allows you to edit how much additional slices/seeds are given upon last knife hit. Can be used for existing TechTypes too. public static void SetHarvestFinalCutBonus(TechType techType, int bonus) Parameters techType TechType The TechType whose final cut bonus you want to edit. bonus int The number of additional slices/seeds you'll receive on last cut. SetHarvestOutput(TechType, TechType) Allows you to edit harvest output, i.e. what TechType you get when you \"harvest\" a TechType. Can be used for existing TechTypes too. public static void SetHarvestOutput(TechType techType, TechType harvestOutput) Parameters techType TechType The TechType whose harvest output you want to edit. harvestOutput TechType The harvest output for that TechType. SetHarvestType(TechType, HarvestType) Allows you to edit how TechTypes are harvested. Can be used for existing TechTypes too. public static void SetHarvestType(TechType techType, HarvestType harvestType) Parameters techType TechType The TechType whose HarvestType you want to edit. harvestType HarvestType The HarvestType for that TechType. SetItemSize(TechType, int, int) Allows you to edit item sizes for TechTypes. Can be used for existing TechTypes too. public static void SetItemSize(TechType techType, int x, int y) Parameters techType TechType The TechType whose item size you want to edit. x int The width of the item y int The height of the item SetItemSize(TechType, Vector2int) Allows you to edit item sizes for TechTypes. Can be used for existing TechTypes too. public static void SetItemSize(TechType techType, Vector2int size) Parameters techType TechType The TechType whose item size you want to edit. size Vector2int The item size for that TechType. SetQuickSlotType(TechType, QuickSlotType) Allows you to edit QuickSlotType for TechTypes. Can be used for existing TechTypes too. Careful: This has to be called after SetRecipeData(TechType, ITechData) and SetRecipeData(TechType, RecipeData). public static void SetQuickSlotType(TechType techType, QuickSlotType slotType) Parameters techType TechType The TechType whose QuickSlotType you want to edit. slotType QuickSlotType The QuickSlotType for that TechType. SetRecipeData(TechType, ITechData) Allows you to edit recipes, i.e. RecipeData for TechTypes. Can be used for existing TechTypes too. public static void SetRecipeData(TechType techType, ITechData techData) Parameters techType TechType The TechType whose RecipeData you want to edit. techData ITechData The ITechData for that TechType. See Also RecipeData SetRecipeData(TechType, RecipeData) Allows you to edit recipes, i.e. RecipeData for TechTypes. Can be used for existing TechTypes too. public static void SetRecipeData(TechType techType, RecipeData recipeData) Parameters techType TechType The TechType whose RecipeData you want to edit. recipeData RecipeData The RecipeData for that TechType. See Also RecipeData"
  },
  "api/Nautilus.Handlers.CraftTreeHandler.html": {
    "href": "api/Nautilus.Handlers.CraftTreeHandler.html",
    "title": "Class CraftTreeHandler",
    "keywords": "Class CraftTreeHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for creating and modifying crafting trees. public static class CraftTreeHandler Inheritance object CraftTreeHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddCraftingNode(Type, TechType) Adds a new crafting node to the root of the specified crafting tree public static void AddCraftingNode(CraftTree.Type craftTree, TechType craftingItem) Parameters craftTree CraftTree.Type The target craft tree to edit. craftingItem TechType The item to craft. AddCraftingNode(Type, TechType, params string[]) Adds a new crafting node to the root of the specified crafting tree, at the provided tab location. public static void AddCraftingNode(CraftTree.Type craftTree, TechType craftingItem, params string[] stepsToTab) Parameters craftTree CraftTree.Type The target craft tree to edit. craftingItem TechType The item to craft. stepsToTab string[] The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. AddTabNode(Type, string, string, Sprite) Adds a new tab node to the root of the specified crafting tree. public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Atlas.Sprite sprite) Parameters craftTree CraftTree.Type The target craft tree to edit. name string The ID of the tab node. Must be unique! displayName string The display name of the tab, which will show up when you hover your mouse on the tab. sprite Atlas.Sprite The sprite of the tab. AddTabNode(Type, string, string, Sprite, params string[]) Adds a new tab node to the root of the specified crafting tree, at the specified tab location. public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Atlas.Sprite sprite, params string[] stepsToTab) Parameters craftTree CraftTree.Type The target craft tree to edit. name string The ID of the tab node. Must be unique! displayName string The display name of the tab, which will show up when you hover your mouse on the tab. sprite Atlas.Sprite The sprite of the tab. stepsToTab string[] The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. AddTabNode(Type, string, string, Sprite) Adds a new tab node to the root of the specified crafting tree. public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Sprite sprite) Parameters craftTree CraftTree.Type The target craft tree to edit. name string The ID of the tab node. Must be unique! displayName string The display name of the tab, which will show up when you hover your mouse on the tab. sprite Sprite The sprite of the tab. AddTabNode(Type, string, string, Sprite, params string[]) Adds a new tab node to the root of the specified crafting tree, at the specified tab location. public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Sprite sprite, params string[] stepsToTab) Parameters craftTree CraftTree.Type The target craft tree to edit. name string The ID of the tab node. Must be unique! displayName string The display name of the tab, which will show up when you hover your mouse on the tab. sprite Sprite The sprite of the tab. stepsToTab string[] The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. RemoveNode(Type, params string[]) Removes a node at the specified node location. Can be used to remove either tabs or craft nodes. If a tab node is selected, all child nodes to it will also be removed. public static void RemoveNode(CraftTree.Type craftTree, params string[] stepsToNode) Parameters craftTree CraftTree.Type The target craft tree to edit. stepsToNode string[] The steps to the target node. These must match the id value of the CraftNode in the crafting tree you're targeting. This means matching the id of the crafted item or the id of the tab name. Do not include \"root\" in this path."
  },
  "api/Nautilus.Handlers.CustomSoundHandler.html": {
    "href": "api/Nautilus.Handlers.CustomSoundHandler.html",
    "title": "Class CustomSoundHandler",
    "keywords": "Class CustomSoundHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for adding and overriding Sounds. Also see the AudioUtils class. public static class CustomSoundHandler Inheritance object CustomSoundHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterCustomSound(string, Sound, Bus) Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static void RegisterCustomSound(string id, Sound sound, Bus bus) Parameters id string The Id of your custom sound which is used when checking which sounds to play. sound Sound The pre loaded sound bus Bus The bus to play the sound on. RegisterCustomSound(string, Sound, string) Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static void RegisterCustomSound(string id, Sound sound, string busPath) Parameters id string The Id of your custom sound which is used when checking which sounds to play. sound Sound The pre loaded sound busPath string The bus path to play the sound on. RegisterCustomSound(string, IFModSound) Registers a Custom sound by an IFModSound instance. IFModSound instances have custom logic for playing sounds. public static void RegisterCustomSound(string id, IFModSound fModSound) Parameters id string The Id of your custom sound which is used when checking which sounds to play. fModSound IFModSound The sound IFModSound object to register. RegisterCustomSound(string, string, Bus) Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static Sound RegisterCustomSound(string id, string filePath, Bus bus) Parameters id string The Id of your custom sound which is used when checking which sounds to play. filePath string The file path on disk of the sound file to load. bus Bus The bus to play the sound on. Returns Sound the FMOD.Sound loaded RegisterCustomSound(string, string, string) Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static Sound RegisterCustomSound(string id, string filePath, string busPath) Parameters id string The Id of your custom sound which is used when checking which sounds to play. filePath string The file path on disk of the sound file to load. busPath string The bus path to play the sound on. Returns Sound the FMOD.Sound loaded RegisterCustomSound(string, AudioClip, Bus) Register a custom sound by an UnityEngine.AudioClip instance. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static Sound RegisterCustomSound(string id, AudioClip audio, Bus bus) Parameters id string The Id of your custom sound which is used when checking which sounds to play. audio AudioClip The AudioClip to register. bus Bus The bus to play the sound on. Returns Sound the FMOD.Sound loaded RegisterCustomSound(string, AudioClip, string) Register a custom sound by an UnityEngine.AudioClip instance. Some vanilla game sounds can be overridden by matching the id to the FMODAsset.path. public static Sound RegisterCustomSound(string id, AudioClip audio, string busPath) Parameters id string The Id of your custom sound which is used when checking which sounds to play. audio AudioClip The AudioClip to register. busPath string The bus path to play the sound on. Returns Sound the FMOD.Sound loaded TryGetCustomSound(string, out Sound) Try to get a registered custom FMOD.Sound. public static bool TryGetCustomSound(string id, out Sound sound) Parameters id string The Id of the custom sound sound Sound Outputs the FMOD.Sound if found and null if not found. Returns bool true or false depending on if the id was found TryGetCustomSoundChannel(int, out Channel) Try to get a playing custom sound channel for an emitter public static bool TryGetCustomSoundChannel(int id, out Channel channel) Parameters id int The emitter's ID, can be retrieved by calling object.GetInstanceID(). channel Channel Outputs the FMOD.Channel. Returns bool True if found, otherwise false. TryPlayCustomSound(string, out Channel) Try to find and play a custom FMOD.Sound that has been registered. public static bool TryPlayCustomSound(string id, out Channel channel) Parameters id string The Id of the custom sound channel Channel the FMOD.Channelthe sound is playing on. Returns bool"
  },
  "api/Nautilus.Handlers.EatableHandler.html": {
    "href": "api/Nautilus.Handlers.EatableHandler.html",
    "title": "Class EatableHandler",
    "keywords": "Class EatableHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for modyfing the data of edible objects (objects with the Eatable component). public static class EatableHandler Inheritance object EatableHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ModifyEatable(TechType, float, float, bool) Use this to change the values of a specific TechType. public static void ModifyEatable(TechType item, float food, float water, bool decomposes) Parameters item TechType The TechType of the item you want to change. food float The food value you want to change it to. water float The water value you want to change it to. decomposes bool Whether or not the item decomposes over time"
  },
  "api/Nautilus.Handlers.EnumBuilder-1.html": {
    "href": "api/Nautilus.Handlers.EnumBuilder-1.html",
    "title": "Class EnumBuilder<TEnum>",
    "keywords": "Class EnumBuilder<TEnum> Namespace Nautilus.Handlers Assembly Nautilus.dll Represents a custom enum object. This class cannot be inherited. public sealed class EnumBuilder<TEnum> where TEnum : Enum Type Parameters TEnum Type of the enum. Inheritance object EnumBuilder<TEnum> Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties Value The enum value corresponding to this builder. public TEnum Value { get; } Property Value TEnum Methods ToString() Converts the value of this instance to a string. public override string ToString() Returns string A string whose value is the same as this instance. Operators implicit operator TEnum(EnumBuilder<TEnum>) Converts an EnumBuilder to its corresponding enum object. public static implicit operator TEnum(EnumBuilder<TEnum> enumBuilder) Parameters enumBuilder EnumBuilder<TEnum> The Enum Builder Returns TEnum The enum object equivalent to this instance."
  },
  "api/Nautilus.Handlers.EnumExtensions.html": {
    "href": "api/Nautilus.Handlers.EnumExtensions.html",
    "title": "Class EnumExtensions",
    "keywords": "Class EnumExtensions Namespace Nautilus.Handlers Assembly Nautilus.dll Extensions to interact more with custom enum objects. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateCraftTreeRoot(EnumBuilder<Type>, out ModCraftTreeRoot) Creates a custom crafting tree. Creating a new CraftTree only makes sense if you're going to use it in a new type of GhostCrafter. public static EnumBuilder<CraftTree.Type> CreateCraftTreeRoot(this EnumBuilder<CraftTree.Type> builder, out ModCraftTreeRoot craftTreeRoot) Parameters builder EnumBuilder<CraftTree.Type> The custom enum object to make a crafting tree for. craftTreeRoot ModCraftTreeRoot The root node for your custom craft tree, as a new ModCraftTreeRoot instance. Build up your custom crafting tree from this root node. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. Returns EnumBuilder<CraftTree.Type> A reference to this instance after the operation has completed. IsDefinedByDefault<TEnum>(TEnum) Checks if an enum value is defined by default or added using Nautilus. public static bool IsDefinedByDefault<TEnum>(this TEnum enumValue) where TEnum : Enum Parameters enumValue TEnum The enum value to look for. Returns bool true if the specified enum value is defined by default, otherwise; false. Type Parameters TEnum The type of the enum. RegisterToTechGroup(EnumBuilder<TechCategory>, TechGroup) Registers this TechCategory instance to a TechGroup. public static EnumBuilder<TechCategory> RegisterToTechGroup(this EnumBuilder<TechCategory> builder, TechGroup techGroup) Parameters builder EnumBuilder<TechCategory> The current custom enum object instance. techGroup TechGroup The Tech Group to add this TechCategory to. Returns EnumBuilder<TechCategory> A reference to this instance after the operation has completed. WithBackground(EnumBuilder<BackgroundType>, Sprite) Adds a sprite for this instance. public static EnumBuilder<CraftData.BackgroundType> WithBackground(this EnumBuilder<CraftData.BackgroundType> builder, Atlas.Sprite backgroundSprite) Parameters builder EnumBuilder<CraftData.BackgroundType> The current custom enum object instance backgroundSprite Atlas.Sprite The sprite to add for this instance. Returns EnumBuilder<CraftData.BackgroundType> A reference to this instance after the operation has completed. WithIcon(EnumBuilder<PingType>, Sprite) Adds an icon for this instance. public static EnumBuilder<PingType> WithIcon(this EnumBuilder<PingType> builder, Atlas.Sprite sprite) Parameters builder EnumBuilder<PingType> The current custom enum object instance. sprite Atlas.Sprite The icon to add for this instance. Returns EnumBuilder<PingType> A reference to this instance after the operation has completed. WithIcon(EnumBuilder<PingType>, Sprite) Adds an icon for this instance. public static EnumBuilder<PingType> WithIcon(this EnumBuilder<PingType> builder, Sprite sprite) Parameters builder EnumBuilder<PingType> The current custom enum object instance. sprite Sprite The icon to add for this instance. Returns EnumBuilder<PingType> A reference to this instance after the operation has completed. WithIcon(EnumBuilder<TechType>, Sprite) Adds an icon for this instance. public static EnumBuilder<TechType> WithIcon(this EnumBuilder<TechType> builder, Atlas.Sprite sprite) Parameters builder EnumBuilder<TechType> The current custom enum object instance. sprite Atlas.Sprite The icon to add for this instance. Returns EnumBuilder<TechType> A reference to this instance after the operation has completed. WithIcon(EnumBuilder<TechType>, Sprite) Adds an icon for this instance. public static EnumBuilder<TechType> WithIcon(this EnumBuilder<TechType> builder, Sprite sprite) Parameters builder EnumBuilder<TechType> The current custom enum object instance. sprite Sprite The icon to add for this instance. Returns EnumBuilder<TechType> A reference to this instance after the operation has completed. WithPdaInfo(EnumBuilder<TechCategory>, string, string) Adds a display name to this instance. public static EnumBuilder<TechCategory> WithPdaInfo(this EnumBuilder<TechCategory> builder, string displayName, string language = \"English\") Parameters builder EnumBuilder<TechCategory> The current enum object instance. displayName string The display name of the Tech Category, can be anything. If null or empty, this will use the language line \"TechCategory{enumName}\" instead. language string The language for the display name. Defaults to English. Returns EnumBuilder<TechCategory> A reference to this instance after the operation has completed. WithPdaInfo(EnumBuilder<TechGroup>, string, string) Adds a display name to this instance. public static EnumBuilder<TechGroup> WithPdaInfo(this EnumBuilder<TechGroup> builder, string displayName, string language = \"English\") Parameters builder EnumBuilder<TechGroup> The current custom enum object instance. displayName string The display name of the Tech Group, can be anything. If null or empty, this will use the language line \"Group{enumName}\" instead. language string The language for the display name. Defaults to English. Returns EnumBuilder<TechGroup> A reference to this instance after the operation has completed. WithPdaInfo(EnumBuilder<TechType>, string, string, string, bool) Adds a display name, tooltip to this instance. public static EnumBuilder<TechType> WithPdaInfo(this EnumBuilder<TechType> builder, string displayName, string tooltip, string language = \"English\", bool unlockAtStart = true) Parameters builder EnumBuilder<TechType> The current custom enum object instance. displayName string The display name of this Tech Type, can be anything. If null or empty, this will use the language line \"{enumName}\" instead. tooltip string The tooltip displayed when hovered in the PDA, can be anything. If null or empty, this will use the language line \"Tooltip_{enumName}\" instead. language string The language for this entry. Defaults to English. unlockAtStart bool Whether this instance should be unlocked on game start or not. Returns EnumBuilder<TechType> A reference to this instance after the operation has completed. WithSizeInInventory(EnumBuilder<TechType>, Vector2int) Sets the size in inventory for this instance. public static EnumBuilder<TechType> WithSizeInInventory(this EnumBuilder<TechType> builder, Vector2int size) Parameters builder EnumBuilder<TechType> The current custom enum object instance. size Vector2int The 2x2 vector size Returns EnumBuilder<TechType> A reference to this instance after the operation has completed."
  },
  "api/Nautilus.Handlers.EnumHandler.html": {
    "href": "api/Nautilus.Handlers.EnumHandler.html",
    "title": "Class EnumHandler",
    "keywords": "Class EnumHandler Namespace Nautilus.Handlers Assembly Nautilus.dll Class responsible to resolve anything related to adding custom enum objects. public static class EnumHandler Inheritance object EnumHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddEntry<TEnum>(string) Adds a new custom enum object instance. public static EnumBuilder<TEnum> AddEntry<TEnum>(string name) where TEnum : Enum Parameters name string The name for this instance. Must be unique and not contain any special characters. Returns EnumBuilder<TEnum> A reference to the created custom enum object or if the name is already in use it will return null. Type Parameters TEnum Type of the enum to add an entry for. AddEntry<TEnum>(string, Assembly) Adds a new custom enum object instance. public static EnumBuilder<TEnum> AddEntry<TEnum>(string name, Assembly ownerAssembly) where TEnum : Enum Parameters name string The name for this instance. Must be unique and not contain any special characters. ownerAssembly Assembly The owner of this TechType instance. Returns EnumBuilder<TEnum> A reference to the created custom enum object or if the name is already in use it will return null Type Parameters TEnum Type of the enum to add an entry for. ModdedEnumExists<TEnum>(string) Safely looks for a custom enum object from another mod. public static bool ModdedEnumExists<TEnum>(string name) where TEnum : Enum Parameters name string The name of the custom enum object. Returns bool true if the object was found; otherwise false. Type Parameters TEnum Type of the enum to search for. TryAddEntry<TEnum>(string, out EnumBuilder<TEnum>) Adds a new custom enum object instance. public static bool TryAddEntry<TEnum>(string name, out EnumBuilder<TEnum> builder) where TEnum : Enum Parameters name string The name for this instance. Must be unique and not contain any special characters. builder EnumBuilder<TEnum> The reference to the created custom enum object. Returns bool trueif successful; otherwise, false. Type Parameters TEnum Type of the enum to add an entry for. TryAddEntry<TEnum>(string, Assembly, out EnumBuilder<TEnum>) Adds a new custom enum object instance. public static bool TryAddEntry<TEnum>(string name, Assembly ownerAssembly, out EnumBuilder<TEnum> builder) where TEnum : Enum Parameters name string The name for this instance. Must be unique and not contain any special characters. ownerAssembly Assembly The owner of this TechType instance. builder EnumBuilder<TEnum> The reference to the created custom enum object. Returns bool trueif successful otherwise; false. Type Parameters TEnum Type of the enum to add an entry for. TryGetOwnerAssembly<TEnum>(TEnum, out Assembly) Safely looks for a custom enum object from another mod and outputs the instance when found. public static bool TryGetOwnerAssembly<TEnum>(TEnum modEnumValue, out Assembly addedBy) where TEnum : Enum Parameters modEnumValue TEnum The custom enum object value. addedBy Assembly The Assembly that added the Enum value. Returns bool true if the Assembly was found; otherwise false. Type Parameters TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first. TryGetValue<TEnum>(string, out TEnum) Safely looks for a custom enum object from another mod and outputs the instance when found. public static bool TryGetValue<TEnum>(string name, out TEnum enumValue) where TEnum : Enum Parameters name string The name of the custom enum object. enumValue TEnum The custom enum object value. Returns bool true if the object was found; otherwise, false. Type Parameters TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first. TryGetValue<TEnum>(string, out TEnum, out Assembly) Safely looks for a custom enum object from another mod and outputs the instance when found. public static bool TryGetValue<TEnum>(string name, out TEnum enumValue, out Assembly addedBy) where TEnum : Enum Parameters name string The name of the custom enum object. enumValue TEnum The custom enum object value. addedBy Assembly The Assembly that added the Enum value. Returns bool true if the object was found; otherwise false. Type Parameters TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first."
  },
  "api/Nautilus.Handlers.html": {
    "href": "api/Nautilus.Handlers.html",
    "title": "Namespace Nautilus.Handlers",
    "keywords": "Namespace Nautilus.Handlers Classes ConsoleCommandsHandler A handler class for registering your custom console commands. CoordinatedSpawnsHandler A handler class for registering Coordinated Spawns. CraftDataHandler A handler class for adding and editing crafted items. CraftTreeHandler A handler class for creating and modifying crafting trees. CustomSoundHandler A handler class for adding and overriding Sounds. Also see the AudioUtils class. EatableHandler A handler class for modyfing the data of edible objects (objects with the Eatable component). EnumBuilder<TEnum> Represents a custom enum object. This class cannot be inherited. EnumExtensions Extensions to interact more with custom enum objects. EnumHandler Class responsible to resolve anything related to adding custom enum objects. ItemActionHandler A handler class for registering custom actions when left clicking or middle clicking on an item. KnownTechHandler A handler class for configuring custom unlocking conditions for item blueprints. LanguageHandler A handler class for adding or modifying language lines. LootDistributionHandler A handler that manages the distribution of spawned resources throughout the world. Used for fish, items, outcrops, fragments, eggs, etc... OptionsPanelHandler A handler class for registering your custom in-game mod options. PDAHandler A handler class for various PDA-related purposes: Registering log entries. Registering encyclopedia (databank) entries. Defining data for scanning fragments and other items. PrefabCollection Represents a collection of PrefabInfo as keys and prefab factory as values. PrefabCollectionExtensions Represents extension methods for the PrefabCollection class. PrefabHandler A handler for registering prefabs into the game. SaveDataHandler A handler class for registering your SaveDataCache. SpriteHandler A handler class for adding custom sprites into the game. StoryGoalHandler A handler class for interacting with all of the major goal systems in Subnautica, which are essential for the's game progression. Allows for important game events to be triggered after a specified action is completed. SurvivalHandler Handler class that relates to the Survival component. Allows the defining of oxygen or health gains when consuming specific items. WorldEntityDatabaseHandler A handler class for the UWE.WorldEntityDatabase. This class is essential for the game's Loot Distribution System to work properly. Structs SpawnInfo A basic struct that provides enough info for the CoordinatedSpawnsHandler System to function."
  },
  "api/Nautilus.Handlers.ItemActionHandler.html": {
    "href": "api/Nautilus.Handlers.ItemActionHandler.html",
    "title": "Class ItemActionHandler",
    "keywords": "Class ItemActionHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for registering custom actions when left clicking or middle clicking on an item. public static class ItemActionHandler Inheritance object ItemActionHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterLeftClickAction(TechType, Action<InventoryItem>, string, string, Predicate<InventoryItem>) Registers a custom left click action for a TechType public static void RegisterLeftClickAction(TechType targetTechType, Action<InventoryItem> callback, string tooltip, string language = null, Predicate<InventoryItem> condition = null) Parameters targetTechType TechType The TechType to which the left click action will be assigned callback Action<InventoryItem> The method which will be called when a matching InventoryItem with the specified TechType was left-clicked tooltip string The secondary tooltip which will appear in the description of the item. If null or empty, this will use the language line \"LeftClickAction_{targetTechType}\" instead. language string The language for the tooltip. Defaults to English. condition Predicate<InventoryItem> The condition which must return true for the action to be called when the item is clicked If omitted, the action will always be called RegisterMiddleClickAction(TechType, Action<InventoryItem>, string, string, Predicate<InventoryItem>) Registers a custom middle click action for a TechType public static void RegisterMiddleClickAction(TechType targetTechType, Action<InventoryItem> callback, string tooltip, string language = null, Predicate<InventoryItem> condition = null) Parameters targetTechType TechType The TechType which the middle click action will be assigned callback Action<InventoryItem> The method which will be called when a matching InventoryItem with the specified TechType was middle-clicked tooltip string The secondary tooltip which will appear in the description of the item language string The language for the tooltip. Defaults to English. condition Predicate<InventoryItem> The condition which must return true for the action to be called when the item is clicked If omitted, the action will always be called"
  },
  "api/Nautilus.Handlers.KnownTechHandler.html": {
    "href": "api/Nautilus.Handlers.KnownTechHandler.html",
    "title": "Class KnownTechHandler",
    "keywords": "Class KnownTechHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for configuring custom unlocking conditions for item blueprints. public static class KnownTechHandler Inheritance object KnownTechHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RemoveAllCurrentAnalysisTechEntry(TechType) Allows you to remove all unlock entries from a TechType to be able to disable or change it to a new unlock. ***Note: This is patch time specific so the LAST mod to call this on a techtype will be the only one to control what unlocks said type after its use.*** public static void RemoveAllCurrentAnalysisTechEntry(TechType targetTechType) Parameters targetTechType TechType Target TechType to remove the unlocks for. RemoveAnalysisTechEntryFromSpecific(TechType, List<TechType>) Allows you to remove unlock entries for a TechType from specific entries. public static void RemoveAnalysisTechEntryFromSpecific(TechType targetTechType, List<TechType> techTypes) Parameters targetTechType TechType Target TechType to remove the unlocks for. techTypes List<TechType> List of TechType to remove the targetTechType from. SetAnalysisTechEntry(AnalysisTech) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in KnownTech.AnalysisTech.unlockTechTypes will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(KnownTech.AnalysisTech analysisTech) Parameters analysisTech KnownTech.AnalysisTech The analysis tech entry to add. SetAnalysisTechEntry(TechType, IEnumerable<TechType>) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockSound FMODAsset The sound that plays when you unlock the blueprint. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound, Sprite unlockSprite) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockSound FMODAsset The sound that plays when you unlock the blueprint. unlockSprite Sprite The sprite that shows up when you unlock the blueprint. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset, Sprite, List<StoryGoal>) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound, Sprite unlockSprite, List<StoryGoal> storyGoals) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockSound FMODAsset The sound that plays when you unlock the blueprint. unlockSprite Sprite The sprite that shows up when you unlock the blueprint. storyGoals List<StoryGoal> The story goals that will be triggered when you unlock the blueprint. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, string) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockMessage string The message that shows up on the right when the blueprint is unlocked. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, string, FMODAsset) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage, FMODAsset unlockSound) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockMessage string The message that shows up on the right when the blueprint is unlocked. unlockSound FMODAsset The sound that plays when you unlock the blueprint. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, string, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage, Sprite unlockSprite) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockMessage string The message that shows up on the right when the blueprint is unlocked. unlockSprite Sprite The sprite that shows up when you unlock the blueprint. SetAnalysisTechEntry(TechType, IEnumerable<TechType>, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, Sprite unlockSprite) Parameters techTypeToBeAnalysed TechType This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list techTypesToUnlock IEnumerable<TechType> The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. unlockSprite Sprite The sprite that shows up when you unlock the blueprint. SetCompoundUnlock(TechType, List<TechType>) Allows you to set up a custom Compound Unlock requiring multiple techtypes to be unlocked before 1 is. ***Note: This will not remove any original unlock and if you need to do so you should use RemoveAnalysisTechEntryFromSpecific(TechType, List<TechType>) or RemoveAllCurrentAnalysisTechEntry(TechType) public static void SetCompoundUnlock(TechType techType, List<TechType> compoundTechsForUnlock) Parameters techType TechType compoundTechsForUnlock List<TechType> UnlockOnStart(TechType) Allows you to unlock a TechType on game start. public static void UnlockOnStart(TechType techType) Parameters techType TechType"
  },
  "api/Nautilus.Handlers.LanguageHandler.html": {
    "href": "api/Nautilus.Handlers.LanguageHandler.html",
    "title": "Class LanguageHandler",
    "keywords": "Class LanguageHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for adding or modifying language lines. public static class LanguageHandler Inheritance object LanguageHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterLocalization(string, Dictionary<string, string>) Registers language entries for a specific language. public static void RegisterLocalization(string language, Dictionary<string, string> languageStrings) Parameters language string The language to register the entries to. languageStrings Dictionary<string, string> The language entries to register. RegisterLocalizationFolder(string) Registers a folder path as a Multi-Language json files folder. Please make sure that the passed folder contains json files that are properly named after the language each json file localizes. public static void RegisterLocalizationFolder(string languageFolderName = \"Localization\") Parameters languageFolderName string the folder name. This folder is expected to be found at ModFolder/languageFolderName. SetLanguageLine(string, string, string) Allows you to define a language entry into the game. public static void SetLanguageLine(string lineId, string text, string language = \"English\") Parameters lineId string The ID of the entry, this is what is used to get the actual text. text string The actual text related to the entry. language string The language for this specific entry. Defaults to English. SetTechTypeName(TechType, string, string) Allows you to set the display name of a specific TechType. public static void SetTechTypeName(TechType techType, string text, string language = \"English\") Parameters techType TechType The TechType whose display name that is to be changed. text string The new display name for the chosen TechType. language string The language for this entry. Defaults to English. SetTechTypeTooltip(TechType, string, string) Allows you to set the tooltip of a specific TechType. public static void SetTechTypeTooltip(TechType techType, string text, string language = \"English\") Parameters techType TechType The TechType whose tooltip that is to be changed. text string The new tooltip for the chosen TechType. language string The language for this entry. Defaults to English."
  },
  "api/Nautilus.Handlers.LootDistributionHandler.html": {
    "href": "api/Nautilus.Handlers.LootDistributionHandler.html",
    "title": "Class LootDistributionHandler",
    "keywords": "Class LootDistributionHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler that manages the distribution of spawned resources throughout the world. Used for fish, items, outcrops, fragments, eggs, etc... public static class LootDistributionHandler Inheritance object LootDistributionHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddLootDistributionData(PrefabInfo, IEnumerable<BiomeData>, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. public static void AddLootDistributionData(PrefabInfo prefabInfo, IEnumerable<LootDistributionData.BiomeData> biomeDistribution, WorldEntityInfo info) Parameters prefabInfo PrefabInfo The custom prefab which you want to spawn naturally in the game. biomeDistribution IEnumerable<LootDistributionData.BiomeData> The LootDistributionData.BiomeData dictating how the prefab should spawn in the world. info WorldEntityInfo The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler. AddLootDistributionData(string, params BiomeData[]) Adds in a custom entry into Loot Distribution of the game. public static void AddLootDistributionData(string classId, params LootDistributionData.BiomeData[] biomeDistribution) Parameters classId string The classId of the prefab. biomeDistribution BiomeData[] The LootDistributionData.BiomeData dictating how the prefab should spawn in the world. AddLootDistributionData(string, SrcData) Adds in a custom entry into the Loot Distribution of the game. public static void AddLootDistributionData(string classId, LootDistributionData.SrcData data) Parameters classId string The classId of the prefab. data LootDistributionData.SrcData The LootDistributionData.SrcData that contains data related to the spawning of a prefab, also contains the path to the prefab. AddLootDistributionData(string, SrcData, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. You must also add the UWE.WorldEntityInfo into the UWE.WorldEntityDatabase using WorldEntityDatabaseHandler. public static void AddLootDistributionData(string classId, LootDistributionData.SrcData data, WorldEntityInfo info) Parameters classId string The classId of the prefab. data LootDistributionData.SrcData The LootDistributionData.SrcData that contains data related to the spawning of a prefab, also contains the path to the prefab. info WorldEntityInfo The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler. AddLootDistributionData(string, string, IEnumerable<BiomeData>) Adds in a custom entry into the Loot Distribution of the game. You must also add the UWE.WorldEntityInfo into the UWE.WorldEntityDatabase using WorldEntityDatabaseHandler. public static void AddLootDistributionData(string classId, string prefabPath, IEnumerable<LootDistributionData.BiomeData> biomeDistribution) Parameters classId string The classId of the prefab. prefabPath string The prefab path of the prefab. biomeDistribution IEnumerable<LootDistributionData.BiomeData> The LootDistributionData.BiomeData dictating how the prefab should spawn in the world. AddLootDistributionData(string, string, IEnumerable<BiomeData>, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. public static void AddLootDistributionData(string classId, string prefabPath, IEnumerable<LootDistributionData.BiomeData> biomeDistribution, WorldEntityInfo info) Parameters classId string The classId of the prefab. prefabPath string The prefab path of the prefab. biomeDistribution IEnumerable<LootDistributionData.BiomeData> The LootDistributionData.BiomeData dictating how the prefab should spawn in the world. info WorldEntityInfo The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler. AddLootDistributionData(string, WorldEntityInfo, params BiomeData[]) Adds in a custom entry into Loot Distribution of the game. public static void AddLootDistributionData(string classId, WorldEntityInfo info, params LootDistributionData.BiomeData[] biomeDistribution) Parameters classId string The classId of the prefab. info WorldEntityInfo The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler. biomeDistribution BiomeData[] The LootDistributionData.BiomeData dictating how the prefab should spawn in the world. EditLootDistributionData(string, BiomeType, float, int) Edits Loot Distribution data for existing prefabs. public static void EditLootDistributionData(string classId, BiomeType biome, float probability, int count) Parameters classId string The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType. biome BiomeType The BiomeTypeto change the data for. probability float The desired probability. count int The number to spawn at a time when spawning happens. EditLootDistributionData(string, IEnumerable<BiomeData>) Edits Loot Distribution data for existing prefabs, for e.g. original game prefabs. public static void EditLootDistributionData(string classId, IEnumerable<LootDistributionData.BiomeData> biomeDistribution) Parameters classId string The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType. biomeDistribution IEnumerable<LootDistributionData.BiomeData> The list of LootDistributionData.BiomeData that contains information about how/when it should spawn in biomes."
  },
  "api/Nautilus.Handlers.OptionsPanelHandler.html": {
    "href": "api/Nautilus.Handlers.OptionsPanelHandler.html",
    "title": "Class OptionsPanelHandler",
    "keywords": "Class OptionsPanelHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for registering your custom in-game mod options. public static class OptionsPanelHandler Inheritance object OptionsPanelHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterModOptions(ModOptions) Registers your mod options to the in-game menu. public static void RegisterModOptions(ModOptions options) Parameters options ModOptions The mod options. Create a new child class inheriting from this one and add your options to it. See Also ModOptions RegisterModOptions<T>() Generates an options menu based on the attributes and members declared in the ConfigFile and registers it to the in-game menu. public static T RegisterModOptions<T>() where T : ConfigFile, new() Returns T An instance of the T : ConfigFile with values loaded from the config file on disk. Type Parameters T A class derived from ConfigFile to generate the options menu from."
  },
  "api/Nautilus.Handlers.PDAHandler.html": {
    "href": "api/Nautilus.Handlers.PDAHandler.html",
    "title": "Class PDAHandler",
    "keywords": "Class PDAHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for various PDA-related purposes: Registering log entries. Registering encyclopedia (databank) entries. Defining data for scanning fragments and other items. public static class PDAHandler Inheritance object PDAHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties UnlockBasic Sound asset used for unlocking most PDA entries, which is a short but pleasant sound. Path is 'event:/tools/scanner/new_encyclopediea'. public static FMODAsset UnlockBasic { get; } Property Value FMODAsset UnlockImportant Subnautica: Sound asset for unlocking important PDA entries, where PDA says \"Integrating new PDA data.\" Path is 'event:/loot/new_PDA_data'. Below Zero: Sound asset for unlocking more important (generally story related) PDA entries. Path is 'event:/bz/ui/story_unlocked'. public static FMODAsset UnlockImportant { get; } Property Value FMODAsset Methods AddCustomScannerEntry(EntryData) Adds in a custom PDAScanner.EntryData. ***Cannot be used to Change the values of a techtype that has data already!*** public static void AddCustomScannerEntry(PDAScanner.EntryData entryData) Parameters entryData PDAScanner.EntryData The PDAScanner.EntryData of the entry. Must be populated when passed in. AddCustomScannerEntry(TechType, TechType, bool, string, int, float, bool) Adds in a custom PDAScanner.EntryData. public static void AddCustomScannerEntry(TechType key, TechType blueprint, bool isFragment, string encyclopediaKey, int totalFragmentsRequired = 2, float scanTime = 2, bool destroyAfterScan = true) Parameters key TechType The scanned object's TechType. In case of fragments, the fragment TechType is the key. blueprint TechType The blueprint when unlocked when scanned. In case of fragments, this is the actual TechType that unlocks when all fragments are scanned. isFragment bool Whether the key is a fragment or not. encyclopediaKey string The key to the encyclopedia entry. totalFragmentsRequired int The total amount of objects of key that need to be scanned to unlock the blueprint and encyclopediaKey. scanTime float The amount of time it takes to finish one scan. In seconds. destroyAfterScan bool Whether the object should be destroyed after the scan is finished. AddEncyclopediaEntry(EntryData) Adds custom entry. public static void AddEncyclopediaEntry(PDAEncyclopedia.EntryData entry) Parameters entry PDAEncyclopedia.EntryData The PDAEncyclopedia.EntryData entry. AddEncyclopediaEntry(string, string, string, string, Texture2D, Sprite, FMODAsset, FMODAsset) Registers a single encyclopedia entry into the game. public static void AddEncyclopediaEntry(string key, string path, string title, string desc, Texture2D image = null, Sprite popupImage = null, FMODAsset unlockSound = null, FMODAsset voiceLog = null) Parameters key string Key (internal ID) of this PDA entry, primarily used for the language system. path string Path to this entry in the databank. To find examples of this string, open \"Subnautica_Data\\StreamingAssets\\SNUnmanagedData\\LanguageFiles\\English.json\" and search for \"EncyPath\". Remember to omit the \"EncyPath_\" prefix from these language keys. An example of a proper value is: \"Lifeforms/Fauna/Leviathans\". title string Displayed title of the PDA entry in English. If set to null, you must implement your own translations. Language key is 'Ency_{key}'. desc string Displayed description of the PDA entry in English. If set to null, you must implement your own translations. Language key is 'EncyDesc_{key}'. image Texture2D Databank entry image. Can be null. popupImage Sprite Small popup image in the notification. Can be null. unlockSound FMODAsset Sound on unlock. Typical values are UnlockBasic and UnlockImportant. If unassigned, will have a default value of UnlockBasic. voiceLog FMODAsset Audio player that will be displayed inside this PDA entry, typically used for voice logs. Can be null. AddLogEntry(string, string, Sound, Sprite) Adds a custom PDA log entry message. Can be played by the Story Goal system (see StoryGoalHandler) or manually through Add(string, bool). public static void AddLogEntry(string key, string languageKey, Sound sound, Sprite icon = null) Parameters key string The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is truly unique! languageKey string The subtitles language key for this entry. Also see: SetLanguageLine(string, string, string). sound Sound The sound that will be played once this log entry is unlocked or played through the PDA's Log tab. icon Sprite The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon. AddLogEntry(string, string, FMODAsset, Sprite) Adds a custom PDA log entry message. Can be played by the Story Goal system (see StoryGoalHandler) or manually through Add(string, bool). public static void AddLogEntry(string key, string languageKey, FMODAsset sound, Sprite icon = null) Parameters key string The key (unique identifier) for this entry. languageKey string The subtitles language key for this entry. Also see: SetLanguageLine(string, string, string). sound FMODAsset The sound that will be played once this log entry is unlocked or played through the PDA's Log tab. Note that the SoundQueue system (which plays the PDA sounds) accesses the FMODAsset's \"id\" field rather than the path, so make sure it is assigned properly. icon Sprite The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon. AddLogEntry(string, string, IFModSound, Sprite) Adds a custom PDA log entry message. Can be played by the Story Goal system (see StoryGoalHandler) or manually through Add(string, bool). public static void AddLogEntry(string key, string languageKey, IFModSound fmodSound, Sprite icon = null) Parameters key string The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is truly unique! languageKey string The subtitles language key for this entry. Also see: SetLanguageLine(string, string, string). fmodSound IFModSound The IFModSound instance that is used to create a custom sound. IFModSound instances have custom logic for playing sounds. that is accessed when this log entry is played. icon Sprite The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon. AddLogEntry(string, string, string, Sprite) Adds a custom PDA log entry message. Can be played by the Story Goal system (see StoryGoalHandler) or manually through Add(string, bool). public static void AddLogEntry(string key, string languageKey, string soundFilePath, Sprite icon = null) Parameters key string The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is truly unique! languageKey string The subtitles language key for this entry. Also see: SetLanguageLine(string, string, string). soundFilePath string The file path on the disk to the sound that will be played once this log entry is unlocked or played through the PDA's Log tab. icon Sprite The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon. AddLogEntry(string, string, AudioClip, Sprite) Adds a custom PDA log entry message. Can be played by the Story Goal system (see StoryGoalHandler) or manually through Add(string, bool). public static void AddLogEntry(string key, string languageKey, AudioClip audioClip, Sprite icon = null) Parameters key string The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is truly unique! languageKey string The subtitles language key for this entry. Also see: SetLanguageLine(string, string, string). audioClip AudioClip The sound that will be played once this log entry is unlocked or played through the PDA's Log tab. This is automatically converted to an FMOD sound. icon Sprite The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon. EditFragmentScanTime(TechType, float) Edits the time it takes to finish scanning a fragment. public static void EditFragmentScanTime(TechType techType, float scanTime) Parameters techType TechType Can be either techtype of the fragment or the crafted item. scanTime float The relative time spent on scanning. Default value is 1. EditFragmentsToScan(TechType, int) Edits how many fragments must be scanned before unlocking the techtype's blueprint. public static void EditFragmentsToScan(TechType techType, int fragmentCount) Parameters techType TechType Can be either techtype of the fragment or the crafted item. fragmentCount int The number of fragments to scan."
  },
  "api/Nautilus.Handlers.PrefabCollection.html": {
    "href": "api/Nautilus.Handlers.PrefabCollection.html",
    "title": "Class PrefabCollection",
    "keywords": "Class PrefabCollection Namespace Nautilus.Handlers Assembly Nautilus.dll Represents a collection of PrefabInfo as keys and prefab factory as values. public class PrefabCollection : IEnumerable<KeyValuePair<PrefabInfo, PrefabFactoryAsync>>, IEnumerable Inheritance object PrefabCollection Implements IEnumerable<KeyValuePair<PrefabInfo, PrefabFactoryAsync>> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods PrefabCollectionExtensions.RegisterPrefab(PrefabCollection, ICustomPrefab) PrefabCollectionExtensions.UnregisterPrefab(PrefabCollection, ICustomPrefab) JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods Add(PrefabInfo, PrefabFactoryAsync, PrefabPostProcessorAsync) Adds a prefab info with the function that constructs the game object into the game. public void Add(PrefabInfo info, PrefabFactoryAsync prefabFactory, PrefabPostProcessorAsync postProcessor = null) Parameters info PrefabInfo The prefab info to register. prefabFactory PrefabFactoryAsync The function that constructs the game object for this prefab info. postProcessor PrefabPostProcessorAsync The prefab post processor that will be invoked after Nautilus's prefab processing. ContainsPrefabInfo(PrefabInfo) Determines whether the provided prefab info is registered. public bool ContainsPrefabInfo(PrefabInfo info) Parameters info PrefabInfo The prefab info to look for Returns bool true if found; otherwise, . Remove(PrefabInfo) Removes a prefab info from the game. This leads to unregistering the specified prefab info from the game. public bool Remove(PrefabInfo info) Parameters info PrefabInfo The prefab info to unregister. Returns bool if the element is successfully found and removed; otherwise, . This method returns if the prefab info is not found. TryGetInfoForClassId(string, out PrefabInfo) Gets the prefab info associated with the provided class ID. public bool TryGetInfoForClassId(string classId, out PrefabInfo info) Parameters classId string The class ID of the prefab info to get. info PrefabInfo The returned prefab info. If nothing was found for the class ID specified, this will be set to the default initialization instead. Returns bool True if found; otherwise false. TryGetInfoForFileName(string, out PrefabInfo) Gets the prefab info associated with the provided file name. public bool TryGetInfoForFileName(string fileName, out PrefabInfo info) Parameters fileName string The file name of the prefab info to get. info PrefabInfo The returned prefab info. If nothing was found for the file name specified, this will be set to the default initialization instead. Returns bool True if found; otherwise false. TryGetInfoForTechType(TechType, out PrefabInfo) Gets the prefab info associated with the provided tech type. public bool TryGetInfoForTechType(TechType techType, out PrefabInfo info) Parameters techType TechType The tech type of the prefab info to get. info PrefabInfo The returned prefab info. If nothing was found for the tech type specified, this will be set to the default initialization instead. Returns bool True if found; otherwise false. TryGetPostProcessorForInfo(PrefabInfo, out PrefabPostProcessorAsync) Gets the prefab post processor associated with the provided info. public bool TryGetPostProcessorForInfo(PrefabInfo info, out PrefabPostProcessorAsync postProcessor) Parameters info PrefabInfo The info of the post processor to get. postProcessor PrefabPostProcessorAsync The returned post processor. If nothing was found for the prefab info specified, this will be set to the default initialization instead. Returns bool true if found; otherwise, . TryGetPrefabForInfo(PrefabInfo, out PrefabFactoryAsync) Gets the prefab factory associated with the provided info. public bool TryGetPrefabForInfo(PrefabInfo info, out PrefabFactoryAsync prefabFactory) Parameters info PrefabInfo The info of the prefab factory to get. prefabFactory PrefabFactoryAsync The returned prefab factory. If nothing was found for the prefab info specified, this will be set to the default initialization instead. Returns bool true if found; otherwise, ."
  },
  "api/Nautilus.Handlers.PrefabCollectionExtensions.html": {
    "href": "api/Nautilus.Handlers.PrefabCollectionExtensions.html",
    "title": "Class PrefabCollectionExtensions",
    "keywords": "Class PrefabCollectionExtensions Namespace Nautilus.Handlers Assembly Nautilus.dll Represents extension methods for the PrefabCollection class. public static class PrefabCollectionExtensions Inheritance object PrefabCollectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterPrefab(PrefabCollection, ICustomPrefab) Registers a CustomPrefab into the game. public static void RegisterPrefab(this PrefabCollection collection, ICustomPrefab customPrefab) Parameters collection PrefabCollection The collection to register to. customPrefab ICustomPrefab The custom prefab to register. UnregisterPrefab(PrefabCollection, ICustomPrefab) Unregisters a CustomPrefab from the game. public static void UnregisterPrefab(this PrefabCollection collection, ICustomPrefab customPrefab) Parameters collection PrefabCollection The collection to unregister from. customPrefab ICustomPrefab The custom prefab to unregister."
  },
  "api/Nautilus.Handlers.PrefabHandler.html": {
    "href": "api/Nautilus.Handlers.PrefabHandler.html",
    "title": "Class PrefabHandler",
    "keywords": "Class PrefabHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler for registering prefabs into the game. public static class PrefabHandler Inheritance object PrefabHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Prefabs A collection of custom prefabs to add to the game. public static PrefabCollection Prefabs { get; } Property Value PrefabCollection"
  },
  "api/Nautilus.Handlers.SaveDataHandler.html": {
    "href": "api/Nautilus.Handlers.SaveDataHandler.html",
    "title": "Class SaveDataHandler",
    "keywords": "Class SaveDataHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for registering your SaveDataCache. public static class SaveDataHandler Inheritance object SaveDataHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterSaveDataCache<T>() Registers your SaveDataCache to be automatically loaded and saved whenever the game is. public static T RegisterSaveDataCache<T>() where T : SaveDataCache, new() Returns T An instance of the T : SaveDataCache with values loaded from the json file on disk whenever a save slot is loaded. Type Parameters T A class derived from SaveDataCache to hold your save data."
  },
  "api/Nautilus.Handlers.SpawnInfo.html": {
    "href": "api/Nautilus.Handlers.SpawnInfo.html",
    "title": "Struct SpawnInfo",
    "keywords": "Struct SpawnInfo Namespace Nautilus.Handlers Assembly Nautilus.dll A basic struct that provides enough info for the CoordinatedSpawnsHandler System to function. public struct SpawnInfo : IEquatable<SpawnInfo> Implements IEquatable<SpawnInfo> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors SpawnInfo(string, Vector3) Initializes a new SpawnInfo. public SpawnInfo(string classId, Vector3 spawnPosition) Parameters classId string ClassID to spawn. spawnPosition Vector3 Position to spawn into. SpawnInfo(string, Vector3, Quaternion) Initializes a new SpawnInfo. public SpawnInfo(string classId, Vector3 spawnPosition, Quaternion rotation) Parameters classId string ClassID to spawn. spawnPosition Vector3 Position to spawn into. rotation Quaternion Rotation to spawn at. SpawnInfo(string, Vector3, Vector3) Initializes a new SpawnInfo. public SpawnInfo(string classId, Vector3 spawnPosition, Vector3 rotation) Parameters classId string ClassID to spawn. spawnPosition Vector3 Position to spawn into. rotation Vector3 Rotation to spawn at. SpawnInfo(TechType, Vector3) Initializes a new SpawnInfo. public SpawnInfo(TechType techType, Vector3 spawnPosition) Parameters techType TechType TechType to spawn. spawnPosition Vector3 Position to spawn into. SpawnInfo(TechType, Vector3, Quaternion) Initializes a new SpawnInfo. public SpawnInfo(TechType techType, Vector3 spawnPosition, Quaternion rotation) Parameters techType TechType TechType to spawn. spawnPosition Vector3 Position to spawn into. rotation Quaternion Rotation to spawn at. SpawnInfo(TechType, Vector3, Vector3) Initializes a new SpawnInfo. public SpawnInfo(TechType techType, Vector3 spawnPosition, Vector3 rotation) Parameters techType TechType TechType to spawn. spawnPosition Vector3 Position to spawn into. rotation Vector3 Rotation to spawn at. Methods Equals(SpawnInfo) Indicates whether the current SpawnInfo is equal to another. public bool Equals(SpawnInfo other) Parameters other SpawnInfo The other SpawnInfo. Returns bool true if the current SpawnInfo is equal to the other parameter; otherwise false. Remarks It is worth noting that we use Unity's UnityEngine.Vector3.operator ==(UnityEngine.Vector3, UnityEngine.Vector3) and UnityEngine.Quaternion.operator ==(UnityEngine.Quaternion, UnityEngine.Quaternion) operator comparisons for comparing the SpawnPosition and Rotation properties of each instance, to allow for an approximate comparison of these values. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj is a SpawnInfo and represents the same value as this instance; otherwise, false. Remarks It is worth noting that we use Unity's UnityEngine.Vector3.operator ==(UnityEngine.Vector3, UnityEngine.Vector3) and UnityEngine.Quaternion.operator ==(UnityEngine.Quaternion, UnityEngine.Quaternion) operator comparisons for comparing the SpawnPosition and Rotation properties of each instance, to allow for an approximate comparison of these values. See Also Equals(SpawnInfo) GetHashCode() A custom hash code algorithm that takes into account the values of each property of the SpawnInfo instance, and attempts to reduce diagonal collisions. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(SpawnInfo, SpawnInfo) Indicates whether two SpawnInfo instances are equal. public static bool operator ==(SpawnInfo a, SpawnInfo b) Parameters a SpawnInfo The first instance to compare. b SpawnInfo The second instance to compare. Returns bool true if the SpawnInfo instances are equal; otherwise, false. See Also operator !=(SpawnInfo, SpawnInfo) Equals(SpawnInfo) operator !=(SpawnInfo, SpawnInfo) Indicates whether two SpawnInfo instances are not equal. public static bool operator !=(SpawnInfo a, SpawnInfo b) Parameters a SpawnInfo The first instance to compare. b SpawnInfo The second instance to compare. Returns bool true if the SpawnInfo instances are not equal; otherwise, false. See Also operator ==(SpawnInfo, SpawnInfo) Equals(SpawnInfo)"
  },
  "api/Nautilus.Handlers.SpriteHandler.html": {
    "href": "api/Nautilus.Handlers.SpriteHandler.html",
    "title": "Class SpriteHandler",
    "keywords": "Class SpriteHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for adding custom sprites into the game. public static class SpriteHandler Inheritance object SpriteHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterSprite(Group, string, Sprite) Registers a new sprite to the game. public static void RegisterSprite(SpriteManager.Group group, string id, Atlas.Sprite sprite) Parameters group SpriteManager.Group The sprite group this sprite will be added to. id string The sprite internal identifier. sprite Atlas.Sprite The sprite to be added. RegisterSprite(Group, string, string) Registers a new sprite to the game. public static void RegisterSprite(SpriteManager.Group group, string id, string filePathToImage) Parameters group SpriteManager.Group The sprite group. id string The sprite internal identifier. filePathToImage string The file path to image. See Also LoadSpriteFromFile(string, TextureFormat) RegisterSprite(Group, string, string, TextureFormat) Registers a new sprite to the game. public static void RegisterSprite(SpriteManager.Group group, string id, string filePathToImage, TextureFormat format) Parameters group SpriteManager.Group The sprite group. id string The sprite internal identifier. filePathToImage string The file path to image. format TextureFormat The texture format. By default, this uses UnityEngine.TextureFormat.BC7. https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. See Also LoadSpriteFromFile(string, TextureFormat) RegisterSprite(Group, string, Sprite) Registers a new sprite to the game. public static void RegisterSprite(SpriteManager.Group group, string id, Sprite sprite) Parameters group SpriteManager.Group The sprite group this sprite will be added to. id string The sprite internal identifier. sprite Sprite The sprite to be added. RegisterSprite(TechType, Sprite) Registers a new sprite to the game. public static void RegisterSprite(TechType type, Atlas.Sprite sprite) Parameters type TechType The techtype paired to this sprite. sprite Atlas.Sprite The sprite to be added. RegisterSprite(TechType, string) Registers a new sprite to the game. public static void RegisterSprite(TechType type, string filePathToImage) Parameters type TechType The techtype paired to this sprite. filePathToImage string The file path to image to be converted into a sprite. See Also LoadSpriteFromFile(string, TextureFormat) RegisterSprite(TechType, string, TextureFormat) Registers a new sprite to the game. public static void RegisterSprite(TechType type, string filePathToImage, TextureFormat format) Parameters type TechType The techtype paired to this sprite. filePathToImage string The file path to image to be converted into a sprite. format TextureFormat The texture format. By default, this uses UnityEngine.TextureFormat.BC7. https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. See Also LoadSpriteFromFile(string, TextureFormat) RegisterSprite(TechType, Sprite) Registers a new sprite to the game. public static void RegisterSprite(TechType type, Sprite sprite) Parameters type TechType The techtype paired to this sprite. sprite Sprite The sprite to be added."
  },
  "api/Nautilus.Handlers.StoryGoalHandler.html": {
    "href": "api/Nautilus.Handlers.StoryGoalHandler.html",
    "title": "Class StoryGoalHandler",
    "keywords": "Class StoryGoalHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for interacting with all of the major goal systems in Subnautica, which are essential for the's game progression. Allows for important game events to be triggered after a specified action is completed. public static class StoryGoalHandler Inheritance object StoryGoalHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods RegisterBiomeGoal(string, GoalType, string, float, float) Registers a goal that is completed when the player stays in a given biome for a specified period of time. public static BiomeGoal RegisterBiomeGoal(string key, GoalType goalType, string biomeName, float minStayDuration, float delay = 0) Parameters key string The unique identifier, required for all types of StoryGoals. goalType GoalType If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry. biomeName string The biome that must be entered to trigger this goal. minStayDuration float The minimum amount of time the player must stay in the given biome. delay float StoryGoal listeners will not be notified until this many seconds after the goal is completed. Returns BiomeGoal The registered Story.BiomeGoal. RegisterCompoundGoal(string, GoalType, float, params string[]) Registers a goal that is completed when all required \"precondition\" goals have been completed public static CompoundGoal RegisterCompoundGoal(string key, GoalType goalType, float delay, params string[] requiredGoals) Parameters key string The unique identifier, required for all types of StoryGoals. goalType GoalType If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry. delay float StoryGoal listeners will not be notified until this many seconds after the goal is completed. requiredGoals string[] The list of all goals that must be completed before this goal is marked as complete. Returns CompoundGoal The registered Story.CompoundGoal. RegisterCustomEvent(string, Action) Registers a given Action to be performed when its associated goal is completed. public static void RegisterCustomEvent(string key, Action customEventCallback) Parameters key string The key of the goal that triggers the customEventCallback. customEventCallback Action The method that is called when the associated goal is completed. The name of the goal will be passed as a parameter. RegisterItemGoal(string, GoalType, TechType, float) Registers a goal that is completed when an object with the given TechType is picked up, equipped, or crafted through the Mobile Vehicle Bay. Important: This method can be called as many times as needed to add different goals to the same TechType. public static ItemGoal RegisterItemGoal(string key, GoalType goalType, TechType techType, float delay = 0) Parameters key string The unique identifier, required for all types of StoryGoals. goalType GoalType If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry. techType TechType The TechType that causes this goal to trigger, when picked up, equipped or crafted through the Mobile Vehicle Bay. delay float StoryGoal listeners will not be notified until this many seconds after the goal is completed. Returns ItemGoal The registered Story.ItemGoal. RegisterLocationGoal(string, GoalType, Vector3, float, float, float) Registers a goal that is completed when the player stays within range of a certain position for a specified period of time. public static LocationGoal RegisterLocationGoal(string key, GoalType goalType, Vector3 position, float range, float minStayDuration, float delay = 0) Parameters key string The unique identifier, required for all types of StoryGoals. goalType GoalType If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry. position Vector3 The center of the sphere that must be occupied. range float The radius of the sphere that must be occupied. minStayDuration float The minimum amount of time the player must stay for this goal to be completed. delay float StoryGoal listeners will not be notified until this many seconds after the goal is completed. Returns LocationGoal The registered Story.LocationGoal. RegisterOnGoalUnlockData(string, UnlockBlueprintData[], UnlockSignalData[], UnlockItemData[], Id[]) Registers a new Story.OnGoalUnlock object for an existing goal. Handles complex actions that occur with the goal's completion. Important: Since these are stored in a dictionary, only one Story.OnGoalUnlock object can be added for each specific goal key. Therefore, be careful when adding unlock data to base-game features. public static void RegisterOnGoalUnlockData(string goal, UnlockBlueprintData[] blueprints = null, UnlockSignalData[] signals = null, UnlockItemData[] items = null, GameAchievements.Id[] achievements = null) Parameters goal string The goal that is associated with this action. blueprints UnlockBlueprintData[] Array of blueprints that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly. signals UnlockSignalData[] Array of signals that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly. items UnlockItemData[] Array of items that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly. achievements Id[] Array of achievements that are unlocked alongside the given goal. UnregisterCustomEvent(string, Action) Unregisters a custom event. public static void UnregisterCustomEvent(string key, Action customEventCallback) Parameters key string The key of the goal that triggers the customEventCallback. customEventCallback Action The method to unregister."
  },
  "api/Nautilus.Handlers.SurvivalHandler.html": {
    "href": "api/Nautilus.Handlers.SurvivalHandler.html",
    "title": "Class SurvivalHandler",
    "keywords": "Class SurvivalHandler Namespace Nautilus.Handlers Assembly Nautilus.dll Handler class that relates to the Survival component. Allows the defining of oxygen or health gains when consuming specific items. public static class SurvivalHandler Inheritance object SurvivalHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GiveHealthOnConsume(TechType, float, bool) makes the item Heal the player on consume. public static void GiveHealthOnConsume(TechType techType, float healthBack, bool isEdible) Parameters techType TechType the TechType that you want it to heal back healthBack float amount to heal the player isEdible bool set it to true if the item is edible and has the Eatable component attached to it. defaults to false GiveOxygenOnConsume(TechType, float, bool) makes the item gives oxygen on use. public static void GiveOxygenOnConsume(TechType techType, float oxygenGiven, bool isEdible) Parameters techType TechType the TechType that you want to make it give oxygen on use oxygenGiven float the oxygen amount the item gives isEdible bool set it to true if the item is edible and has the Eatable component attached to it. defaults to false"
  },
  "api/Nautilus.Handlers.WorldEntityDatabaseHandler.html": {
    "href": "api/Nautilus.Handlers.WorldEntityDatabaseHandler.html",
    "title": "Class WorldEntityDatabaseHandler",
    "keywords": "Class WorldEntityDatabaseHandler Namespace Nautilus.Handlers Assembly Nautilus.dll A handler class for the UWE.WorldEntityDatabase. This class is essential for the game's Loot Distribution System to work properly. public static class WorldEntityDatabaseHandler Inheritance object WorldEntityDatabaseHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddCustomInfo(string, TechType, Vector3, bool, CellLevel, Type) Adds in a custom UWE.WorldEntityInfo to the UWE.WorldEntityDatabase of the game. It contains information about the entity, like its LargeWorldEntity.CellLevel, its EntitySlotData.EntitySlotType, etc. public static void AddCustomInfo(string classId, TechType techType, Vector3 localScale, bool prefabZUp = false, LargeWorldEntity.CellLevel cellLevel = CellLevel.Global, EntitySlot.Type slotType = Type.Small) Parameters classId string The classId of the entity. techType TechType The TechType of the entity. localScale Vector3 The scale that the entity's local scale is set to when spawned. prefabZUp bool Whether the prefab's Z-axis should be facing up, when spawned. cellLevel LargeWorldEntity.CellLevel The LargeWorldEntity.CellLevel of the entity. slotType EntitySlot.Type The EntitySlot.Type of the entity. Dictates which \"slots\" are suitable for this entity to spawn in. For e.g., most in-crate fragments have a EntitySlot.Type.Small slot type. AddCustomInfo(string, WorldEntityInfo) Adds in a custom UWE.WorldEntityInfo to the UWE.WorldEntityDatabase of the game. It contains information about the entity, like its LargeWorldEntity.CellLevel, its EntitySlot.Type, etc. public static void AddCustomInfo(string classId, WorldEntityInfo data) Parameters classId string The classID of the entity whose data you are adding in. data WorldEntityInfo The UWE.WorldEntityInfo data. Data is stored in the fields of the class, so they must be populated when passed in."
  },
  "api/Nautilus.Json.Attributes.FileNameAttribute.html": {
    "href": "api/Nautilus.Json.Attributes.FileNameAttribute.html",
    "title": "Class FileNameAttribute",
    "keywords": "Class FileNameAttribute Namespace Nautilus.Json.Attributes Assembly Nautilus.dll Attribute used to specify a file name for use with a JsonFile. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class FileNameAttribute : Attribute, _Attribute Inheritance object Attribute FileNameAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors FileNameAttribute(string) Used to specify the file name for a JsonFile. public FileNameAttribute(string fileName) Parameters fileName string Properties FileName The filename. public string FileName { get; } Property Value string"
  },
  "api/Nautilus.Json.Attributes.html": {
    "href": "api/Nautilus.Json.Attributes.html",
    "title": "Namespace Nautilus.Json.Attributes",
    "keywords": "Namespace Nautilus.Json.Attributes Classes FileNameAttribute Attribute used to specify a file name for use with a JsonFile."
  },
  "api/Nautilus.Json.ConfigFile.html": {
    "href": "api/Nautilus.Json.ConfigFile.html",
    "title": "Class ConfigFile",
    "keywords": "Class ConfigFile Namespace Nautilus.Json Assembly Nautilus.dll A simple implementation of IJsonFile for use with config files. public abstract class ConfigFile : IJsonFile Inheritance object ConfigFile Implements IJsonFile Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ConfigFile() Creates a new instance of ConfigFile, parsing the filename and subfolder from a ConfigFileAttribute if declared, or with default values otherwise. public ConfigFile() ConfigFile(string, string) Creates a new instance of ConfigFile. protected ConfigFile(string fileName = \"config\", string subfolder = null) Parameters fileName string The name of the ConfigFile, \"config\" by default. subfolder string Optional subfolder for the ConfigFile. Examples using Nautilus.Options; using UnityEngine; public class MyConfig : ConfigFile { public KeyCode ActivationKey { get; set; } = KeyCode.Escape; public MyConfig() : base(\"options\", \"Config Files\") { } // The config file will be stored at the path \"QMods\\YourModName\\Config Files\\options.json\" } Fields OnFinishedLoading An event that is invoked whenever the ConfigFile has finished loading data from disk. [JsonIgnore] public EventHandler<ConfigFileEventArgs> OnFinishedLoading Field Value EventHandler<ConfigFileEventArgs> OnFinishedSaving An event that is invoked whenever the ConfigFile has finished saving data to disk. [JsonIgnore] public EventHandler<ConfigFileEventArgs> OnFinishedSaving Field Value EventHandler<ConfigFileEventArgs> OnStartedLoading An event that is invoked whenever the ConfigFile is about to load data from disk. [JsonIgnore] public EventHandler<ConfigFileEventArgs> OnStartedLoading Field Value EventHandler<ConfigFileEventArgs> OnStartedSaving An event that is invoked whenever the ConfigFile is about to save data to disk. [JsonIgnore] public EventHandler<ConfigFileEventArgs> OnStartedSaving Field Value EventHandler<ConfigFileEventArgs> Properties AlwaysIncludedJsonConverters The Newtonsoft.Json.JsonConverters that should always be used when reading/writing JSON data. public JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value JsonConverter[] See Also alwaysIncludedJsonConverters JsonFilePath The file path at which the JSON file is accessible for reading and writing. public string JsonFilePath { get; } Property Value string Methods Load(bool) Loads the JSON properties from the file on disk into the ConfigFile. public void Load(bool createFileIfNotExist = true) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(bool, params JsonConverter[]) LoadWithConverters(bool, params JsonConverter[]) Loads the JSON properties from the file on disk into the ConfigFile. public void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also SaveWithConverters(params JsonConverter[]) Load(bool) Save() Saves the current fields and properties of the ConfigFile as JSON properties to the file on disk. public void Save() See Also Load(bool) SaveWithConverters(params JsonConverter[]) SaveWithConverters(params JsonConverter[]) Saves the current fields and properties of the ConfigFile as JSON properties to the file on disk. public void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also LoadWithConverters(bool, params JsonConverter[]) Save()"
  },
  "api/Nautilus.Json.ConfigFileAttribute.html": {
    "href": "api/Nautilus.Json.ConfigFileAttribute.html",
    "title": "Class ConfigFileAttribute",
    "keywords": "Class ConfigFileAttribute Namespace Nautilus.Json Assembly Nautilus.dll Attribute used to specify the filename and subfolder for a ConfigFile. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class ConfigFileAttribute : Attribute, _Attribute Inheritance object Attribute ConfigFileAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; [ConfigFile(\"options\", \"configs\")] public class Config : ConfigFile { public float MyFloatValue; } Remarks When used alongside the ConfigFile(string, string) constructor, this attribute is ignored. Constructors ConfigFileAttribute(string) Used to specify the filename for the ConfigFile. public ConfigFileAttribute(string filename = \"config\") Parameters filename string The filename to use for the ConfigFile. Remarks When used alongside the ConfigFile(string, string) constructor, this attribute is ignored. Properties Filename The filename to use for the ConfigFile. public string Filename { get; } Property Value string Subfolder The subfolder within the mod's folder for the ConfigFile. public string Subfolder { get; set; } Property Value string"
  },
  "api/Nautilus.Json.ConfigFileEventArgs.html": {
    "href": "api/Nautilus.Json.ConfigFileEventArgs.html",
    "title": "Class ConfigFileEventArgs",
    "keywords": "Class ConfigFileEventArgs Namespace Nautilus.Json Assembly Nautilus.dll Contains basic information for a ConfigFile event. public class ConfigFileEventArgs : EventArgs Inheritance object EventArgs ConfigFileEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ConfigFileEventArgs(ConfigFile) Instantiates a new ConfigFileEventArgs. public ConfigFileEventArgs(ConfigFile instance) Parameters instance ConfigFile The ConfigFile instance the event pertains to. Properties Instance The instance of the ConfigFile this event pertains to. public ConfigFile Instance { get; } Property Value ConfigFile"
  },
  "api/Nautilus.Json.Converters.ColorConverter.html": {
    "href": "api/Nautilus.Json.Converters.ColorConverter.html",
    "title": "Class ColorConverter",
    "keywords": "Class ColorConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Color json converter that simplifies the Color to only r,g,b,a serialization. public class ColorConverter : JsonConverter Inheritance object JsonConverter ColorConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.CustomEnumConverter.html": {
    "href": "api/Nautilus.Json.Converters.CustomEnumConverter.html",
    "title": "Class CustomEnumConverter",
    "keywords": "Class CustomEnumConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll An Enum json converter that supports custom enum conversions. public class CustomEnumConverter : JsonConverter Inheritance object JsonConverter CustomEnumConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.FloatConverter.html": {
    "href": "api/Nautilus.Json.Converters.FloatConverter.html",
    "title": "Class FloatConverter",
    "keywords": "Class FloatConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Newtonsoft.Json.JsonConverter for rounding floats or doubles to a given number of decimal places, trimming trailing 0s. public class FloatConverter : JsonConverter Inheritance object JsonConverter FloatConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors FloatConverter() Creates a new FloatConverter. public FloatConverter() FloatConverter(int) Creates a new FloatConverter. public FloatConverter(int decimalPlaces) Parameters decimalPlaces int The number of decimal places to round to, where -1 disables rounding. FloatConverter(int, MidpointRounding) Creates a new FloatConverter. public FloatConverter(int decimalPlaces, MidpointRounding mode) Parameters decimalPlaces int The number of decimal places to round to, where -1 disables rounding. mode MidpointRounding The rounding mode to use when rounding. See Also MidpointRounding FloatConverter(MidpointRounding) Creates a new FloatConverter. public FloatConverter(MidpointRounding mode) Parameters mode MidpointRounding The rounding mode to use when rounding. Methods CanConvert(Type) The method for determining whether the current objectType can be processed byt this Newtonsoft.Json.JsonConverter public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) The method for reading the float or double data from the reader. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) The method for writing the value data to the writer. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.html": {
    "href": "api/Nautilus.Json.Converters.html",
    "title": "Namespace Nautilus.Json.Converters",
    "keywords": "Namespace Nautilus.Json.Converters Classes ColorConverter A Color json converter that simplifies the Color to only r,g,b,a serialization. CustomEnumConverter An Enum json converter that supports custom enum conversions. FloatConverter A Newtonsoft.Json.JsonConverter for rounding floats or doubles to a given number of decimal places, trimming trailing 0s. KeyCodeConverter A Newtonsoft.Json.JsonConverter for handling UnityEngine.KeyCodes. QuaternionConverter A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization. Vector2Converter A Vector2 json converter that simplifies the Vector2 to only x,y serialization. Vector2IntConverter A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization. Vector3Converter A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization. Vector3IntConverter A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization. Vector4Converter A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization."
  },
  "api/Nautilus.Json.Converters.KeyCodeConverter.html": {
    "href": "api/Nautilus.Json.Converters.KeyCodeConverter.html",
    "title": "Class KeyCodeConverter",
    "keywords": "Class KeyCodeConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Newtonsoft.Json.JsonConverter for handling UnityEngine.KeyCodes. public class KeyCodeConverter : JsonConverter Inheritance object JsonConverter KeyCodeConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) The method for determining whether the current objectType can be processed by this Newtonsoft.Json.JsonConverter. public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) The method for reading the UnityEngine.KeyCode data from the reader. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) The method for writing the value data to the writer. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.QuaternionConverter.html": {
    "href": "api/Nautilus.Json.Converters.QuaternionConverter.html",
    "title": "Class QuaternionConverter",
    "keywords": "Class QuaternionConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization. public class QuaternionConverter : JsonConverter Inheritance object JsonConverter QuaternionConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.Vector2Converter.html": {
    "href": "api/Nautilus.Json.Converters.Vector2Converter.html",
    "title": "Class Vector2Converter",
    "keywords": "Class Vector2Converter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Vector2 json converter that simplifies the Vector2 to only x,y serialization. public class Vector2Converter : JsonConverter Inheritance object JsonConverter Vector2Converter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.Vector2IntConverter.html": {
    "href": "api/Nautilus.Json.Converters.Vector2IntConverter.html",
    "title": "Class Vector2IntConverter",
    "keywords": "Class Vector2IntConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization. public class Vector2IntConverter : JsonConverter Inheritance object JsonConverter Vector2IntConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.Vector3Converter.html": {
    "href": "api/Nautilus.Json.Converters.Vector3Converter.html",
    "title": "Class Vector3Converter",
    "keywords": "Class Vector3Converter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization. public class Vector3Converter : JsonConverter Inheritance object JsonConverter Vector3Converter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.Vector3IntConverter.html": {
    "href": "api/Nautilus.Json.Converters.Vector3IntConverter.html",
    "title": "Class Vector3IntConverter",
    "keywords": "Class Vector3IntConverter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization. public class Vector3IntConverter : JsonConverter Inheritance object JsonConverter Vector3IntConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.Converters.Vector4Converter.html": {
    "href": "api/Nautilus.Json.Converters.Vector4Converter.html",
    "title": "Class Vector4Converter",
    "keywords": "Class Vector4Converter Namespace Nautilus.Json.Converters Assembly Nautilus.dll A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization. public class Vector4Converter : JsonConverter Inheritance object JsonConverter Vector4Converter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods CanConvert(Type) A method that determines when this converter should process. public override bool CanConvert(Type objectType) Parameters objectType Type the current object type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Nautilus.Json.ExtensionMethods.html": {
    "href": "api/Nautilus.Json.ExtensionMethods.html",
    "title": "Namespace Nautilus.Json.ExtensionMethods",
    "keywords": "Namespace Nautilus.Json.ExtensionMethods Classes JsonExtensions Extension methods for parsing objects as JSON data."
  },
  "api/Nautilus.Json.ExtensionMethods.JsonExtensions.html": {
    "href": "api/Nautilus.Json.ExtensionMethods.JsonExtensions.html",
    "title": "Class JsonExtensions",
    "keywords": "Class JsonExtensions Namespace Nautilus.Json.ExtensionMethods Assembly Nautilus.dll Extension methods for parsing objects as JSON data. public static class JsonExtensions Inheritance object JsonExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoadJson<T>(T, string, bool, params JsonConverter[]) Loads the JSON properties from a file on disk into the jsonObject. public static void LoadJson<T>(this T jsonObject, string path = null, bool createIfNotExist = true, params JsonConverter[] jsonConverters) where T : class Parameters jsonObject T The object instance to load the properties into. path string The file path to the JSON file to parse. createIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] The Newtonsoft.Json.JsonConverters to be used for deserialization. Type Parameters T The type of the jsonObject. See Also SaveJson<T>(T, string, params JsonConverter[]) SaveJson<T>(T, string, params JsonConverter[]) Saves the fields and properties of the jsonObject as JSON properties to the file on disk. public static void SaveJson<T>(this T jsonObject, string path = null, params JsonConverter[] jsonConverters) where T : class Parameters jsonObject T The object instance to save the fields and properties from. path string The file path at which to save the JSON file. jsonConverters JsonConverter[] The Newtonsoft.Json.JsonConverters to be used for serialization. Type Parameters T The type of the jsonObject."
  },
  "api/Nautilus.Json.html": {
    "href": "api/Nautilus.Json.html",
    "title": "Namespace Nautilus.Json",
    "keywords": "Namespace Nautilus.Json Classes ConfigFile A simple implementation of IJsonFile for use with config files. ConfigFileAttribute Attribute used to specify the filename and subfolder for a ConfigFile. ConfigFileEventArgs Contains basic information for a ConfigFile event. JsonFile A simple abstract implementation of IJsonFile. JsonFileEventArgs Contains basic information for a JsonFile event. SaveDataCache An abstract implementation of IJsonFile intended for use with caching per-save data."
  },
  "api/Nautilus.Json.Interfaces.html": {
    "href": "api/Nautilus.Json.Interfaces.html",
    "title": "Namespace Nautilus.Json.Interfaces",
    "keywords": "Namespace Nautilus.Json.Interfaces Interfaces IJsonFile A simple interface for a JSON file framework."
  },
  "api/Nautilus.Json.Interfaces.IJsonFile.html": {
    "href": "api/Nautilus.Json.Interfaces.IJsonFile.html",
    "title": "Interface IJsonFile",
    "keywords": "Interface IJsonFile Namespace Nautilus.Json.Interfaces Assembly Nautilus.dll A simple interface for a JSON file framework. public interface IJsonFile Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AlwaysIncludedJsonConverters The Newtonsoft.Json.JsonConverters that should always be used when reading/writing JSON data. [JsonIgnore] JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value JsonConverter[] JsonFilePath The file path at which the JSON file is accessible for reading and writing. [JsonIgnore] string JsonFilePath { get; } Property Value string Methods Load(bool) A method for loading the JSON properties from disk. void Load(bool createFileIfNotExist = true) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(bool, params JsonConverter[]) LoadWithConverters(bool, params JsonConverter[]) A method for loading the JSON properties from disk. void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for deserialization. See Also SaveWithConverters(params JsonConverter[]) Load(bool) Save() A method for saving the JSON properties to disk. void Save() See Also Load(bool) SaveWithConverters(params JsonConverter[]) SaveWithConverters(params JsonConverter[]) A method for saving the JSON properties to disk. void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for serialization. See Also LoadWithConverters(bool, params JsonConverter[]) Save()"
  },
  "api/Nautilus.Json.JsonFile.html": {
    "href": "api/Nautilus.Json.JsonFile.html",
    "title": "Class JsonFile",
    "keywords": "Class JsonFile Namespace Nautilus.Json Assembly Nautilus.dll A simple abstract implementation of IJsonFile. public abstract class JsonFile : IJsonFile Inheritance object JsonFile Implements IJsonFile Derived SaveDataCache Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Fields OnFinishedLoading An event that is invoked whenever the JsonFile has finished loading data from disk. [JsonIgnore] public EventHandler<JsonFileEventArgs> OnFinishedLoading Field Value EventHandler<JsonFileEventArgs> OnFinishedSaving An event that is invoked whenever the JsonFile has finished saving data to disk. [JsonIgnore] public EventHandler<JsonFileEventArgs> OnFinishedSaving Field Value EventHandler<JsonFileEventArgs> OnStartedLoading An event that is invoked whenever the JsonFile is about to load data from disk. [JsonIgnore] public EventHandler<JsonFileEventArgs> OnStartedLoading Field Value EventHandler<JsonFileEventArgs> OnStartedSaving An event that is invoked whenever the JsonFile is about to save data to disk. [JsonIgnore] public EventHandler<JsonFileEventArgs> OnStartedSaving Field Value EventHandler<JsonFileEventArgs> Properties AlwaysIncludedJsonConverters The Newtonsoft.Json.JsonConverters that should always be used when reading/writing JSON data. public virtual JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value JsonConverter[] See Also alwaysIncludedJsonConverters JsonFilePath The file path at which the JSON file is accessible for reading and writing. [JsonIgnore] public abstract string JsonFilePath { get; } Property Value string Methods Load(bool) Loads the JSON properties from the file on disk into the JsonFile. public virtual void Load(bool createFileIfNotExist = true) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(bool, params JsonConverter[]) LoadWithConverters(bool, params JsonConverter[]) Loads the JSON properties from the file on disk into the JsonFile. public virtual void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also SaveWithConverters(params JsonConverter[]) Load(bool) Save() Saves the current fields and properties of the JsonFile as JSON properties to the file on disk. public virtual void Save() See Also Load(bool) SaveWithConverters(params JsonConverter[]) SaveWithConverters(params JsonConverter[]) Saves the current fields and properties of the JsonFile as JSON properties to the file on disk. public virtual void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also LoadWithConverters(bool, params JsonConverter[]) Save()"
  },
  "api/Nautilus.Json.JsonFileEventArgs.html": {
    "href": "api/Nautilus.Json.JsonFileEventArgs.html",
    "title": "Class JsonFileEventArgs",
    "keywords": "Class JsonFileEventArgs Namespace Nautilus.Json Assembly Nautilus.dll Contains basic information for a JsonFile event. public class JsonFileEventArgs : EventArgs Inheritance object EventArgs JsonFileEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors JsonFileEventArgs(JsonFile) Instantiates a new JsonFileEventArgs. public JsonFileEventArgs(JsonFile instance) Parameters instance JsonFile The JsonFile instance the event pertains to. Properties Instance The instance of the JsonFile this event pertains to. public JsonFile Instance { get; } Property Value JsonFile"
  },
  "api/Nautilus.Json.SaveDataCache.html": {
    "href": "api/Nautilus.Json.SaveDataCache.html",
    "title": "Class SaveDataCache",
    "keywords": "Class SaveDataCache Namespace Nautilus.Json Assembly Nautilus.dll An abstract implementation of IJsonFile intended for use with caching per-save data. public abstract class SaveDataCache : JsonFile, IJsonFile Inheritance object JsonFile SaveDataCache Implements IJsonFile Inherited Members JsonFile.AlwaysIncludedJsonConverters JsonFile.OnStartedLoading JsonFile.OnFinishedLoading JsonFile.OnStartedSaving JsonFile.OnFinishedSaving object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors SaveDataCache() Creates a new instance of SaveDataCache, parsing the file name from FileNameAttribute if declared, or with default values otherwise. public SaveDataCache() Properties JsonFilePath The file path at which the JSON file is accessible for reading and writing. public override string JsonFilePath { get; } Property Value string Methods Load(bool) Loads the JSON properties from the file on disk into the SaveDataCache. public override void Load(bool createFileIfNotExist = true) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. Exceptions InvalidOperationException Thrown when the player is not in-game. See Also Save() LoadWithConverters(bool, params JsonConverter[]) LoadWithConverters(bool, params JsonConverter[]) Loads the JSON properties from the file on disk into the SaveDataCache. public override void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. Exceptions InvalidOperationException Thrown when the player is not in-game. See Also SaveWithConverters(params JsonConverter[]) Load(bool) Save() Saves the current fields and properties of the SaveDataCache as JSON properties to the file on disk. public override void Save() Exceptions InvalidOperationException Thrown when the player is not in-game. See Also Load(bool) SaveWithConverters(params JsonConverter[]) SaveWithConverters(params JsonConverter[]) Saves the current fields and properties of the SaveDataCache as JSON properties to the file on disk. public override void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters jsonConverters JsonConverter[] Optional Newtonsoft.Json.JsonConverters to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. Exceptions InvalidOperationException Thrown when the player is not in-game. See Also LoadWithConverters(bool, params JsonConverter[]) Save()"
  },
  "api/Nautilus.Options.Attributes.ButtonAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ButtonAttribute.html",
    "title": "Class ButtonAttribute",
    "keywords": "Class ButtonAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the decorated method should be represented in the mod's options menu as a ModButtonOption. When the button is clicked, the given method will run. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class ButtonAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute ButtonAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; using QModManager.Utility; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Button(\"My Cool Button\")] public static void MyCoolButton(object sender, ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, e.Id.ToString()); } } Constructors ButtonAttribute() Signifies the decorated method should be represented in the mod's options menu as a ModButtonOption. public ButtonAttribute() See Also MenuAttribute ButtonClickedEventArgs InternalLogger ConfigFile ButtonAttribute(string) Signifies the decorated method should be represented in the mod's options menu as a ModButtonOption and sets its label. public ButtonAttribute(string label = null) Parameters label string The label for the button. If none is set, the name of the method will be used. See Also MenuAttribute ButtonClickedEventArgs InternalLogger ConfigFile See Also MenuAttribute ButtonClickedEventArgs InternalLogger ConfigFile"
  },
  "api/Nautilus.Options.Attributes.ChoiceAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ChoiceAttribute.html",
    "title": "Class ChoiceAttribute",
    "keywords": "Class ChoiceAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T>. Works for either int index-based, string-based, or Enum-based members. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class ChoiceAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute ChoiceAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; public enum CustomChoice { One, Two, Three } [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Choice(\"My index-based choice\", \"One\", \"Two\", \"Three\")] public int MyIndexBasedChoice; [Choice] public CustomChoice MyEnumBasedChoice; } Remarks Enum choices can also be parsed from their values by merely omitting the ChoiceAttribute. Constructors ChoiceAttribute() Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T>. Works for either int index-based, string-based, or Enum-based members. public ChoiceAttribute() See Also MenuAttribute ModChoiceOption<T> ConfigFile ChoiceAttribute(string, params string[]) Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T>. Works for either int index-based, string-based, or Enum-based members. public ChoiceAttribute(string label = null, params string[] options) Parameters label string The label for the choice. If none is set, the name of the member will be used. options string[] The list of options for the user to choose from. Remarks Enum choices can also be parsed from their values by merely omitting the options. See Also MenuAttribute ModChoiceOption<T> ConfigFile ChoiceAttribute(string[]) Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T>. Works for either int index-based, string-based, or Enum-based members. public ChoiceAttribute(string[] options) Parameters options string[] The list of options for the user to choose from. Remarks Enum choices can also be parsed from their values by merely omitting the options. See Also MenuAttribute ModChoiceOption<T> ConfigFile Properties Options The list of options that will be displayed. public string[] Options { get; set; } Property Value string[] See Also MenuAttribute ModChoiceOption<T> ConfigFile See Also MenuAttribute ModChoiceOption<T> ConfigFile"
  },
  "api/Nautilus.Options.Attributes.ColorPickerAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ColorPickerAttribute.html",
    "title": "Class ColorPickerAttribute",
    "keywords": "Class ColorPickerAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the decorated UnityEngine.Color should be represented in the mod's option menu as a ModColorOption. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class ColorPickerAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute ColorPickerAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [ColorPicker(\"My Toggle\")] public Color MyToggle; } Constructors ColorPickerAttribute() Signifies the decorated UnityEngine.Color should be represented in the mod's option menu as a ModColorOption. public ColorPickerAttribute() See Also MenuAttribute ConfigFile ColorPickerAttribute(string) Signifies the decorated UnityEngine.Color should be represented in the mod's option menu as a ModColorOption. public ColorPickerAttribute(string label = null) Parameters label string The label for the toggle. See Also MenuAttribute ConfigFile Properties Advanced Which type of color picker to use. public bool Advanced { get; set; } Property Value bool See Also MenuAttribute ConfigFile See Also MenuAttribute ConfigFile"
  },
  "api/Nautilus.Options.Attributes.html": {
    "href": "api/Nautilus.Options.Attributes.html",
    "title": "Namespace Nautilus.Options.Attributes",
    "keywords": "Namespace Nautilus.Options.Attributes Classes ButtonAttribute Attribute used to signify the decorated method should be represented in the mod's options menu as a ModButtonOption. When the button is clicked, the given method will run. ChoiceAttribute Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T>. Works for either int index-based, string-based, or Enum-based members. ColorPickerAttribute Attribute used to signify the decorated UnityEngine.Color should be represented in the mod's option menu as a ModColorOption. IgnoreMemberAttribute Attribute used to signify the given property, field or method should be ignored when generating your mod options menu. KeybindAttribute Attribute used to signify the decorated UnityEngine.KeyCode should be represented in the mod's option menu as a ModKeybindOption. MenuAttribute Attribute used to signify a ModOptions menu should be automatically generated from a ConfigFile, as well as specifying options for handling the ConfigFile and ModOptions menu. ModOptionAttribute Abstract base attribute used to signify the decorated public member should generate a OptionItem in a mod's options menu. ModOptionEventAttribute Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member. OnChangeAttribute Attribute used to signify a method to call whenever the decorated member's value changes. OnGameObjectCreatedAttribute Attribute used to signify a method to call whenever the UnityEngine.GameObject for the OptionItem corresponding to the decorated member is created. SliderAttribute Attribute used to signify the specified float, double or int should be represented in the mod's option menu as a ModSliderOption. ToggleAttribute Attribute used to signify the decorated bool should be represented in the mod's option menu as a ModToggleOption. Enums MenuAttribute.LoadEvents Specifies after which events the config file should be loaded from disk automatically. MenuAttribute.Members Specifies which members of the ConfigFile will be parsed and added to the menu. MenuAttribute.SaveEvents Specifies after which events the config file should be saved to disk automatically."
  },
  "api/Nautilus.Options.Attributes.IgnoreMemberAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute",
    "keywords": "Class IgnoreMemberAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the given property, field or method should be ignored when generating your mod options menu. [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class IgnoreMemberAttribute : Attribute, _Attribute Inheritance object Attribute IgnoreMemberAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Button(\"My Cool Button)] public static void MyCoolButton(object sender, ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, e.Id.ToString()); } [IgnoreMember] public int FieldNotDisplayedInMenu; } Remarks By default, all members are ignored unless either they are decorated with a ModOptionAttribute derivative, or the MemberProcessing property is set to Implicit. See Also MenuAttribute ButtonAttribute ConfigFile MemberProcessing MenuAttribute.Members"
  },
  "api/Nautilus.Options.Attributes.KeybindAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.KeybindAttribute.html",
    "title": "Class KeybindAttribute",
    "keywords": "Class KeybindAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the decorated UnityEngine.KeyCode should be represented in the mod's option menu as a ModKeybindOption. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class KeybindAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute KeybindAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; using UnityEngine; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Keybind(\"My Keybind\")] public KeyCode MyKeybind; } Constructors KeybindAttribute() Signifies the decorated UnityEngine.KeyCode should be represented in the mod's option menu as a ModKeybindOption. public KeybindAttribute() See Also MenuAttribute ConfigFile KeybindAttribute(string) Signifies the decorated UnityEngine.KeyCode should be represented in the mod's option menu as a ModKeybindOption. public KeybindAttribute(string label = null) Parameters label string The label for the keybind. If none is set, the name of the member will be used. See Also MenuAttribute ConfigFile See Also MenuAttribute ConfigFile"
  },
  "api/Nautilus.Options.Attributes.MenuAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.MenuAttribute.html",
    "title": "Class MenuAttribute",
    "keywords": "Class MenuAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify a ModOptions menu should be automatically generated from a ConfigFile, as well as specifying options for handling the ConfigFile and ModOptions menu. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class MenuAttribute : Attribute, _Attribute Inheritance object Attribute MenuAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; using QModManager.Utility; using UnityEngine; [Menu(\"Nautilus Example Mod\")] public class Config : ConfigFile { [Choice(\"My index-based choice\", \"Choice 1\", \"Choice 2\", \"Choice 3\", Tooltip = \"A simple tooltip\")] [OnChange(nameof(MyGenericValueChangedEvent))] public int ChoiceIndex; [Choice(\"My enum-based choice\"), OnChange(nameof(MyGenericValueChangedEvent))] public CustomChoice ChoiceEnum; [Keybind(\"My keybind\"), OnChange(nameof(MyGenericValueChangedEvent))] public KeyCode KeybindKey; [Slider(\"My slider\", 0, 50, DefaultValue = 25, Format = \"{0:F2}\"), OnChange(nameof(MyGenericValueChangedEvent))] public float SliderValue; [Toggle(\"My checkbox\"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))] public bool ToggleValue; [Button(\"My button\")] public void MyButtonClickEvent(ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}\"); } public void MyCheckboxToggleEvent(ToggleChangedEventArgs e) { Logger.Log(Logger.Level.Info, \"Checkbox value was changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Value}\"); } private void MyGenericValueChangedEvent(ModOptionEventArgs e) { Logger.Log(Logger.Level.Info, \"Generic value changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GetType()}\"); switch (e) { case KeybindChangedEventArgs keybindChangedEventArgs: Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName); break; case ChoiceChangedEventArgs choiceChangedEventArgs: Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value); break; case SliderChangedEventArgs sliderChangedEventArgs: Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString()); break; case ToggleChangedEventArgs toggleChangedEventArgs: Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString()); break; } } } Constructors MenuAttribute(string) Signifies a ModOptions menu should be automatically generated from a ConfigFile. public MenuAttribute(string name) Parameters name string The display name for the generated options menu. See Also ChoiceAttribute OnChangeAttribute KeybindAttribute SliderAttribute ToggleAttribute ColorPickerAttribute ButtonAttribute ModOptions ConfigFile InternalLogger Properties LoadOn The events after which the config file will be loaded from disk automatically. Defaults to MenuRegistered. public MenuAttribute.LoadEvents LoadOn { get; set; } Property Value MenuAttribute.LoadEvents See Also MenuAttribute.LoadEvents SaveOn MemberProcessing How members of the ConfigFile will be processed. Defaults to Explicit, so that only public decorated members will be processed. public MenuAttribute.Members MemberProcessing { get; set; } Property Value MenuAttribute.Members See Also MenuAttribute.Members Name The display name for the generated options menu. public string Name { get; } Property Value string See Also ChoiceAttribute OnChangeAttribute KeybindAttribute SliderAttribute ToggleAttribute ColorPickerAttribute ButtonAttribute ModOptions ConfigFile InternalLogger SaveOn The events after which the config file will be saved to disk automatically. Defaults to ChangeValue. public MenuAttribute.SaveEvents SaveOn { get; set; } Property Value MenuAttribute.SaveEvents See Also MenuAttribute.SaveEvents LoadOn See Also ChoiceAttribute OnChangeAttribute KeybindAttribute SliderAttribute ToggleAttribute ColorPickerAttribute ButtonAttribute ModOptions ConfigFile InternalLogger"
  },
  "api/Nautilus.Options.Attributes.MenuAttribute.LoadEvents.html": {
    "href": "api/Nautilus.Options.Attributes.MenuAttribute.LoadEvents.html",
    "title": "Enum MenuAttribute.LoadEvents",
    "keywords": "Enum MenuAttribute.LoadEvents Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Specifies after which events the config file should be loaded from disk automatically. [Flags] public enum MenuAttribute.LoadEvents : byte Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields MenuOpened = 2 Load when the menu is opened by the player. MenuRegistered = 1 Load when the menu is registered to Nautilus via RegisterModOptions<T>(). None = 0 Never automatically load. Remarks This enumeration has a FlagsAttribute that allows a bitwise combination of its member values."
  },
  "api/Nautilus.Options.Attributes.MenuAttribute.Members.html": {
    "href": "api/Nautilus.Options.Attributes.MenuAttribute.Members.html",
    "title": "Enum MenuAttribute.Members",
    "keywords": "Enum MenuAttribute.Members Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Specifies which members of the ConfigFile will be parsed and added to the menu. public enum MenuAttribute.Members Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields Explicit = 0 Only public members decorated with a ModOptionAttribute derivative such as SliderAttribute, ChoiceAttribute etc. will be processed. Implicit = 1 All public members will be processed, and where they are not decorated, a default attribute will be generated for them."
  },
  "api/Nautilus.Options.Attributes.MenuAttribute.SaveEvents.html": {
    "href": "api/Nautilus.Options.Attributes.MenuAttribute.SaveEvents.html",
    "title": "Enum MenuAttribute.SaveEvents",
    "keywords": "Enum MenuAttribute.SaveEvents Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Specifies after which events the config file should be saved to disk automatically. [Flags] public enum MenuAttribute.SaveEvents : byte Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields ChangeValue = 1 Save whenever any value is changed. None = 0 Never automatically save. QuitGame = 4 Save when the player quits the game. SaveGame = 2 Save when the player saves the game. Remarks This enumeration has a FlagsAttribute that allows a bitwise combination of its member values."
  },
  "api/Nautilus.Options.Attributes.ModOptionAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ModOptionAttribute.html",
    "title": "Class ModOptionAttribute",
    "keywords": "Class ModOptionAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Abstract base attribute used to signify the decorated public member should generate a OptionItem in a mod's options menu. [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public abstract class ModOptionAttribute : Attribute, _Attribute Inheritance object Attribute ModOptionAttribute Implements _Attribute Derived ButtonAttribute ChoiceAttribute ColorPickerAttribute KeybindAttribute SliderAttribute ToggleAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ModOptionAttribute(string) Signifies the decorated member should be represented in the mod's options menu as a OptionItem with an optional label. protected ModOptionAttribute(string label = null) Parameters label string The label to display. If none is set, the name of the member will be used. If LabelLanguageId is set, this will be ignored. Properties Id The Id to be used for the field in the mod's option menu. If none is specified, one will be automatically generated when your ConfigFile is registered to the OptionsPanelHandler. This means it will change every time the game is launched, but is guaranteed to be unique. If you would like to specify an Id to use for internal comparisons, you can do so here. public string Id { get; set; } Property Value string Label The label to use when displaying the field in the mod's options menu. If LabelLanguageId is set, this will be ignored. public string Label { get; set; } Property Value string LabelLanguageId An optional id to be parsed with Get(string) for the label, allowing for custom language-based strings via the LanguageHandler API. If this is set, it will take precedence. public string LabelLanguageId { get; set; } Property Value string See Also SetLanguageLine(string, string, string) Get(string) Order The order in which to display fields in the mod's option menu, in ascending order. If none is specified, the order will be automatically set. public int Order { get; set; } Property Value int Tooltip An optional tooltip to display for the field. If TooltipLanguageId is set, this will be ignored. public string Tooltip { get; set; } Property Value string TooltipLanguageId An optional id to be parsed with Get(string) for the tooltip, allowing for custom lanaguage-based strings via the LanguageHandler API. If this is set, it will take precedence. public string TooltipLanguageId { get; set; } Property Value string"
  },
  "api/Nautilus.Options.Attributes.ModOptionEventAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ModOptionEventAttribute.html",
    "title": "Class ModOptionEventAttribute",
    "keywords": "Class ModOptionEventAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member. [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = true)] public abstract class ModOptionEventAttribute : Attribute, _Attribute Inheritance object Attribute ModOptionEventAttribute Implements _Attribute Derived OnChangeAttribute OnGameObjectCreatedAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Remarks The method must be a member of the same class. Constructors ModOptionEventAttribute(string) Signifies a method to call whenever the derivative event is invoked for the decorated member. public ModOptionEventAttribute(string methodName) Parameters methodName string The name of the method within the same class to invoke. Remarks The method must be a member of the same class. Properties MethodName The name of the method to invoke. public string MethodName { get; } Property Value string"
  },
  "api/Nautilus.Options.Attributes.OnChangeAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.OnChangeAttribute.html",
    "title": "Class OnChangeAttribute",
    "keywords": "Class OnChangeAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify a method to call whenever the decorated member's value changes. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = true)] public sealed class OnChangeAttribute : ModOptionEventAttribute, _Attribute Inheritance object Attribute ModOptionEventAttribute OnChangeAttribute Implements _Attribute Inherited Members ModOptionEventAttribute.MethodName Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; using QModManager.Utility; using UnityEngine; [Menu(\"Nautilus Example Mod\")] public class Config : ConfigFile { [Toggle(\"My checkbox\"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))] public bool ToggleValue; public void MyCheckboxToggleEvent(ToggleChangedEventArgs e) { Logger.Log(Logger.Level.Info, \"Checkbox value was changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Value}\"); } private void MyGenericValueChangedEvent(ModOptionEventArgs e) { Logger.Log(Logger.Level.Info, \"Generic value changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GetType()}\"); switch (e) { case KeybindChangedEventArgs keybindChangedEventArgs: Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName); break; case ChoiceChangedEventArgs choiceChangedEventArgs: Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value); break; case SliderChangedEventArgs sliderChangedEventArgs: Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString()); break; case ToggleChangedEventArgs toggleChangedEventArgs: Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString()); break; } } Remarks The method must be a member of the same class. Can be specified mutliple times to call multiple methods. The specified method can take the following parameters in any order: - object sender: The sender of the event - EventArgs eventArgs: The generalized event arguments of the event - ChoiceChangedEventArgs<T> choiceChangedEventArgs: Only when the member corresponds to a ModChoiceOption<T> - KeybindChangedEventArgs keybindChangedEventArgs: Only when the member correspends to a ModKeybindOption - SliderChangedEventArgs sliderChangedEventArgs: Only when the member corresponds to a ModSliderOption - ToggleChangedEventArgs toggleChangedEventArgs: Only when the member corresponds to a ModToggleOption Constructors OnChangeAttribute(string) Signifies a method to call whenever the decorated member's value changes. public OnChangeAttribute(string methodName) Parameters methodName string The name of the method within the same class to invoke. Remarks The method must be a member of the same class. See Also MenuAttribute ToggleAttribute EventArgs ChoiceChangedEventArgs<T> KeybindChangedEventArgs SliderChangedEventArgs ToggleChangedEventArgs ConfigFile OnGameObjectCreatedAttribute InternalLogger See Also MenuAttribute ToggleAttribute EventArgs ChoiceChangedEventArgs<T> KeybindChangedEventArgs SliderChangedEventArgs ToggleChangedEventArgs ConfigFile OnGameObjectCreatedAttribute InternalLogger"
  },
  "api/Nautilus.Options.Attributes.OnGameObjectCreatedAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.OnGameObjectCreatedAttribute.html",
    "title": "Class OnGameObjectCreatedAttribute",
    "keywords": "Class OnGameObjectCreatedAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify a method to call whenever the UnityEngine.GameObject for the OptionItem corresponding to the decorated member is created. [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = true)] public sealed class OnGameObjectCreatedAttribute : ModOptionEventAttribute, _Attribute Inheritance object Attribute ModOptionEventAttribute OnGameObjectCreatedAttribute Implements _Attribute Inherited Members ModOptionEventAttribute.MethodName Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; using QModManager.Utility; using UnityEngine; [Menu(\"Nautilus Example Mod\")] public class Config : ConfigFile { [Toggle(\"My checkbox\"), OnGameObjectCreated(nameof(MyGameObjectCreatedEvent))] public bool ToggleValue; private void MyGameObjectCreatedEvent(GameObjectCreatedEventArgs e) { Logger.Log(Logger.Level.Info, \"GameObject was created\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GameObject}\"); } } Remarks The method must be a member of the same class. Can be specified multiple times to call multiple methods. The specified method can optionally take the following parameters in any order: - object sender: The sender of the event - EventArgs eventArgs: The generalized event arguments of the event - GameObjectCreatedEventArgs gameObjectCreatedEventArgs: The GameObjectCreatedEventArgs for the event Constructors OnGameObjectCreatedAttribute(string) Signifies a method to call whenever the UnityEngine.GameObject for the OptionItem corresponding to the decorated member is created. public OnGameObjectCreatedAttribute(string methodName) Parameters methodName string The name of the method within the same class to invoke. Remarks The method must be a member of the same class. See Also MenuAttribute ToggleAttribute EventArgs GameObjectCreatedEventArgs OnChangeAttribute InternalLogger See Also MenuAttribute ToggleAttribute EventArgs GameObjectCreatedEventArgs OnChangeAttribute InternalLogger"
  },
  "api/Nautilus.Options.Attributes.SliderAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.SliderAttribute.html",
    "title": "Class SliderAttribute",
    "keywords": "Class SliderAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the specified float, double or int should be represented in the mod's option menu as a ModSliderOption. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class SliderAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute SliderAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Slider(\"My Slider\", 0, 50, DefaultValue = 25, Format = \"{0:F2}\")] public float MySlider; } Constructors SliderAttribute() Signifies the specified float, double or int should be represented in the mod's options menu as a ModSliderOption. public SliderAttribute() See Also MenuAttribute ConfigFile SliderAttribute(float, float) Signifies the specified float, double or int should be represented in the mod's options menu as a ModSliderOption. public SliderAttribute(float min, float max) Parameters min float The minimum value of the slider. max float The maximum value of the slider. See Also MenuAttribute ConfigFile SliderAttribute(string) Signifies the specified float, double or int should be represented in the mod's options menu as a ModSliderOption. public SliderAttribute(string label = null) Parameters label string The label for the slider. If none is set, the name of the method will be used. See Also MenuAttribute ConfigFile SliderAttribute(string, float, float) Signifies the specified float, double or int should be represented in the mod's options menu as a ModSliderOption. public SliderAttribute(string label, float min, float max) Parameters label string The label for the slider. If none is set, the name of the method will be used. min float The minimum value of the slider. max float The maximum value of the slider. See Also MenuAttribute ConfigFile Properties DefaultValue The default value of the slider. public float DefaultValue { get; set; } Property Value float See Also MenuAttribute ConfigFile Format The format to use when displaying the value, e.g. \"{0:F2}\" or \"{0:F0} %\" public string Format { get; set; } Property Value string See Also MenuAttribute ConfigFile Max The maximum value of the slider. public float Max { get; set; } Property Value float See Also MenuAttribute ConfigFile Min The minimum value of the slider. public float Min { get; set; } Property Value float See Also MenuAttribute ConfigFile Step The step to apply to the slider (ie. round to nearest) public float Step { get; set; } Property Value float See Also MenuAttribute ConfigFile See Also MenuAttribute ConfigFile"
  },
  "api/Nautilus.Options.Attributes.ToggleAttribute.html": {
    "href": "api/Nautilus.Options.Attributes.ToggleAttribute.html",
    "title": "Class ToggleAttribute",
    "keywords": "Class ToggleAttribute Namespace Nautilus.Options.Attributes Assembly Nautilus.dll Attribute used to signify the decorated bool should be represented in the mod's option menu as a ModToggleOption. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false)] public sealed class ToggleAttribute : ModOptionAttribute, _Attribute Inheritance object Attribute ModOptionAttribute ToggleAttribute Implements _Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples using Nautilus.Json; using Nautilus.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Toggle(\"My Toggle\")] public bool MyToggle; } Constructors ToggleAttribute() Signifies the decorated bool should be represented in the mod's option menu as a ModToggleOption. public ToggleAttribute() See Also MenuAttribute ConfigFile ToggleAttribute(string) Signifies the decorated bool should be represented in the mod's option menu as a ModToggleOption. public ToggleAttribute(string label = null) Parameters label string The label for the toggle. See Also MenuAttribute ConfigFile See Also MenuAttribute ConfigFile"
  },
  "api/Nautilus.Options.ButtonClickedEventArgs.html": {
    "href": "api/Nautilus.Options.ButtonClickedEventArgs.html",
    "title": "Class ButtonClickedEventArgs",
    "keywords": "Class ButtonClickedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a button click event. public class ButtonClickedEventArgs : OptionEventArgs Inheritance object EventArgs OptionEventArgs ButtonClickedEventArgs Inherited Members OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ButtonClickedEventArgs(string) Constructs a new ButtonClickedEventArgs. public ButtonClickedEventArgs(string id) Parameters id string The ID of the ModButtonOption that was clicked."
  },
  "api/Nautilus.Options.ChoiceChangedEventArgs-1.html": {
    "href": "api/Nautilus.Options.ChoiceChangedEventArgs-1.html",
    "title": "Class ChoiceChangedEventArgs<T>",
    "keywords": "Class ChoiceChangedEventArgs<T> Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a choice changed event. public class ChoiceChangedEventArgs<T> : ConfigOptionEventArgs<T> Type Parameters T Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<T> ChoiceChangedEventArgs<T> Inherited Members ConfigOptionEventArgs<T>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ChoiceChangedEventArgs(string, int, T) Constructs a new ChoiceChangedEventArgs<T>. public ChoiceChangedEventArgs(string id, int index, T value) Parameters id string The ID of the ModChoiceOption<T> that was changed. index int The new index for the ModChoiceOption<T>. value T The value of the ModChoiceOption<T> as a string. Properties Index The new index for the ModChoiceOption<T>. public int Index { get; } Property Value int"
  },
  "api/Nautilus.Options.ColorChangedEventArgs.html": {
    "href": "api/Nautilus.Options.ColorChangedEventArgs.html",
    "title": "Class ColorChangedEventArgs",
    "keywords": "Class ColorChangedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a color changed event. public class ColorChangedEventArgs : ConfigOptionEventArgs<Color> Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<Color> ColorChangedEventArgs Inherited Members ConfigOptionEventArgs<Color>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ColorChangedEventArgs(string, Color) Constructs a new ToggleChangedEventArgs. public ColorChangedEventArgs(string id, Color value) Parameters id string The ID of the ModColorOption that was changed. value Color The new value for the ModColorOption."
  },
  "api/Nautilus.Options.ConfigEntryExtensions.html": {
    "href": "api/Nautilus.Options.ConfigEntryExtensions.html",
    "title": "Class ConfigEntryExtensions",
    "keywords": "Class ConfigEntryExtensions Namespace Nautilus.Options Assembly Nautilus.dll public static class ConfigEntryExtensions Inheritance object ConfigEntryExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToModChoiceOption<T>(ConfigEntry<T>, IEnumerable<T>) Converts an Enum ConfigEntry into a ModChoiceOption that will update the value when the choice changes. public static ModChoiceOption<T> ToModChoiceOption<T>(this ConfigEntry<T> configEntry, IEnumerable<T> options = null) where T : Enum Parameters configEntry ConfigEntry<T> A options IEnumerable<T> Array of valid options if not using the whole Enum Returns ModChoiceOption<T> ModKeybindOption Type Parameters T ToModChoiceOption<T>(ConfigEntry<T>, T[]) Converts a ConfigEntry into a ModChoiceOption that will update the value when the choice changes. public static ModChoiceOption<T> ToModChoiceOption<T>(this ConfigEntry<T> configEntry, T[] options = null) where T : IEquatable<T> Parameters configEntry ConfigEntry<T> A options T[] Returns ModChoiceOption<T> ModKeybindOption Type Parameters T ToModKeybindOption(ConfigEntry<KeyCode>) Converts a Bepinex ConfigEntry/ into a ModKeyBindOption that will update the value when the keybind changes. public static ModKeybindOption ToModKeybindOption(this ConfigEntry<KeyCode> configEntry) Parameters configEntry ConfigEntry<KeyCode> A Returns ModKeybindOption ModKeybindOption ToModSliderOption(ConfigEntry<int>, int?, int?, int) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. public static ModSliderOption ToModSliderOption(this ConfigEntry<int> configEntry, int? minValue = null, int? maxValue = null, int step = 1) Parameters configEntry ConfigEntry<int> A minValue int? Sets the lowest allowed value of the slider. default: 0 maxValue int? Sets the highest allowed value of the slider. default: 100 step int The snapping value of the slider. Minimum value: 1, Default value: 1 Returns ModSliderOption ModSliderOption ToModSliderOption(ConfigEntry<float>, float?, float?, float, string) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. public static ModSliderOption ToModSliderOption(this ConfigEntry<float> configEntry, float? minValue = null, float? maxValue = null, float step = 0.01, string floatFormat = \"{0:F2}\") Parameters configEntry ConfigEntry<float> A minValue float? Sets the lowest allowed value of the slider. default: 0f maxValue float? Sets the highest allowed value of the slider. default: 1f step float The snapping value of the slider. Minimum value: 0.0001f, Default 0.01f floatFormat string The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns ModSliderOption ModSliderOption ToModSliderOptions(ConfigEntry<Color>, bool) Converts a Bepinex ConfigEntry/ into 4 ModSliderOption that will update the value when the slider changes. public static ModColorOption ToModSliderOptions(this ConfigEntry<Color> configEntry, bool basic = false) Parameters configEntry ConfigEntry<Color> A bepinex config entry basic bool Whether to use the basic or advanced color picker Returns ModColorOption ModSliderOption ToModSliderOptions(ConfigEntry<Vector2>, float, float, float, string) Converts a Bepinex ConfigEntry/ into 2 ModSliderOption that will update the value when the slider changes. public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector2> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters configEntry ConfigEntry<Vector2> A minValue float Sets the lowest allowed value of the slider. default: 0f maxValue float Sets the highest allowed value of the slider. default: 1f step float The snapping value of the slider. Minimum value: 0.01f floatFormat string The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns List<ModSliderOption> ModSliderOption ToModSliderOptions(ConfigEntry<Vector3>, float, float, float, string) Converts a Bepinex ConfigEntry/ into 3 ModSliderOption that will update the value when the slider changes. public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector3> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters configEntry ConfigEntry<Vector3> A minValue float Sets the lowest allowed value of the slider. default: 0f maxValue float Sets the highest allowed value of the slider. default: 1f step float The snapping value of the slider. Minimum value: 0.01f floatFormat string The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns List<ModSliderOption> ModSliderOption ToModSliderOptions(ConfigEntry<Vector4>, float, float, float, string) Converts a Bepinex ConfigEntry/ into 4 ModSliderOption that will update the value when the slider changes. public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector4> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters configEntry ConfigEntry<Vector4> A minValue float Sets the lowest allowed value of the slider. default: 0f maxValue float Sets the highest allowed value of the slider. default: 1f step float The snapping value of the slider. Minimum value: 0.01f floatFormat string The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns List<ModSliderOption> ModSliderOption ToModToggleOption(ConfigEntry<bool>) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. public static ModToggleOption ToModToggleOption(this ConfigEntry<bool> configEntry) Parameters configEntry ConfigEntry<bool> A Returns ModToggleOption ModToggleOption"
  },
  "api/Nautilus.Options.ConfigOptionEventArgs-1.html": {
    "href": "api/Nautilus.Options.ConfigOptionEventArgs-1.html",
    "title": "Class ConfigOptionEventArgs<T>",
    "keywords": "Class ConfigOptionEventArgs<T> Namespace Nautilus.Options Assembly Nautilus.dll Interface for event arguments for a OptionItem. public abstract class ConfigOptionEventArgs<T> : OptionEventArgs Type Parameters T Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<T> Derived ChoiceChangedEventArgs<T> ColorChangedEventArgs GameObjectCreatedEventArgs KeybindChangedEventArgs SliderChangedEventArgs ToggleChangedEventArgs Inherited Members OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ConfigOptionEventArgs(string, T) Instantiates a new ConfigOptionEventArgs<T> for handling an event from a OptionItem. public ConfigOptionEventArgs(string id, T value) Parameters id string The internal ID of the option. value T The new value of the option. Properties Value The typed Value of the OptionItem this event corresponds to. public T Value { get; } Property Value T"
  },
  "api/Nautilus.Options.GameObjectCreatedEventArgs.html": {
    "href": "api/Nautilus.Options.GameObjectCreatedEventArgs.html",
    "title": "Class GameObjectCreatedEventArgs",
    "keywords": "Class GameObjectCreatedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a created game object event public class GameObjectCreatedEventArgs : ConfigOptionEventArgs<GameObject> Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<GameObject> GameObjectCreatedEventArgs Inherited Members ConfigOptionEventArgs<GameObject>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors GameObjectCreatedEventArgs(string, GameObject) Constructs a new GameObjectCreatedEventArgs public GameObjectCreatedEventArgs(string id, GameObject gameObject) Parameters id string The ID of the OptionItem for which game object was created gameObject GameObject New game object for the OptionItem"
  },
  "api/Nautilus.Options.html": {
    "href": "api/Nautilus.Options.html",
    "title": "Namespace Nautilus.Options",
    "keywords": "Namespace Nautilus.Options Classes ButtonClickedEventArgs Contains all the information about a button click event. ChoiceChangedEventArgs<T> Contains all the information about a choice changed event. ColorChangedEventArgs Contains all the information about a color changed event. ConfigEntryExtensions ConfigOptionEventArgs<T> Interface for event arguments for a OptionItem. GameObjectCreatedEventArgs Contains all the information about a created game object event KeybindChangedEventArgs Contains all the information about a keybind changed event. ModButtonOption A mod option class for handling a button that can be clicked. ModChoiceOption<T> A mod option class for handling an option that can select one item from a list of values. ModColorOption A basic mod option class for handling an option that can be any UnityEngine.Color. ModKeybindOption A mod option class for handling an option that is a keybind. ModOption<T, E> The common generic-typed abstract class to all mod options. ModOptions Abstract class that provides the framework for your mod's in-game configuration options. ModSliderOption A mod option class for handling an option that can have any floating point value between a minimum and maximum. ModSliderOption.SliderValue Component for customizing slider's value behaviour. If you need more complex behaviour than just custom value format then you can inherit this component and add it to \"Slider\" game object in OnGameObjectCreated event (see AddToPanel(uGUI_TabbedControlsPanel, int) for details on adding component) You can override value converters ConvertToDisplayValue(float) and ConvertToSliderValue(float), in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters (also this value will be passed to OnChange<T, E>(string, T) event) ModToggleOption A mod option class for handling an option that can be either ON or OFF. OptionEventArgs Interface for event arguments for a OptionItem. OptionItem The common abstract class to all items in the mod options page. OptionItem.ModOptionAdjust The base 'adjuster' component to prevent UI elements overlapping SliderChangedEventArgs Contains all the information about a slider changed event. ToggleChangedEventArgs Contains all the information about a toggle changed event."
  },
  "api/Nautilus.Options.KeybindChangedEventArgs.html": {
    "href": "api/Nautilus.Options.KeybindChangedEventArgs.html",
    "title": "Class KeybindChangedEventArgs",
    "keywords": "Class KeybindChangedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a keybind changed event. public class KeybindChangedEventArgs : ConfigOptionEventArgs<KeyCode> Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<KeyCode> KeybindChangedEventArgs Inherited Members ConfigOptionEventArgs<KeyCode>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors KeybindChangedEventArgs(string, KeyCode) Constructs a new KeybindChangedEventArgs. public KeybindChangedEventArgs(string id, KeyCode key) Parameters id string The ID of the ModKeybindOption that was changed. key KeyCode The new value for the ModKeybindOption."
  },
  "api/Nautilus.Options.ModButtonOption.html": {
    "href": "api/Nautilus.Options.ModButtonOption.html",
    "title": "Class ModButtonOption",
    "keywords": "Class ModButtonOption Namespace Nautilus.Options Assembly Nautilus.dll A mod option class for handling a button that can be clicked. public class ModButtonOption : OptionItem Inheritance object OptionItem ModButtonOption Inherited Members OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string, Action<ButtonClickedEventArgs>) Creates a new ModButtonOption for handling a button that can be clicked. public static ModButtonOption Create(string id, string label, Action<ButtonClickedEventArgs> onPressed = null) Parameters id string The internal ID of this option. label string The display text to show on the in-game menus. onPressed Action<ButtonClickedEventArgs> Action to trigger when button is pressed. Can leave as Null and then add events using the OnPressed += method; Returns ModButtonOption GetDelegates() Gets the Invocation List for the OnPressed event or returns null if none present. public IEnumerable<Action<ButtonClickedEventArgs>> GetDelegates() Returns IEnumerable<Action<ButtonClickedEventArgs>> Events OnPressed The event that is called whenever an option is changed. public event Action<ButtonClickedEventArgs> OnPressed Event Type Action<ButtonClickedEventArgs>"
  },
  "api/Nautilus.Options.ModChoiceOption-1.html": {
    "href": "api/Nautilus.Options.ModChoiceOption-1.html",
    "title": "Class ModChoiceOption<T>",
    "keywords": "Class ModChoiceOption<T> Namespace Nautilus.Options Assembly Nautilus.dll A mod option class for handling an option that can select one item from a list of values. public class ModChoiceOption<T> : ModOption<T, ChoiceChangedEventArgs<T>> Type Parameters T Inheritance object OptionItem ModOption<T, ChoiceChangedEventArgs<T>> ModChoiceOption<T> Inherited Members ModOption<T, ChoiceChangedEventArgs<T>>.Value ModOption<T, ChoiceChangedEventArgs<T>>.OnChanged ModOption<T, ChoiceChangedEventArgs<T>>.GetDelegates() ModOption<T, ChoiceChangedEventArgs<T>>.OnChange(string, T) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type Choice The actual uGUI_Choice when the menu is open. public uGUI_Choice Choice { get; } Property Value uGUI_Choice Index The currently selected index among the options array. public int Index { get; } Property Value int Options The array of readable string options to choose between in the ModChoiceOption<T>. public T[] Options { get; } Property Value T[] Tooltip The tooltip to show when hovering over the option. public string Tooltip { get; } Property Value string Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string, T[], int, string) Adds a new ModChoiceOption<T> to this instance. public static ModChoiceOption<T> Create(string id, string label, T[] options, int index, string tooltip = null) Parameters id string The internal ID for the choice option. label string The display text to use in the in-game menu. options T[] The collection of available values. index int The starting value. tooltip string The tooltip to show when hovering over the option. Returns ModChoiceOption<T> Create(string, string, T[], T, string) Adds a new ModChoiceOption<T> to this instance. public static ModChoiceOption<T> Create(string id, string label, T[] options, T value, string tooltip = null) Parameters id string The internal ID for the choice option. label string The display text to use in the in-game menu. options T[] The collection of available values. value T The starting value. tooltip string The tooltip to show when hovering over the option. Returns ModChoiceOption<T>"
  },
  "api/Nautilus.Options.ModColorOption.html": {
    "href": "api/Nautilus.Options.ModColorOption.html",
    "title": "Class ModColorOption",
    "keywords": "Class ModColorOption Namespace Nautilus.Options Assembly Nautilus.dll A basic mod option class for handling an option that can be any UnityEngine.Color. public class ModColorOption : ModOption<Color, ColorChangedEventArgs> Inheritance object OptionItem ModOption<Color, ColorChangedEventArgs> ModColorOption Inherited Members ModOption<Color, ColorChangedEventArgs>.Value ModOption<Color, ColorChangedEventArgs>.OnChanged ModOption<Color, ColorChangedEventArgs>.GetDelegates() ModOption<Color, ColorChangedEventArgs>.OnChange(string, Color) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type Advanced Whether to use an advanced UI public bool Advanced { get; set; } Property Value bool Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string) Creates a new ModColorOption instance. public static ModColorOption Create(string id, string label) Parameters id string The internal ID for the Color option. label string The display text to use in the in-game menu. Returns ModColorOption Create(string, string, Color, bool) Creates a new ModColorOption instance. public static ModColorOption Create(string id, string label, Color value, bool advanced = false) Parameters id string The internal ID for the Color option. label string The display text to use in the in-game menu. value Color The starting value. advanced bool Whether to use an advanced display. Returns ModColorOption"
  },
  "api/Nautilus.Options.ModKeybindOption.html": {
    "href": "api/Nautilus.Options.ModKeybindOption.html",
    "title": "Class ModKeybindOption",
    "keywords": "Class ModKeybindOption Namespace Nautilus.Options Assembly Nautilus.dll A mod option class for handling an option that is a keybind. public class ModKeybindOption : ModOption<KeyCode, KeybindChangedEventArgs> Inheritance object OptionItem ModOption<KeyCode, KeybindChangedEventArgs> ModKeybindOption Inherited Members ModOption<KeyCode, KeybindChangedEventArgs>.Value ModOption<KeyCode, KeybindChangedEventArgs>.OnChanged ModOption<KeyCode, KeybindChangedEventArgs>.GetDelegates() ModOption<KeyCode, KeybindChangedEventArgs>.OnChange(string, KeyCode) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type Device The currently select input source device for the ModKeybindOption. public GameInput.Device Device { get; } Property Value GameInput.Device Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string, Device, string) Creates a new ModKeybindOption for handling an option that is a keybind. public static ModKeybindOption Create(string id, string label, GameInput.Device device, string key) Parameters id string The internal ID for the toggle option. label string The display text to use in the in-game menu. device GameInput.Device The device name. key string The starting keybind value. Returns ModKeybindOption Create(string, string, Device, KeyCode) Creates a new ModKeybindOption for handling an option that is a keybind. public static ModKeybindOption Create(string id, string label, GameInput.Device device, KeyCode key) Parameters id string The internal ID for the toggle option. label string The display text to use in the in-game menu. device GameInput.Device The device name. key KeyCode The starting keybind value. Returns ModKeybindOption"
  },
  "api/Nautilus.Options.ModOption-2.html": {
    "href": "api/Nautilus.Options.ModOption-2.html",
    "title": "Class ModOption<T, E>",
    "keywords": "Class ModOption<T, E> Namespace Nautilus.Options Assembly Nautilus.dll The common generic-typed abstract class to all mod options. public abstract class ModOption<T, E> : OptionItem where E : ConfigOptionEventArgs<T> Type Parameters T E Inheritance object OptionItem ModOption<T, E> Derived ModChoiceOption<T> ModColorOption ModKeybindOption ModSliderOption ModToggleOption Inherited Members OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions OptionItem.AddToPanel(uGUI_TabbedControlsPanel, int) OptionItem.AdjusterComponent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ModOption(string, string, T) Base constructor for all typed mod options. public ModOption(string label, string id, T value) Parameters label string The display text to show on the in-game menus. id string The internal ID if this option. value T The typed value of the OptionItem Properties Value The value for the ModOption<T, E>. public T Value { get; set; } Property Value T Methods GetDelegates() Gets the Invocation List for the OnChanged event or returns null if none present. public IEnumerable<EventHandler<E>> GetDelegates() Returns IEnumerable<EventHandler<E>> OnChange(string, T) Notifies an option change to all subscribed event handlers. public void OnChange(string id, T value) Parameters id string value T Events OnChanged The event that is called whenever an option is changed. public event EventHandler<E> OnChanged Event Type EventHandler<E>"
  },
  "api/Nautilus.Options.ModOptions.html": {
    "href": "api/Nautilus.Options.ModOptions.html",
    "title": "Class ModOptions",
    "keywords": "Class ModOptions Namespace Nautilus.Options Assembly Nautilus.dll Abstract class that provides the framework for your mod's in-game configuration options. public abstract class ModOptions Inheritance object ModOptions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ModOptions(string) Creates a new instance of ModOptions. public ModOptions(string name) Parameters name string The name that will display above this section of options in the in-game menu. Fields Name The name of this set of configuration options. public string Name Field Value string Properties Options Obtains the OptionItems that belong to this instance. Can be null. public IReadOnlyCollection<OptionItem> Options { get; } Property Value IReadOnlyCollection<OptionItem> Methods AddItem(OptionItem) Attaches a OptionItem to the options menu. public bool AddItem(OptionItem option) Parameters option OptionItem The OptionItem to add to the options menu. Returns bool BuildModOptions(uGUI_TabbedControlsPanel, int, IReadOnlyCollection<OptionItem>) Builds up the configuration the options. public virtual void BuildModOptions(uGUI_TabbedControlsPanel panel, int modsTabIndex, IReadOnlyCollection<OptionItem> options) Parameters panel uGUI_TabbedControlsPanel modsTabIndex int options IReadOnlyCollection<OptionItem> GetDelegates() Gets the Invocation List for the OnChanged event or returns null if none present. public List<EventHandler<OptionEventArgs>> GetDelegates() Returns List<EventHandler<OptionEventArgs>> OnChange<T, E>(string, T) Notifies an option change to all subscribed event handlers. public void OnChange<T, E>(string id, T value) where E : ConfigOptionEventArgs<T> Parameters id string value T Type Parameters T E RemoveItem(string) Attaches a OptionItem to the options menu. public bool RemoveItem(string id) Parameters id string The id of the OptionItem to remove from the options menu. Returns bool Events GameObjectCreated The event that is called whenever a game object created for the option protected event EventHandler<GameObjectCreatedEventArgs> GameObjectCreated Event Type EventHandler<GameObjectCreatedEventArgs> OnChanged The event that is called whenever an option is changed. public event EventHandler<OptionEventArgs> OnChanged Event Type EventHandler<OptionEventArgs>"
  },
  "api/Nautilus.Options.ModSliderOption.html": {
    "href": "api/Nautilus.Options.ModSliderOption.html",
    "title": "Class ModSliderOption",
    "keywords": "Class ModSliderOption Namespace Nautilus.Options Assembly Nautilus.dll A mod option class for handling an option that can have any floating point value between a minimum and maximum. public class ModSliderOption : ModOption<float, SliderChangedEventArgs> Inheritance object OptionItem ModOption<float, SliderChangedEventArgs> ModSliderOption Inherited Members ModOption<float, SliderChangedEventArgs>.Value ModOption<float, SliderChangedEventArgs>.OnChanged ModOption<float, SliderChangedEventArgs>.GetDelegates() ModOption<float, SliderChangedEventArgs>.OnChange(string, float) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type DefaultValue The default value of the ModSliderOption. Showed on the slider by small gray circle. Slider's handle will snap to the default value near it. public float DefaultValue { get; } Property Value float MaxValue The maximum value of the ModSliderOption. public float MaxValue { get; } Property Value float MinValue The minimum value of the ModSliderOption. public float MinValue { get; } Property Value float Step The step value of the ModSliderOption defaults to 1. public float Step { get; } Property Value float Tooltip The tooltip to show when hovering over the option. public string Tooltip { get; } Property Value string ValueFormat Float Format for value field (Create(string, string, float, float, float, float?, string, float, string)) public string ValueFormat { get; } Property Value string Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string, float, float, float, float?, string, float, string) Creates a new ModSliderOption to this instance. public static ModSliderOption Create(string id, string label, float minValue, float maxValue, float value, float? defaultValue = null, string valueFormat = \"{0:F0}\", float step = 1, string tooltip = null) Parameters id string The internal ID for the slider option. label string The display text to use in the in-game menu. minValue float The minimum value for the range. maxValue float The maximum value for the range. value float The starting value. defaultValue float? The default value for the slider. If this is null then 'value' used as default. uses value valueFormat string format for values when labelMode is set to SliderLabelMode.Float, e.g. \"{0:F2}\" for 2 decimals or \"{0:F0} for no decimals %\" (more on this here) step float Step for the slider, ie. round to nearest X. defaults to 1 tooltip string The tooltip to show when hovering over the option. defaults to no tooltip. Returns ModSliderOption"
  },
  "api/Nautilus.Options.ModSliderOption.SliderValue.html": {
    "href": "api/Nautilus.Options.ModSliderOption.SliderValue.html",
    "title": "Class ModSliderOption.SliderValue",
    "keywords": "Class ModSliderOption.SliderValue Namespace Nautilus.Options Assembly Nautilus.dll Component for customizing slider's value behaviour. If you need more complex behaviour than just custom value format then you can inherit this component and add it to \"Slider\" game object in OnGameObjectCreated event (see AddToPanel(uGUI_TabbedControlsPanel, int) for details on adding component) You can override value converters ConvertToDisplayValue(float) and ConvertToSliderValue(float), in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters (also this value will be passed to OnChange<T, E>(string, T) event) public class ModSliderOption.SliderValue : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ModSliderOption.SliderValue Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.Internal_CancelInvokeAll(MonoBehaviour) MonoBehaviour.Internal_IsInvokingAll(MonoBehaviour) MonoBehaviour.InvokeDelayed(MonoBehaviour, string, float, float) MonoBehaviour.CancelInvoke(MonoBehaviour, string) MonoBehaviour.IsInvoking(MonoBehaviour, string) MonoBehaviour.IsObjectMonoBehaviour(Object) MonoBehaviour.StartCoroutineManaged(string, object) MonoBehaviour.StartCoroutineManaged2(IEnumerator) MonoBehaviour.StopCoroutineManaged(Coroutine) MonoBehaviour.StopCoroutineFromEnumeratorManaged(IEnumerator) MonoBehaviour.GetScriptClassName() MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponentFastPath(Type, IntPtr) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponentsForListInternal(Type, object) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.m_CachedPtr Object.OffsetOfInstanceIDInCPlusPlusObject Object.objectIsNullMessage Object.cloneDestroyedMessage Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.CompareBaseObjects(Object, Object) Object.EnsureRunningOnMainThread() Object.IsNativeObjectAlive(Object) Object.GetCachedPtr() Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.CheckNullArgument(object, string) Object.FindObjectOfType(Type) Object.ToString() Object.GetOffsetOfInstanceIDInCPlusPlusObject() Object.CurrentThreadIsMainThread() Object.Internal_CloneSingle(Object) Object.Internal_CloneSingleWithParent(Object, Transform, bool) Object.Internal_InstantiateSingle(Object, Vector3, Quaternion) Object.Internal_InstantiateSingleWithParent(Object, Transform, Vector3, Quaternion) Object.ToString(Object) Object.GetName(Object) Object.IsPersistent(Object) Object.SetName(Object, string) Object.DoesObjectWithInstanceIDExist(int) Object.FindObjectFromInstanceID(int) Object.ForceLoadFromInstanceID(int) Object.Internal_InstantiateSingle_Injected(Object, ref Vector3, ref Quaternion) Object.Internal_InstantiateSingleWithParent_Injected(Object, Transform, ref Vector3, ref Quaternion) Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods GameObjectExtensions.CopyComponent<TSelfComponent, TCopiedComponent>(TSelfComponent, TCopiedComponent) GameObjectExtensions.Exists<T>(T) JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Fields label The value label of the ModSliderOption.SliderValue protected TextMeshProUGUI label Field Value TextMeshProUGUI maxValue The maximum value of the ModSliderOption.SliderValue. In case of custom value converters it can be not equal to internal maximum value for slider protected float maxValue Field Value float minValue The minimum value of the ModSliderOption.SliderValue. In case of custom value converters it can be not equal to internal minimum value for slider protected float minValue Field Value float slider The slider controlling this ModSliderOption.SliderValue protected Slider slider Field Value Slider valueFormat Custom value format protected string valueFormat Field Value string Properties ValueFormat Custom value format property. Set it right after adding component to game object for proper behaviour public string ValueFormat { get; set; } Property Value string ValueWidth Width for value text field. Used by ModSliderOption.SliderOptionAdjust to adjust label width. It is calculated in UpdateValueWidth(), but you can override this property. public virtual float ValueWidth { get; protected set; } Property Value float Methods Awake() Component initialization. If you overriding this, make sure that you calling base.Awake() protected virtual void Awake() ConvertToDisplayValue(float) Converts internal slider value [0.0f : 1.0f] to displayed value public virtual float ConvertToDisplayValue(float sliderValue) Parameters sliderValue float Returns float ConvertToSliderValue(float) Converts displayed value to internal slider value [0.0f : 1.0f] public virtual float ConvertToSliderValue(float displayValue) Parameters displayValue float Returns float InitConverters() Override this if you need to initialize custom value converters protected virtual void InitConverters() OnValueChanged(float) Called when user changes slider value protected virtual void OnValueChanged(float value) Parameters value float Start() UnityEngine.MonoBehaviour.Start() protected virtual IEnumerator Start() Returns IEnumerator UpdateLabel() Updates label's text with formatted and converted slider's value. Override this if you need even more control on slider's value behaviour. protected virtual void UpdateLabel() UpdateValueWidth() Method for calculating necessary label's width. Creates temporary label and compares widths of min and max values, then sets ValueWidth to the wider. Be aware that in case of using custom converters some intermediate value may be wider than min/max values. protected virtual IEnumerator UpdateValueWidth() Returns IEnumerator"
  },
  "api/Nautilus.Options.ModToggleOption.html": {
    "href": "api/Nautilus.Options.ModToggleOption.html",
    "title": "Class ModToggleOption",
    "keywords": "Class ModToggleOption Namespace Nautilus.Options Assembly Nautilus.dll A mod option class for handling an option that can be either ON or OFF. public class ModToggleOption : ModOption<bool, ToggleChangedEventArgs> Inheritance object OptionItem ModOption<bool, ToggleChangedEventArgs> ModToggleOption Inherited Members ModOption<bool, ToggleChangedEventArgs>.Value ModOption<bool, ToggleChangedEventArgs>.OnChanged ModOption<bool, ToggleChangedEventArgs>.GetDelegates() ModOption<bool, ToggleChangedEventArgs>.OnChange(string, bool) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties AdjusterComponent The Adjuster for this OptionItem. public override Type AdjusterComponent { get; } Property Value Type Tooltip The tooltip to show when hovering over the option. public string Tooltip { get; } Property Value string Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option. Create(string, string, bool, string) Adds a new ModToggleOption to this instance. public static ModToggleOption Create(string id, string label, bool value, string tooltip = null) Parameters id string The internal ID for the toggle option. label string The display text to use in the in-game menu. value bool The starting value. tooltip string The tooltip to show when hovering over the option. defaults to no tooltip. Returns ModToggleOption"
  },
  "api/Nautilus.Options.OptionEventArgs.html": {
    "href": "api/Nautilus.Options.OptionEventArgs.html",
    "title": "Class OptionEventArgs",
    "keywords": "Class OptionEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Interface for event arguments for a OptionItem. public abstract class OptionEventArgs : EventArgs Inheritance object EventArgs OptionEventArgs Derived ButtonClickedEventArgs ConfigOptionEventArgs<T> Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors OptionEventArgs(string) Instantiates a new OptionEventArgs for handling an event from a OptionItem. public OptionEventArgs(string id) Parameters id string The internal ID of the item. Properties Id The ID of the OptionItem this event corresponds to. public string Id { get; } Property Value string"
  },
  "api/Nautilus.Options.OptionItem.html": {
    "href": "api/Nautilus.Options.OptionItem.html",
    "title": "Class OptionItem",
    "keywords": "Class OptionItem Namespace Nautilus.Options Assembly Nautilus.dll The common abstract class to all items in the mod options page. public abstract class OptionItem Inheritance object OptionItem Derived ModButtonOption ModOption<T, E> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors OptionItem(string, string) Base constructor for all items in the options. public OptionItem(string label, string id) Parameters label string The display text to show on the in-game menus. id string The internal ID if this option. Fields parentOptions Parent ModOptions for this option protected ModOptions parentOptions Field Value ModOptions Properties AdjusterComponent The Adjuster for this OptionItem. public abstract Type AdjusterComponent { get; } Property Value Type Id The internal ID that identifies this option. public string Id { get; } Property Value string Label The display text to be shown for this option in the in-game menus. public string Label { get; } Property Value string OptionGameObject UI GameObject for this option public GameObject OptionGameObject { get; protected set; } Property Value GameObject Methods AddToPanel(uGUI_TabbedControlsPanel, int) The base method for adding an object to the options panel public virtual void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters panel uGUI_TabbedControlsPanel The panel to add the option to. tabIndex int Where in the panel to add the option."
  },
  "api/Nautilus.Options.OptionItem.ModOptionAdjust.html": {
    "href": "api/Nautilus.Options.OptionItem.ModOptionAdjust.html",
    "title": "Class OptionItem.ModOptionAdjust",
    "keywords": "Class OptionItem.ModOptionAdjust Namespace Nautilus.Options Assembly Nautilus.dll The base 'adjuster' component to prevent UI elements overlapping public abstract class OptionItem.ModOptionAdjust : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour OptionItem.ModOptionAdjust Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.Internal_CancelInvokeAll(MonoBehaviour) MonoBehaviour.Internal_IsInvokingAll(MonoBehaviour) MonoBehaviour.InvokeDelayed(MonoBehaviour, string, float, float) MonoBehaviour.CancelInvoke(MonoBehaviour, string) MonoBehaviour.IsInvoking(MonoBehaviour, string) MonoBehaviour.IsObjectMonoBehaviour(Object) MonoBehaviour.StartCoroutineManaged(string, object) MonoBehaviour.StartCoroutineManaged2(IEnumerator) MonoBehaviour.StopCoroutineManaged(Coroutine) MonoBehaviour.StopCoroutineFromEnumeratorManaged(IEnumerator) MonoBehaviour.GetScriptClassName() MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponentFastPath(Type, IntPtr) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponentsForListInternal(Type, object) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.m_CachedPtr Object.OffsetOfInstanceIDInCPlusPlusObject Object.objectIsNullMessage Object.cloneDestroyedMessage Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.CompareBaseObjects(Object, Object) Object.EnsureRunningOnMainThread() Object.IsNativeObjectAlive(Object) Object.GetCachedPtr() Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectOfType<T>() Object.FindObjectsOfTypeAll(Type) Object.CheckNullArgument(object, string) Object.FindObjectOfType(Type) Object.ToString() Object.GetOffsetOfInstanceIDInCPlusPlusObject() Object.CurrentThreadIsMainThread() Object.Internal_CloneSingle(Object) Object.Internal_CloneSingleWithParent(Object, Transform, bool) Object.Internal_InstantiateSingle(Object, Vector3, Quaternion) Object.Internal_InstantiateSingleWithParent(Object, Transform, Vector3, Quaternion) Object.ToString(Object) Object.GetName(Object) Object.IsPersistent(Object) Object.SetName(Object, string) Object.DoesObjectWithInstanceIDExist(int) Object.FindObjectFromInstanceID(int) Object.ForceLoadFromInstanceID(int) Object.Internal_InstantiateSingle_Injected(Object, ref Vector3, ref Quaternion) Object.Internal_InstantiateSingleWithParent_Injected(Object, Transform, ref Vector3, ref Quaternion) Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods GameObjectExtensions.CopyComponent<TSelfComponent, TCopiedComponent>(TSelfComponent, TCopiedComponent) GameObjectExtensions.Exists<T>(T) JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Properties CaptionWidth The width of the caption for the component protected float CaptionWidth { get; } Property Value float isMainMenu Whether we are in the main menu or in game in the options protected bool isMainMenu { get; } Property Value bool Methods Awake() The function called after this UnityEngine.MonoBehaviour is awakened. public void Awake() SetCaptionGameObject(string, float) Creates and adds a caption to this GameObject protected void SetCaptionGameObject(string gameObjectPath, float minWidth = 0) Parameters gameObjectPath string minWidth float SetVec2x(Vector2, float) Sets the X coordinate of a UnityEngine.Vector2. protected static Vector2 SetVec2x(Vector2 vec, float val) Parameters vec Vector2 The UnityEngine.Vector2 to set the value on. val float The value to set to the x coordinate. Returns Vector2"
  },
  "api/Nautilus.Options.SliderChangedEventArgs.html": {
    "href": "api/Nautilus.Options.SliderChangedEventArgs.html",
    "title": "Class SliderChangedEventArgs",
    "keywords": "Class SliderChangedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a slider changed event. public class SliderChangedEventArgs : ConfigOptionEventArgs<float> Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<float> SliderChangedEventArgs Inherited Members ConfigOptionEventArgs<float>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors SliderChangedEventArgs(string, float) Constructs a new SliderChangedEventArgs. public SliderChangedEventArgs(string id, float value) Parameters id string The ID of the ModSliderOption that was changed. value float The new value for the ModSliderOption."
  },
  "api/Nautilus.Options.ToggleChangedEventArgs.html": {
    "href": "api/Nautilus.Options.ToggleChangedEventArgs.html",
    "title": "Class ToggleChangedEventArgs",
    "keywords": "Class ToggleChangedEventArgs Namespace Nautilus.Options Assembly Nautilus.dll Contains all the information about a toggle changed event. public class ToggleChangedEventArgs : ConfigOptionEventArgs<bool> Inheritance object EventArgs OptionEventArgs ConfigOptionEventArgs<bool> ToggleChangedEventArgs Inherited Members ConfigOptionEventArgs<bool>.Value OptionEventArgs.Id EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ToggleChangedEventArgs(string, bool) Constructs a new ToggleChangedEventArgs. public ToggleChangedEventArgs(string id, bool value) Parameters id string The ID of the ModToggleOption that was changed. value bool The new value for the ModToggleOption."
  },
  "api/Nautilus.Utility.AssetBundleLoadingUtils.html": {
    "href": "api/Nautilus.Utility.AssetBundleLoadingUtils.html",
    "title": "Class AssetBundleLoadingUtils",
    "keywords": "Class AssetBundleLoadingUtils Namespace Nautilus.Utility Assembly Nautilus.dll Utilities related to loading Asset Bundles. public static class AssetBundleLoadingUtils Inheritance object AssetBundleLoadingUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoadFromAssetsFolder(Assembly, string) Loads an UnityEngine.AssetBundle from the the mod's Assets folder. Expects a folder named Assets to exist in the same folder as the Assembly, and expects this folder to contain an asset bundle with the same name as defined in the assetBundleFileName parameter. public static AssetBundle LoadFromAssetsFolder(Assembly modAssembly, string assetBundleFileName) Parameters modAssembly Assembly The mod assembly, in the same folder that contains the Assets folder. See GetExecutingAssembly(). assetBundleFileName string The name of the Asset Bundle file in your Assets folder, i.e. \"deextinctionassets\" or \"gargantuanassets\". These typically do not have a file extension. Returns AssetBundle LoadFromModFolder(Assembly, string) Loads an UnityEngine.AssetBundle from a given path. Expects an asset bundle to exist at pathToBundle (relative to the containing folder of the DLL). public static AssetBundle LoadFromModFolder(Assembly modAssembly, string pathToBundle) Parameters modAssembly Assembly The mod assembly used to find the mod's folder. See GetExecutingAssembly(). pathToBundle string The relative path to the Asset Bundle file from your plugin folder, i.e. \"Assets/deextinctionassets\" or \"Assets/AssetBundles/gargantuanassets\". See Combine(string, string) for creating the path. These typically do not have a file extension. Returns AssetBundle See Also LoadFromFile(string)"
  },
  "api/Nautilus.Utility.AudioUtils.BusPaths.html": {
    "href": "api/Nautilus.Utility.AudioUtils.BusPaths.html",
    "title": "Class AudioUtils.BusPaths",
    "keywords": "Class AudioUtils.BusPaths Namespace Nautilus.Utility Assembly Nautilus.dll A list of the relevant FMOD bus paths the game uses. public static class AudioUtils.BusPaths Inheritance object AudioUtils.BusPaths Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields EnvironmentalMusic Used for environmental music. Tied to the music volume. public const string EnvironmentalMusic = \"bus:/master/SFX_for_pause/nofilter/music/mutable music\" Field Value string Music Used for main music. Tied to the music volume. public const string Music = \"bus:/master/SFX_for_pause/nofilter/music\" Field Value string PDAVoice Used for PDA voices. Tied to the voice volume. public const string PDAVoice = \"bus:/master/SFX_for_pause/PDA_pause/all/all voice/AI voice\" Field Value string PlayerSFXs Used for player and hand-held tools SFXs. Tied to the master volume. public const string PlayerSFXs = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/reverbsend\" Field Value string SurfaceAmbient Used for ambience SFXs that dont get muted when at the surface of the ocean. Tied to the ambient volume. public const string SurfaceAmbient = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/backgrounds/surface\" Field Value string SurfaceCreatures Used for surface creature SFXs that dont get muted when at the surface of the ocean. Tied to the master volume. public const string SurfaceCreatures = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/creatures surface\" Field Value string UnderwaterAmbient Used for underwater ambience SFXs. Tied to the ambient volume. public const string UnderwaterAmbient = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/backgrounds\" Field Value string UnderwaterCreatures Used for underwater creature SFXs. Tied to the master volume. public const string UnderwaterCreatures = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/creatures\" Field Value string VoiceOvers Used for encyclopedia VOs. Tied to the voice volume. public const string VoiceOvers = \"bus:/master/SFX_for_pause/PDA_pause/all/all voice/VOs\" Field Value string"
  },
  "api/Nautilus.Utility.AudioUtils.html": {
    "href": "api/Nautilus.Utility.AudioUtils.html",
    "title": "Class AudioUtils",
    "keywords": "Class AudioUtils Namespace Nautilus.Utility Assembly Nautilus.dll Utilities pertaining to the use and creation of custom FMOD.Sound objects, alongside other audio-specific functionality. Also see the CustomSoundHandler. public static class AudioUtils Inheritance object AudioUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateSound(string, MODE) Creates a FMOD.Sound instance from a path. Can be stored and later used with TryPlaySound(Sound, Bus, out Channel) public static Sound CreateSound(string path, MODE mode = MODE.DEFAULT) Parameters path string The path of the sound. Relative to the base game folder. mode MODE Returns Sound The FMOD.Sound instance CreateSound(AudioClip, MODE) Creates a FMOD.Sound instance from an UnityEngine.AudioClip. Can be stored and later used with TryPlaySound(Sound, Bus, out Channel) public static Sound CreateSound(AudioClip audio, MODE mode = MODE.DEFAULT) Parameters audio AudioClip the AudioClip to make a Sound instance of. mode MODE Returns Sound The FMOD.Sound instance. CreateSounds(IEnumerable<string>, MODE) Converts a sound paths collection to an FMOD FMOD.Sound collection. public static IEnumerable<Sound> CreateSounds(IEnumerable<string> soundPaths, MODE mode = MODE.DEFAULT) Parameters soundPaths IEnumerable<string> Sound paths to create from. Relative to the base game folder mode MODE The mode to set the sound to Returns IEnumerable<Sound> A collection of FMOD Sounds. CreateSounds(IEnumerable<AudioClip>, MODE) Creates an FMOD FMOD.Sound collection from an UnityEngine.AudioClip collection. public static IEnumerable<Sound> CreateSounds(IEnumerable<AudioClip> clips, MODE mode = MODE.DEFAULT) Parameters clips IEnumerable<AudioClip> AudioClips to create from. mode MODE The mode to set the sound to Returns IEnumerable<Sound> A collection of FMOD Sounds. GetFmodAsset(string, string) Returns a new FMODAsset with the given parameters. An FMODAsset is a data object that is required for various audio-related classes and methods, since it holds references to internal sound IDs. A list of vanilla sound paths for SN1 can also be viewed at this URL: https://github.com/SubnauticaModding/Nautilus/tree/master/Nautilus/Documentation/resources/SN1-FMODEvents.txt. The best way to assign a \"path\" to a custom sound asset is through RegisterCustomSound(string, Sound, string). public static FMODAsset GetFmodAsset(string path, string id = null) Parameters path string An FMOD Event's 'path' is the part read by most audio systems within Subnautica. For custom sounds, should be identical to the ID passed into the methods when creating sounds with the CustomSoundHandler class. For vanilla sounds, please refer to the list of all sound events. id string The internal sound ID, typically unused but occasionally required. Will be set as path if unassigned. Returns FMODAsset TryPlaySound(Sound, Bus, out Channel) Plays a FMOD.Sound on the specified FMOD.Studio.Bus. public static bool TryPlaySound(Sound sound, Bus bus, out Channel channel) Parameters sound Sound The sound which should be played. bus Bus The bus to play the sound on. channel Channel The channel on which the sound was created. Returns bool If the sound was reported as played. TryPlaySound(Sound, string, out Channel) Plays a FMOD.Sound on the specified FMOD.Studio.Bus. public static bool TryPlaySound(Sound sound, string busPath, out Channel channel) Parameters sound Sound The sound which should be played. busPath string The path to the bus to play the sound on. channel Channel The channel on which the sound was created. Returns bool If the sound was reported as played."
  },
  "api/Nautilus.Utility.BasicText.html": {
    "href": "api/Nautilus.Utility.BasicText.html",
    "title": "Class BasicText",
    "keywords": "Class BasicText Namespace Nautilus.Utility Assembly Nautilus.dll Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). By default uses the same font/size/color as the \"Press Any Button To Begin\" message at the beginning of the game, and appears centered about 1/3 down the screen, but all parameters can be reconfigured. public class BasicText Inheritance object BasicText Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Examples SIMPLE USAGE EXAMPLE: BasicText message = new BasicText(); message.ShowMessage(\"This Message Will Fade In 10 Seconds\", 10); COMPLEX USAGE EXAMPLE: BasicText message = new BasicText(TextAnchor.UpperLeft); // Note many other properties could also be set as constructor parameters message.setColor(Color.red); // Set Color message.setSize(20); // Set Font Size message.setLoc(200, 400); // Set x/y position (0,0 is center of screen) message.setFontStyle(FontStyle.Bold); // Bold message.ShowMessage(\"This message stays on screen until hidden\"); // Display message; if fadeout seconds not specified, it just keeps showing ... // other things happen, time goes by message.Hide(); // Hides the message Constructors BasicText() Creates a new instances of BasicText with all default options. public BasicText() BasicText(int) Creates a new instances of BasicText with a specified size. public BasicText(int useSize) Parameters useSize int The text size to uset BasicText(int, int) Creates a new instances of BasicText at the specified origin point. public BasicText(int set_x, int set_y) Parameters set_x int The x coordinate to set set_y int The y coordinate to set BasicText(int, int, int) Creates a new instances of BasicText with a specified origin point and size. public BasicText(int set_x, int set_y, int useSize) Parameters set_x int The x coordinate to set set_y int The y coordinate to set useSize int The text size to use BasicText(int, int, int, Color) Creates a new instances of BasicText with a specified origin point, size, and UnityEngine.Color. public BasicText(int set_x, int set_y, int useSize, Color useColor) Parameters set_x int The x coordinate to set set_y int The y coordinate to set useSize int The text size to use useColor Color The text color to use BasicText(int, int, int, Color, TextAlignmentOptions) Creates a new instances of BasicText with a specified origin point, size, UnityEngine.Color, and UnityEngine.TextAnchor. public BasicText(int set_x, int set_y, int useSize, Color useColor, TextAlignmentOptions useAlign) Parameters set_x int The x coordinate to set set_y int The y coordinate to set useSize int The text size to use useColor Color The text color to use useAlign TextAlignmentOptions The text anchor to align to BasicText(int, TextAlignmentOptions) Creates a new instances of BasicText with a specified size and UnityEngine.TextAnchor. public BasicText(int useSize, TextAlignmentOptions useAlign) Parameters useSize int The text size to use useAlign TextAlignmentOptions The text anchor to align to BasicText(int, Color) Creates a new instances of BasicText with a specified size and UnityEngine.Color. public BasicText(int useSize, Color useColor) Parameters useSize int The text size to use useColor Color The text color to use BasicText(int, Color, TextAlignmentOptions) Creates a new instances of BasicText with a specified size, UnityEngine.Color, and UnityEngine.TextAnchor. public BasicText(int useSize, Color useColor, TextAlignmentOptions useAlign) Parameters useSize int The text size to use useColor Color The text color to use useAlign TextAlignmentOptions The text anchor to align to BasicText(TextAlignmentOptions) Creates a new instances of BasicText at a specified UnityEngine.TextAnchor. public BasicText(TextAlignmentOptions useAlign) Parameters useAlign TextAlignmentOptions The text anchor to align to BasicText(Color) Creates a new instances of BasicText with a specified UnityEngine.Color. public BasicText(Color useColor) Parameters useColor Color The text color to use Methods ClearAlign() Resets to using \"cloned\" font style of Subnautica default public void ClearAlign() ClearColor() Resets to using \"cloned\" color of Subnautica default. public void ClearColor() ClearFont() Resets to using \"cloned\" font of Subnautica default. public void ClearFont() ClearFontStyle() Resets to using \"cloned\" font style of Subnautica default. public void ClearFontStyle() ClearSize() Resets to using \"cloned\" size of Subnautica default. public void ClearSize() GetText() Returns our current text. public string GetText() Returns string Hide() Hides our text item if it is displaying. public void Hide() SetAlign(TextAlignmentOptions) Sets the text anchor. public void SetAlign(TextAlignmentOptions useAlign) Parameters useAlign TextAlignmentOptions The text anchor to align to SetColor(Color) Sets the text color public void SetColor(Color useColor) Parameters useColor Color The text color to use SetFont(TMP_FontAsset) Sets the font public void SetFont(TMP_FontAsset useFont) Parameters useFont TMP_FontAsset The font to render the text as. SetFontStyle(FontStyles) Sets the font style. public void SetFontStyle(FontStyles useStyle) Parameters useStyle FontStyles The text font style to use SetLocation(float, float) Sets screen display location (position relative to the actual text is determined by the alignment) public void SetLocation(float set_x, float set_y) Parameters set_x float The x coordinate to set set_y float The y coordinate to set SetSize(int) Sets the font size. public void SetSize(int useSize) Parameters useSize int The text size to use ShowMessage(string) Shows our text item, with no schedule fade (i.e. indefinitely) public void ShowMessage(string s) Parameters s string The text to display ShowMessage(string, float) Shows our text item, fading after a specified number of seconds (or stays on indefinitely if 0 seconds) public void ShowMessage(string s, float seconds) Parameters s string The text to display seconds float The duration to hold before fading"
  },
  "api/Nautilus.Utility.ConstructableFlags.html": {
    "href": "api/Nautilus.Utility.ConstructableFlags.html",
    "title": "Enum ConstructableFlags",
    "keywords": "Enum ConstructableFlags Namespace Nautilus.Utility Assembly Nautilus.dll Defines how a constructable can be placed. [Flags] public enum ConstructableFlags Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields AllowedOnConstructable = 64 Allowed on constructed entities such as tables, desks, shelves, etc... Base = 8 Can be placed in bases. Ceiling = 4 Can be placed on ceilings. Ground = 1 Can be placed on floors. Inside = Base | Submarine Can be placed inside. Combines Base and Submarine. None = 0 Undefined placement. Outside = 32 Can be placed outside. Rotatable = 128 The constructable can be rotated during placement. Submarine = 16 Can be placed in Cyclops or any other submarine. Wall = 2 Can be placed on walls."
  },
  "api/Nautilus.Utility.FontUtils.html": {
    "href": "api/Nautilus.Utility.FontUtils.html",
    "title": "Class FontUtils",
    "keywords": "Class FontUtils Namespace Nautilus.Utility Assembly Nautilus.dll Contains references to frequently used Font Assets for use in the TMPro.TextMeshProUGUI component, which is the preferred component for rendering text. The fonts referenced in this class should not be expected to exist until after the Main Menu scene has been loaded and both the uGUI and uGUI_MainMenu components have been initialized. public static class FontUtils Inheritance object FontUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Aller_Rg Returns the regular version of the Aller font, referred to internally as 'Aller_Rg SDF'. public static TMP_FontAsset Aller_Rg { get; } Property Value TMP_FontAsset Aller_W_Bd Returns a bold alternative of the Aller font, referred to internally as 'Aller_W_Bd SDF'. public static TMP_FontAsset Aller_W_Bd { get; } Property Value TMP_FontAsset Methods SetFontInChildren(GameObject, TMP_FontAsset) Applies the given font to every TMPro.TextMeshProUGUI component within rootGameObject and its children (recursive). public static void SetFontInChildren(GameObject rootGameObject, TMP_FontAsset font) Parameters rootGameObject GameObject The parent of all affected TMPro.TextMeshProUGUI componentss. font TMP_FontAsset The Font Asset to be applied."
  },
  "api/Nautilus.Utility.html": {
    "href": "api/Nautilus.Utility.html",
    "title": "Namespace Nautilus.Utility",
    "keywords": "Namespace Nautilus.Utility Classes AssetBundleLoadingUtils Utilities related to loading Asset Bundles. AudioUtils Utilities pertaining to the use and creation of custom FMOD.Sound objects, alongside other audio-specific functionality. Also see the CustomSoundHandler. AudioUtils.BusPaths A list of the relevant FMOD bus paths the game uses. BasicText Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). By default uses the same font/size/color as the \"Press Any Button To Begin\" message at the beginning of the game, and appears centered about 1/3 down the screen, but all parameters can be reconfigured. FontUtils Contains references to frequently used Font Assets for use in the TMPro.TextMeshProUGUI component, which is the preferred component for rendering text. The fonts referenced in this class should not be expected to exist until after the Main Menu scene has been loaded and both the uGUI and uGUI_MainMenu components have been initialized. IOUtilities Utilities for files and paths. ImageUtils A collection of image loading utility methods that can create Unity objects from image files at runtime. ItemStorageHelper A utility class that offers additional info about ItemsContainer instances. JsonUtils A collection of utilities for interacting with JSON files. KeyCodeUtils A collection of UnityEngine.KeyCode related utility methods. MaterialUtils Utilities related to Materials and Shaders. MaterialUtils.Shaders Contains references to various Shaders. PlayerPrefsExtra A collection of utility methods that simplify calls into UnityEngine.PlayerPrefs for quick custom save data. PrefabUtils A small collection of prefab related utilities. ReflectionHelper An extension method class for simplifying reflection calls for improved readability. SaveUtils A small collection of save data related utilities. SelfCheckingDictionary<K, V> This dictionary structure automatically checks for duplicate keys as they are being added to the collection. Duplicate entries are logged and removed from the final collection. StorageHelperExtensions Extension methods to provide static calls for ItemsContainer into ItemStorageHelper methods. Enums ConstructableFlags Defines how a constructable can be placed. MaterialUtils.MaterialType Enum for some generic types of Materials."
  },
  "api/Nautilus.Utility.ImageUtils.html": {
    "href": "api/Nautilus.Utility.ImageUtils.html",
    "title": "Class ImageUtils",
    "keywords": "Class ImageUtils Namespace Nautilus.Utility Assembly Nautilus.dll A collection of image loading utility methods that can create Unity objects from image files at runtime. public static class ImageUtils Inheritance object ImageUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods LoadSpriteFromFile(string, TextureFormat) Creates a new Atlas.Sprite from an image file. public static Atlas.Sprite LoadSpriteFromFile(string filePathToImage, TextureFormat format = TextureFormat.BC7) Parameters filePathToImage string The path to the image file. format TextureFormat The texture format. By default, this uses UnityEngine.TextureFormat.BC7. https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. Returns Atlas.Sprite Will return a new Atlas.Sprite instance if the file exists; Otherwise returns null. LoadSpriteFromTexture(Texture2D) Creates a new Atlas.Sprite from an image file. public static Atlas.Sprite LoadSpriteFromTexture(Texture2D texture2D) Parameters texture2D Texture2D The 2D texture to convert into a sprite. Returns Atlas.Sprite Will return a new Atlas.Sprite instance using the provided texture. LoadTextureFromFile(string, TextureFormat) Creates a new UnityEngine.Texture2D from an image file. public static Texture2D LoadTextureFromFile(string filePathToImage, TextureFormat format = TextureFormat.BC7) Parameters filePathToImage string The path to the image file. format TextureFormat The texture format. By default, this uses UnityEngine.TextureFormat.BC7. https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. Returns Texture2D Will return a new UnityEngine.Texture2D instance if the file exists; Otherwise returns null. Remarks Ripped from: https://github.com/RandyKnapp/SubnauticaModSystem/blob/master/SubnauticaModSystem/Common/Utility/ImageUtils.cs"
  },
  "api/Nautilus.Utility.IOUtilities.html": {
    "href": "api/Nautilus.Utility.IOUtilities.html",
    "title": "Class IOUtilities",
    "keywords": "Class IOUtilities Namespace Nautilus.Utility Assembly Nautilus.dll Utilities for files and paths. public static class IOUtilities Inheritance object IOUtilities Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Combine(string, string, params string[]) Works like Combine(string, string), but can have more than 2 paths public static string Combine(string one, string two, params string[] rest) Parameters one string two string rest string[] Returns string"
  },
  "api/Nautilus.Utility.ItemStorageHelper.html": {
    "href": "api/Nautilus.Utility.ItemStorageHelper.html",
    "title": "Class ItemStorageHelper",
    "keywords": "Class ItemStorageHelper Namespace Nautilus.Utility Assembly Nautilus.dll A utility class that offers additional info about ItemsContainer instances. public static class ItemStorageHelper Inheritance object ItemStorageHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAllowedTechTypes(ItemsContainer) Gets the set of techtypes allowed in this container. This set can be altered. If the set is null or empty, then all items can be added. public static HashSet<TechType> GetAllowedTechTypes(ItemsContainer container) Parameters container ItemsContainer The container to check. Returns HashSet<TechType> The collection of techtypes allowed in the container. See Also StorageHelper GetStorageLabel(ItemsContainer) Get the inernal label for the storage container. public static string GetStorageLabel(ItemsContainer container) Parameters container ItemsContainer The container. Returns string The label used and displayed in-game for the container. See Also StorageHelper GetTotalSlots(ItemsContainer) The totals number of 1x1 slots in the container, as calculated by the container's width and height. public static int GetTotalSlots(ItemsContainer container) Parameters container ItemsContainer The container. Returns int See Also StorageHelper HasRoomForCached(ItemsContainer, int, int) Using the cached container info, determines whether the specified container has room for an item of the specified size. public static bool HasRoomForCached(ItemsContainer container, int width, int height) Parameters container ItemsContainer The container to check. width int The item width. height int The item height. Returns bool true if there is room for the item in the container,; otherwise, false. See Also StorageHelper HasRoomForCached(ItemsContainer, Vector2int) Using the cached container info, determines whether the specified container has room for an item of the specified size. public static bool HasRoomForCached(ItemsContainer container, Vector2int itemSize) Parameters container ItemsContainer The container to check. itemSize Vector2int Size of the item. Returns bool true if there is room for the item in the container,; otherwise, false. See Also StorageHelper IsEmpty(ItemsContainer) Determines whether the specified container is empty. public static bool IsEmpty(ItemsContainer container) Parameters container ItemsContainer The items container to check. Returns bool true if the specified container is empty; otherwise, false. See Also StorageHelper IsFull(ItemsContainer) Determines whether the specified container is full. public static bool IsFull(ItemsContainer container) Parameters container ItemsContainer The items container to check. Returns bool true if the specified container is full; otherwise, false. See Also StorageHelper See Also StorageHelper"
  },
  "api/Nautilus.Utility.JsonUtils.html": {
    "href": "api/Nautilus.Utility.JsonUtils.html",
    "title": "Class JsonUtils",
    "keywords": "Class JsonUtils Namespace Nautilus.Utility Assembly Nautilus.dll A collection of utilities for interacting with JSON files. public static class JsonUtils Inheritance object JsonUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load<T>(string, bool, params JsonConverter[]) Create an instance of T, populated with data from the JSON file at the given path. public static T Load<T>(string path = null, bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) where T : class, new() Parameters path string The path on disk at which the JSON file can be found. createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] An array of Newtonsoft.Json.JsonConverters to be used for deserialization. Returns T The T instance populated with data from the JSON file at path, or default values if it cannot be found or an error is encountered while parsing the file. Type Parameters T The type of object to initialise and populate with JSON data. See Also Load<T>(T, string, bool, params JsonConverter[]) Save<T>(T, string, params JsonConverter[]) Load<T>(T, string, bool, params JsonConverter[]) Loads data from the JSON file at path into the jsonObject. public static void Load<T>(T jsonObject, string path = null, bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) where T : class Parameters jsonObject T The T instance to popular with JSON data. path string The path on disk at which the JSON file can be found. createFileIfNotExist bool Whether a new JSON file should be created with default values if it does not already exist. jsonConverters JsonConverter[] An array of Newtonsoft.Json.JsonConverters to be used for deserialization. Type Parameters T The type of jsonObject to populate with JSON data. See Also Load<T>(string, bool, params JsonConverter[]) Save<T>(T, string, params JsonConverter[]) Save<T>(T, string, params JsonConverter[]) Saves the jsonObject parsed as JSON data to the JSON file at path, creating it if it does not exist. public static void Save<T>(T jsonObject, string path = null, params JsonConverter[] jsonConverters) where T : class Parameters jsonObject T The T instance to parse into JSON data. path string The path on disk at which to store the JSON file. jsonConverters JsonConverter[] An array of Newtonsoft.Json.JsonConverters to be used for serialization. Type Parameters T The type of jsonObject to parse into JSON data. See Also Load<T>(T, string, bool, params JsonConverter[]) Load<T>(string, bool, params JsonConverter[])"
  },
  "api/Nautilus.Utility.KeyCodeUtils.html": {
    "href": "api/Nautilus.Utility.KeyCodeUtils.html",
    "title": "Class KeyCodeUtils",
    "keywords": "Class KeyCodeUtils Namespace Nautilus.Utility Assembly Nautilus.dll A collection of UnityEngine.KeyCode related utility methods. public static class KeyCodeUtils Inheritance object KeyCodeUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAnalogValueForKey(string) Gets the analog value for a key by string value, following the same logic as GameInput.GetAnalogValueForButton(GameInput.Button) public static float GetAnalogValueForKey(string s) Parameters s string Returns float 1f while a key is being held, otherwise 0f See Also GetAnalogValueForKey(KeyCode) GetAnalogValueForKey(KeyCode) Gets the analog value for a UnityEngine.KeyCode following the same logic as GameInput.GetAnalogValueForButton(GameInput.Button) public static float GetAnalogValueForKey(this KeyCode keyCode) Parameters keyCode KeyCode Returns float 1f while a key is being held, otherwise 0f See Also KeyCode GetAnalogValueForKey(string) GetKeyDown(string) Check this is the first frame a key has been pressed. public static bool GetKeyDown(string s) Parameters s string Returns bool True during the first frame a key has been pressed, otherwise false See Also GetKeyDown(KeyCode) GetKeyDown(KeyCode) Check this is the first frame a key has been pressed public static bool GetKeyDown(this KeyCode keyCode) Parameters keyCode KeyCode Returns bool True during the first frame a key has been pressed, otherwise false See Also KeyCode GetKeyDown(string) GetKeyHeld(string) Check a key is currently held down public static bool GetKeyHeld(string s) Parameters s string Returns bool True every frame a key is held down, otherwise false See Also GetKeyHeld(KeyCode) GetKeyHeld(KeyCode) Check a key is currently held down public static bool GetKeyHeld(this KeyCode keyCode) Parameters keyCode KeyCode Returns bool True every frame a key is held down, otherwise false See Also KeyCode GetKeyHeld(string) GetKeyHeldTime(string) Check how long a key has been held down public static float GetKeyHeldTime(string s) Parameters s string Returns float See Also GetKeyHeldTime(KeyCode) GetKeyHeldTime(KeyCode) Check how long a key has been held down public static float GetKeyHeldTime(this KeyCode keyCode) Parameters keyCode KeyCode Returns float See Also KeyCode GetKeyHeldTime(string) GetKeyUp(string) Check this is the first frame a key has been released public static bool GetKeyUp(string s) Parameters s string Returns bool True during the first frame a key has been released, otherwise false See Also GetKeyUp(KeyCode) GetKeyUp(KeyCode) Check this is the frame a key has been released public static bool GetKeyUp(this KeyCode keyCode) Parameters keyCode KeyCode Returns bool True during the first frame a key has been released, otherwise false See Also KeyCode GetKeyUp(string) KeyCodeToString(KeyCode) Turn a UnityEngine.KeyCode into a string public static string KeyCodeToString(this KeyCode keyCode) Parameters keyCode KeyCode Returns string StringToKeyCode(string) Turn a string into a UnityEngine.KeyCode public static KeyCode StringToKeyCode(string s) Parameters s string Returns KeyCode"
  },
  "api/Nautilus.Utility.MaterialModifiers.ColorModifier.html": {
    "href": "api/Nautilus.Utility.MaterialModifiers.ColorModifier.html",
    "title": "Class ColorModifier",
    "keywords": "Class ColorModifier Namespace Nautilus.Utility.MaterialModifiers Assembly Nautilus.dll Basic material modifier that sets the UnityEngine.Material.color property on all materials. public sealed class ColorModifier : MaterialModifier Inheritance object MaterialModifier ColorModifier Inherited Members MaterialModifier.BlockShaderConversion(Material, Renderer, MaterialUtils.MaterialType) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors ColorModifier(Color) Sets the UnityEngine.Material.color property on all materials. public ColorModifier(Color color) Parameters color Color Methods EditMaterial(Material, Renderer, int, MaterialType) Applies the color changes to the material. public override void EditMaterial(Material material, Renderer renderer, int materialIndex, MaterialUtils.MaterialType materialType) Parameters material Material renderer Renderer materialIndex int materialType MaterialUtils.MaterialType"
  },
  "api/Nautilus.Utility.MaterialModifiers.html": {
    "href": "api/Nautilus.Utility.MaterialModifiers.html",
    "title": "Namespace Nautilus.Utility.MaterialModifiers",
    "keywords": "Namespace Nautilus.Utility.MaterialModifiers Classes ColorModifier Basic material modifier that sets the UnityEngine.Material.color property on all materials. MaterialModifier Base class for material modifiers. Can be overriden to implement custom behaviour."
  },
  "api/Nautilus.Utility.MaterialModifiers.MaterialModifier.html": {
    "href": "api/Nautilus.Utility.MaterialModifiers.MaterialModifier.html",
    "title": "Class MaterialModifier",
    "keywords": "Class MaterialModifier Namespace Nautilus.Utility.MaterialModifiers Assembly Nautilus.dll Base class for material modifiers. Can be overriden to implement custom behaviour. public abstract class MaterialModifier Inheritance object MaterialModifier Derived ColorModifier Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Methods BlockShaderConversion(Material, Renderer, MaterialType) Method called before any shader conversions and material modifiers are applied. By default returns false. If true is returned from ANY MaterialModifier, the shader of material will not be converted to MarmosetUBER. However, all modifiers will still be applied normally. public virtual bool BlockShaderConversion(Material material, Renderer renderer, MaterialUtils.MaterialType materialType) Parameters material Material The material being evalauted. renderer Renderer The renderer using the material. materialType MaterialUtils.MaterialType The type of material that this can be expected to be. Determined in ApplySNShaders(GameObject, float, float, float, params MaterialModifier[]) based on specific keywords. Returns bool EditMaterial(Material, Renderer, int, MaterialType) Method called after all other material conversions have finished. public abstract void EditMaterial(Material material, Renderer renderer, int materialIndex, MaterialUtils.MaterialType materialType) Parameters material Material The material being modified. renderer Renderer The renderer using the material. materialIndex int The index of the given material in its UnityEngine.Renderer. materialType MaterialUtils.MaterialType The type of material that this can be expected to be. Determined in ApplySNShaders(GameObject, float, float, float, params MaterialModifier[]) based on specific keywords."
  },
  "api/Nautilus.Utility.MaterialUtils.html": {
    "href": "api/Nautilus.Utility.MaterialUtils.html",
    "title": "Class MaterialUtils",
    "keywords": "Class MaterialUtils Namespace Nautilus.Utility Assembly Nautilus.dll Utilities related to Materials and Shaders. public static class MaterialUtils Inheritance object MaterialUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields kOpaqueRenderQueue Render queue used by opaque objects. public const int kOpaqueRenderQueue = 2000 Field Value int kTransparencyRenderQueue Render queue used by transparent objects. public const int kTransparencyRenderQueue = 3101 Field Value int Properties AirWaterBarrierMaterial Gets the Material used by Alien Bases for the transition between water and air. public static Material AirWaterBarrierMaterial { get; } Property Value Material ForceFieldMaterial Gets the Precursor Force Field Material. public static Material ForceFieldMaterial { get; } Property Value Material GhostMaterial Gets the material used by unfinished constructions. public static Material GhostMaterial { get; } Property Value Material IonCubeMaterial Gets the default Ion Cube Material. public static Material IonCubeMaterial { get; } Property Value Material PrecursorGlassMaterial Gets the Precursor Glass Material. public static Material PrecursorGlassMaterial { get; } Property Value Material StasisFieldMaterial Gets the Stasis Rifle's ball Material. public static Material StasisFieldMaterial { get; } Property Value Material Methods ApplySNShaders(GameObject, float, float, float, params MaterialModifier[]) Applies the necessary settings for Subnautica's standard shader (MarmosetUBER) to the passed UnityEngine.GameObject. The specific changes to each material are influenced by certain keywords in their asset names: \"TRANSPARENT\": Enables transparency. \"CUTOUT\": Enables alpha clipping. public static void ApplySNShaders(GameObject gameObject, float shininess = 4, float specularIntensity = 1, float glowStrength = 1, params MaterialModifier[] modifiers) Parameters gameObject GameObject The UnityEngine.GameObject to apply the shaders to (includes all children). shininess float '_Shininess' value of the shader. Recommended range of 1.0f-8.0f. specularIntensity float '_SpecularInt' value of the shader. Values around 1f are recommended. glowStrength float '_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high. modifiers MaterialModifier[] Optional array of classes that inherit from the MaterialModifier class. This allows for extensive customization of the method. Called in ascending order on every material. ApplyUBERShader(Material, float, float, float, MaterialType) Applies the MarmosetUBER Shader to the given material. public static void ApplyUBERShader(Material material, float shininess, float specularIntensity, float glowStrength, MaterialUtils.MaterialType materialType) Parameters material Material The material to apply changes to. shininess float '_Shininess' value of the shader. Recommended range of 1.0f-8.0f. specularIntensity float '_SpecularInt' value of the shader. Values around 1f are recommended. glowStrength float '_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high. materialType MaterialUtils.MaterialType Controls various settings including alpha clipping and transparency. SetMaterialCutout(Material, bool) Toggle alpha clipping on a material. Incompatbile with transparency. public static void SetMaterialCutout(Material material, bool cutout) Parameters material Material cutout bool SetMaterialTransparent(Material, bool) Toggle the transparency on a material. public static void SetMaterialTransparent(Material material, bool transparent) Parameters material Material transparent bool"
  },
  "api/Nautilus.Utility.MaterialUtils.MaterialType.html": {
    "href": "api/Nautilus.Utility.MaterialUtils.MaterialType.html",
    "title": "Enum MaterialUtils.MaterialType",
    "keywords": "Enum MaterialUtils.MaterialType Namespace Nautilus.Utility Assembly Nautilus.dll Enum for some generic types of Materials. public enum MaterialUtils.MaterialType Extension Methods EnumExtensions.IsDefinedByDefault<TEnum>(TEnum) Fields Cutout = 2 Transparent pixels on the texture are not renderered. Useful for decals. Opaque = 0 Solid material with no transparency. Transparent = 1 See-through material."
  },
  "api/Nautilus.Utility.MaterialUtils.Shaders.html": {
    "href": "api/Nautilus.Utility.MaterialUtils.Shaders.html",
    "title": "Class MaterialUtils.Shaders",
    "keywords": "Class MaterialUtils.Shaders Namespace Nautilus.Utility Assembly Nautilus.dll Contains references to various Shaders. public static class MaterialUtils.Shaders Inheritance object MaterialUtils.Shaders Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties IonCube The UnityEngine.Shader that is used for Ion Cubes. public static Shader IonCube { get; } Property Value Shader MarmosetUBER The UnityEngine.Shader that is used for most materials in the game. public static Shader MarmosetUBER { get; } Property Value Shader ParticlesUBER The UnityEngine.Shader that is used for most particle systems. public static Shader ParticlesUBER { get; } Property Value Shader"
  },
  "api/Nautilus.Utility.PlayerPrefsExtra.html": {
    "href": "api/Nautilus.Utility.PlayerPrefsExtra.html",
    "title": "Class PlayerPrefsExtra",
    "keywords": "Class PlayerPrefsExtra Namespace Nautilus.Utility Assembly Nautilus.dll A collection of utility methods that simplify calls into UnityEngine.PlayerPrefs for quick custom save data. public static class PlayerPrefsExtra Inheritance object PlayerPrefsExtra Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetBool(string, bool) Get a bool value using UnityEngine.PlayerPrefs public static bool GetBool(string key, bool defaultValue) Parameters key string defaultValue bool Returns bool GetColor(string) Get a UnityEngine.Color value using UnityEngine.PlayerPrefs public static Color GetColor(string key) Parameters key string Returns Color GetColor(string, Color) Get a UnityEngine.Color value using UnityEngine.PlayerPrefs public static Color GetColor(string key, Color defaultValue) Parameters key string defaultValue Color Returns Color GetKeyCode(string, KeyCode) Get a UnityEngine.KeyCode value using UnityEngine.PlayerPrefs public static KeyCode GetKeyCode(string key, KeyCode defaultValue) Parameters key string defaultValue KeyCode Returns KeyCode GetQuaternion(string) Get a UnityEngine.Quaternion value using UnityEngine.PlayerPrefs public static Quaternion GetQuaternion(string key) Parameters key string Returns Quaternion GetQuaternion(string, Quaternion) Get a UnityEngine.Quaternion value using UnityEngine.PlayerPrefs public static Quaternion GetQuaternion(string key, Quaternion defaultValue) Parameters key string defaultValue Quaternion Returns Quaternion GetVector2(string) Get a UnityEngine.Vector2 value using UnityEngine.PlayerPrefs public static Vector2 GetVector2(string key) Parameters key string Returns Vector2 GetVector2(string, Vector2) Get a UnityEngine.Vector2 value using UnityEngine.PlayerPrefs public static Vector2 GetVector2(string key, Vector2 defaultValue) Parameters key string defaultValue Vector2 Returns Vector2 GetVector2int(string) Get a Vector2int value using UnityEngine.PlayerPrefs public static Vector2int GetVector2int(string key) Parameters key string Returns Vector2int GetVector2int(string, Vector2int) Get a Vector2int value using UnityEngine.PlayerPrefs public static Vector2int GetVector2int(string key, Vector2int defaultValue) Parameters key string defaultValue Vector2int Returns Vector2int GetVector3(string) Get a UnityEngine.Vector3 value using UnityEngine.PlayerPrefs public static Vector3 GetVector3(string key) Parameters key string Returns Vector3 GetVector3(string, Vector3) Get a UnityEngine.Vector3 value using UnityEngine.PlayerPrefs public static Vector3 GetVector3(string key, Vector3 defaultValue) Parameters key string defaultValue Vector3 Returns Vector3 GetVector4(string) Get a UnityEngine.Vector4 value using UnityEngine.PlayerPrefs public static Vector4 GetVector4(string key) Parameters key string Returns Vector4 GetVector4(string, Vector4) Get a UnityEngine.Vector4 value using UnityEngine.PlayerPrefs public static Vector4 GetVector4(string key, Vector4 defaultValue) Parameters key string defaultValue Vector4 Returns Vector4 SetBool(string, bool) Set a bool value using UnityEngine.PlayerPrefs public static void SetBool(string key, bool value) Parameters key string value bool SetColor(string, Color) Set a UnityEngine.Color value using UnityEngine.PlayerPrefs public static void SetColor(string key, Color value) Parameters key string value Color SetKeyCode(string, KeyCode) Set a UnityEngine.KeyCode value using UnityEngine.PlayerPrefs public static void SetKeyCode(string key, KeyCode value) Parameters key string value KeyCode SetQuaternion(string, Quaternion) Set a UnityEngine.Quaternion value using UnityEngine.PlayerPrefs public static void SetQuaternion(string key, Quaternion value) Parameters key string value Quaternion SetVector2(string, Vector2) Set a UnityEngine.Vector2 value using UnityEngine.PlayerPrefs public static void SetVector2(string key, Vector2 value) Parameters key string value Vector2 SetVector2int(string, Vector2int) Set a Vector2int value using UnityEngine.PlayerPrefs public static void SetVector2int(string key, Vector2int value) Parameters key string value Vector2int SetVector3(string, Vector3) Set a UnityEngine.Vector3 value using UnityEngine.PlayerPrefs public static void SetVector3(string key, Vector3 value) Parameters key string value Vector3 SetVector4(string, Vector4) Set a UnityEngine.Vector4 value using UnityEngine.PlayerPrefs public static void SetVector4(string key, Vector4 value) Parameters key string value Vector4"
  },
  "api/Nautilus.Utility.PrefabUtils.html": {
    "href": "api/Nautilus.Utility.PrefabUtils.html",
    "title": "Class PrefabUtils",
    "keywords": "Class PrefabUtils Namespace Nautilus.Utility Assembly Nautilus.dll A small collection of prefab related utilities. public static class PrefabUtils Inheritance object PrefabUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddBasicComponents(GameObject, string, TechType, CellLevel) Adds and configures the following components on the prefab. - PrefabIdentifier: Required for an object to be considered a prefab. - TechTag: Required for inventory items, crafting, scanning, etc. - LargeWorldEntity: Required for objects to persist after saving and exiting. - SkyApplier: Added if Renderers exist in the hierarchy. Applies the correct lighting onto an object. public static void AddBasicComponents(GameObject prefab, string classId, TechType techType, LargeWorldEntity.CellLevel cellLevel) Parameters prefab GameObject The prefab to operate on. classId string The class ID associated with the specified prefab. techType TechType Ignored if TechType.None is inputted. cellLevel LargeWorldEntity.CellLevel Level of distance this prefab can stay visible before unloading. AddConstructable(GameObject, TechType, ConstructableFlags) Adds and configures the Constructable component on the specified prefab. public static Constructable AddConstructable(GameObject prefab, TechType techType, ConstructableFlags constructableFlags) Parameters prefab GameObject The prefab to operate on. techType TechType The tech type associated with the specified prefab. constructableFlags ConstructableFlags A bitmask comprised of one or more ConstructableFlags that specify how the prefab should be treated during placement. Returns Constructable The added constructable component. AddVFXFabricating(GameObject, string, float, float, Vector3, float, Vector3) Adds the VFXFabricating component onto the child found by pathToModel. public static VFXFabricating AddVFXFabricating(GameObject prefabRoot, string pathToModel, float minY, float maxY, Vector3 posOffset = default, float scaleFactor = 1, Vector3 eulerOffset = default) Parameters prefabRoot GameObject The prefab object that this is applied to. pathToModel string Leave as null or empty to point to the prefab root. Otherwise this is the path to the crafting model Transform, relative to the prefab's root Transform. For example, the Repair Tool's would be `welder_scaled/welder`. minY float The relative y position of where the ghost effect begins, in global coordinates relative to the model's center, taking the posOffset into account. Typically a negative value because the bottom of an object is below its center. You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results. maxY float The relative y position of where the ghost effect ends, in global coordinates relative to the model's center, taking the posOffset into account. Typically a positive value because the top of an object is above its center. You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results. posOffset Vector3 The offset of the model when being crafted (in METERS). This is generally around zero, but the y value may be ajusted up or down a few millimeters to fix clipping/floating issues. scaleFactor float The relative scale of the model. Generally is 1x for most items. eulerOffset Vector3 Rotational offset. Returns VFXFabricating The added component."
  },
  "api/Nautilus.Utility.ReflectionHelper.html": {
    "href": "api/Nautilus.Utility.ReflectionHelper.html",
    "title": "Class ReflectionHelper",
    "keywords": "Class ReflectionHelper Namespace Nautilus.Utility Assembly Nautilus.dll An extension method class for simplifying reflection calls for improved readability. public static class ReflectionHelper Inheritance object ReflectionHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CopyFields<T>(T, T, BindingFlags) Does a deep copy of all field values from the original instance onto the copied instance. public static void CopyFields<T>(this T original, T copy, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters original T The original instance. copy T The instance receiving the copied values. bindingFlags BindingFlags The additional binding flags you wish to set. Instance is already included. Type Parameters T The class type of both objects. GetInstanceField<T>(T, string, BindingFlags) Gets the value of the requested private field, using reflection, from the instance object. public static object GetInstanceField<T>(this T instance, string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. fieldName string Name of the private field. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Instance are already included. Returns object The value of the requested field as an object. Type Parameters T The instance class type. GetInstanceMethod<T>(string, BindingFlags) Gets the MethodInfo of a private instance method, using refelction, from the specified class. public static MethodInfo GetInstanceMethod<T>(string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters methodName string Name of the method. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Instance are already included. Returns MethodInfo The MethodInfo of the requested private method. Type Parameters T The instance object type. GetInstanceMethod<T>(T, string, BindingFlags) Gets the MethodInfo of a private instance method, using refelction, from the instance object. public static MethodInfo GetInstanceMethod<T>(this T instance, string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. methodName string Name of the method. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Instance are already included. Returns MethodInfo The MethodInfo of the requested private method. Type Parameters T The instance object type. GetStaticField<T>(string, BindingFlags) Gets the value of the requested private static field, using reflection, from the static object. public static object GetStaticField<T>(string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters fieldName string Name of the field. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Returns object The value of the requested static field as an object. Type Parameters T The static class type. GetStaticField<T>(T, string, BindingFlags) Gets the value of the requested private static field, using reflection, from the instance object. public static object GetStaticField<T>(this T instance, string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. fieldName string Name of the field. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Returns object The value of the requested static field as an object. Type Parameters T The static class type. GetStaticMethod<T>(string, BindingFlags) Gets the MethodInfo of a private static method, using refelction, from the specified class. public static MethodInfo GetStaticMethod<T>(string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters methodName string Name of the method. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Returns MethodInfo The MethodInfo of the requested private method. Type Parameters T The object type. GetStaticMethod<T>(T, string, BindingFlags) Gets the MethodInfo of a private static method, using refelction, from the instance object. public static MethodInfo GetStaticMethod<T>(this T instance, string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. methodName string Name of the method. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Returns MethodInfo The MethodInfo of the requested private method. Type Parameters T The object type. SetInstanceField<T>(T, string, object, BindingFlags) Sets the value of the requested private field, using reflection, on the instance object. public static void SetInstanceField<T>(this T instance, string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. fieldName string Name of the private field. value object The value to set. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Instance are already included. Type Parameters T The instance class type. SetStaticField<T>(string, object, BindingFlags) Sets the value of the requested private static field, using reflection, on the static object. public static void SetStaticField<T>(string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters fieldName string Name of the field. value object The value to set. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Type Parameters T The static class type. SetStaticField<T>(T, string, object, BindingFlags) Sets the value of the requested private static field, using reflection, on the instance object. public static void SetStaticField<T>(this T instance, string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters instance T The instance. fieldName string Name of the field. value object The value to set. bindingFlags BindingFlags The additional binding flags you wish to set. NonPublic and Static are already included. Type Parameters T The static class type."
  },
  "api/Nautilus.Utility.SaveUtils.html": {
    "href": "api/Nautilus.Utility.SaveUtils.html",
    "title": "Class SaveUtils",
    "keywords": "Class SaveUtils Namespace Nautilus.Utility Assembly Nautilus.dll A small collection of save data related utilities. public static class SaveUtils Inheritance object SaveUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetCurrentSaveDataDir() Returns the path to the current save slot's directory. public static string GetCurrentSaveDataDir() Returns string RegisterOnLoadEvent(Action) Registers a simple Action method to invoke the first time the player loads a saved game via the in game menu. public static void RegisterOnLoadEvent(Action onLoadAction) Parameters onLoadAction Action The method to invoke. This action will not be invoked a second time. RegisterOnQuitEvent(Action) Registers a simple Action method to invoke whenever the player quits the game via the in game menu. public static void RegisterOnQuitEvent(Action onQuitAction) Parameters onQuitAction Action The method to invoke. RegisterOnSaveEvent(Action) Registers a simple Action method to invoke whenever the player saves the game via the in game menu. public static void RegisterOnSaveEvent(Action onSaveAction) Parameters onSaveAction Action The method to invoke. RegisterOneTimeUseOnLoadEvent(Action) Registers a simple Action method to invoke the first time the player loads a saved game via the in game menu. public static void RegisterOneTimeUseOnLoadEvent(Action onLoadAction) Parameters onLoadAction Action The method to invoke. This action will not be invoked a second time. RegisterOneTimeUseOnQuitEvent(Action) Registers a simple Action method to invoke the first time the player quits the game via the in game menu. public static void RegisterOneTimeUseOnQuitEvent(Action onQuitAction) Parameters onQuitAction Action The method to invoke. This action will not be invoked a second time. RegisterOneTimeUseOnSaveEvent(Action) Registers a simple Action method to invoke the first time the player saves the game via the in game menu. public static void RegisterOneTimeUseOnSaveEvent(Action onSaveAction) Parameters onSaveAction Action The method to invoke. This action will not be invoked a second time. UnregisterOnLoadEvent(Action) Removes a method previously added through RegisterOnLoadEvent(Action) so it is no longer invoked when loading the game. If you plan on using this, do not register an anonymous method. public static void UnregisterOnLoadEvent(Action onLoadAction) Parameters onLoadAction Action The method invoked. UnregisterOnQuitEvent(Action) Removes a method previously added through RegisterOnSaveEvent(Action) so it is no longer invoked when quiting the game. If you plan on using this, do not register an anonymous method. public static void UnregisterOnQuitEvent(Action onQuitAction) Parameters onQuitAction Action The method invoked. UnregisterOnSaveEvent(Action) Removes a method previously added through RegisterOnSaveEvent(Action) so it is no longer invoked when saving the game. If you plan on using this, do not register an anonymous method. public static void UnregisterOnSaveEvent(Action onSaveAction) Parameters onSaveAction Action The method invoked."
  },
  "api/Nautilus.Utility.SelfCheckingDictionary-2.html": {
    "href": "api/Nautilus.Utility.SelfCheckingDictionary-2.html",
    "title": "Class SelfCheckingDictionary<K, V>",
    "keywords": "Class SelfCheckingDictionary<K, V> Namespace Nautilus.Utility Assembly Nautilus.dll This dictionary structure automatically checks for duplicate keys as they are being added to the collection. Duplicate entries are logged and removed from the final collection. public class SelfCheckingDictionary<K, V> : IDictionary<K, V>, ICollection<KeyValuePair<K, V>>, IEnumerable<KeyValuePair<K, V>>, IEnumerable Type Parameters K The Key Type V The Value Type Inheritance object SelfCheckingDictionary<K, V> Implements IDictionary<K, V> ICollection<KeyValuePair<K, V>> IEnumerable<KeyValuePair<K, V>> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods JsonExtensions.LoadJson<T>(T, string, bool, params JsonConverter[]) JsonExtensions.SaveJson<T>(T, string, params JsonConverter[]) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) ReflectionHelper.GetInstanceField<T>(T, string, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, string, BindingFlags) ReflectionHelper.GetStaticField<T>(T, string, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, string, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, string, object, BindingFlags) ReflectionHelper.SetStaticField<T>(T, string, object, BindingFlags) Constructors SelfCheckingDictionary(string, IEqualityComparer<K>, Func<K, string>) Creates a SelfCheckingDictionary<K, V> with an EqualityComparer and an optional ToString function. public SelfCheckingDictionary(string collectionName, IEqualityComparer<K> equalityComparer, Func<K, string> toLog = null) Parameters collectionName string equalityComparer IEqualityComparer<K> toLog Func<K, string> SelfCheckingDictionary(string, Func<K, string>) Creates a SelfCheckingDictionary<K, V> with an optional ToString function. public SelfCheckingDictionary(string collectionName, Func<K, string> toLog = null) Parameters collectionName string toLog Func<K, string> Properties Count Gets the number of unique entries in the SelfCheckingDictionary<K, V> public int Count { get; } Property Value int IsReadOnly Defaults to false. public bool IsReadOnly { get; } Property Value bool this[K] Gets a key value pair from the collection or sets a key value pair into the collection. When setting, if a key already exists, the previous entry will be discarded. public V this[K key] { get; set; } Parameters key K The unique key. Property Value V The value corresponding to the key. Keys Gets a collection containing the keys in the SelfCheckingDictionary<K, V> public ICollection<K> Keys { get; } Property Value ICollection<K> Values Gets a collection containing the values in the SelfCheckingDictionary<K, V> public ICollection<V> Values { get; } Property Value ICollection<V> Methods Add(KeyValuePair<K, V>) Add a new entry the collection. If a duplicate key is found, the new value will be discarded. public void Add(KeyValuePair<K, V> item) Parameters item KeyValuePair<K, V> The key value pair. Add(K, V) Add a new entry the collection. If a duplicate key is found, the new value will be discarded. public void Add(K key, V value) Parameters key K The unique key. value V The value. Clear() public void Clear() Contains(KeyValuePair<K, V>) public bool Contains(KeyValuePair<K, V> item) Parameters item KeyValuePair<K, V> Returns bool ContainsKey(K) public bool ContainsKey(K key) Parameters key K Returns bool CopyTo(KeyValuePair<K, V>[], int) public void CopyTo(KeyValuePair<K, V>[] array, int arrayIndex) Parameters array KeyValuePair<K, V>[] arrayIndex int GetEnumerator() public IEnumerator<KeyValuePair<K, V>> GetEnumerator() Returns IEnumerator<KeyValuePair<K, V>> Remove(KeyValuePair<K, V>) public bool Remove(KeyValuePair<K, V> item) Parameters item KeyValuePair<K, V> Returns bool Remove(K) public bool Remove(K key) Parameters key K Returns bool TryGetValue(K, out V) public bool TryGetValue(K key, out V value) Parameters key K value V Returns bool"
  },
  "api/Nautilus.Utility.StorageHelperExtensions.html": {
    "href": "api/Nautilus.Utility.StorageHelperExtensions.html",
    "title": "Class StorageHelperExtensions",
    "keywords": "Class StorageHelperExtensions Namespace Nautilus.Utility Assembly Nautilus.dll Extension methods to provide static calls for ItemsContainer into ItemStorageHelper methods. public static class StorageHelperExtensions Inheritance object StorageHelperExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetAllowedTechTypes(ItemsContainer) Gets the set of techtypes allowed in this container. This set can be altered. If the set is null or empty, then all items can be added. public static HashSet<TechType> GetAllowedTechTypes(ItemsContainer container) Parameters container ItemsContainer The container to check. Returns HashSet<TechType> The collection of techtypes allowed in the container. GetStorageLabel(ItemsContainer) Get the inernal label for the storage container. public static string GetStorageLabel(ItemsContainer container) Parameters container ItemsContainer The container. Returns string The label used and displayed in-game for the container. GetTotalSlots(ItemsContainer) The totals number of 1x1 slots in the container, as calculated by the container's width and height. public static int GetTotalSlots(ItemsContainer container) Parameters container ItemsContainer The container. Returns int HasRoomCached(ItemsContainer, int, int) Using the cached container info, determines whether the specified container has room for an item of the specified size. public static bool HasRoomCached(this ItemsContainer container, int width, int height) Parameters container ItemsContainer The container to check. width int The item width. height int The item height. Returns bool true if there is room for the item in the container,; otherwise, false. HasRoomCached(ItemsContainer, Vector2int) Using the cached container info, determines whether the specified container has room for an item of the specified size. public static bool HasRoomCached(this ItemsContainer container, Vector2int itemSize) Parameters container ItemsContainer The container to check. itemSize Vector2int Size of the item. Returns bool true if there is room for the item in the container,; otherwise, false. IsEmpty(ItemsContainer) Determines whether the specified container is empty. public static bool IsEmpty(this ItemsContainer container) Parameters container ItemsContainer The items container to check. Returns bool true if the specified container is empty; otherwise, false. IsFull(ItemsContainer) Determines whether the specified container is full. public static bool IsFull(this ItemsContainer container) Parameters container ItemsContainer The items container to check. Returns bool true if the specified container is full; otherwise, false."
  },
  "guides/dev-setup.html": {
    "href": "guides/dev-setup.html",
    "title": "Development Setup Guide",
    "keywords": "Development Setup Guide This article covers a step-by-step guide of setting up your pc for Subnautica mod development. Please note that this setup works on any operating system, so if you're using a non-windows machine, don't worry! You're in the right place! Note Although we try to keep this guide as comprehensible as possible, we will not cover a C# tutorial. So a basic understanding of the language is still required. .NET Academy covers the basics in a simple interactable tutorial. If you need a more in-depth C# tutorial, the Giraffe Academy video is a good start. To start developing, you will need to install some tools first: Latest .NET SDK An integrated development environment (IDE) BepInEx 5.4.21 Nautilus .NET SDK .NET software development kit (SDK) is the main component of starting to write C# code. The SDK will take care of compiling our code, as well as enable the latest C# version features. In Nautilus we always make sure to update to the latest C# versions. To enable numerous inspection warnings and convenience while working with Nautilus, we recommend you to update the .NET SDK to the latest version. Tip Microsoft usually schedules their .NET Core releases around November every year. To install .NET SDK: Head to the .NET download page Select the latest recommended .NET SDK Download and run the installer. A restart may be needed to take place afterward. To ensure that the SDK has installed correctly, open a terminal and run the following line: dotnet --version Output: 7.0.102 Picking an IDE The top 3 IDEs for writing C# code are the following: Visual Studio Community - Free, great IDE designed for .NET development (Windows and Mac only) JetBrains Rider - Paid, outstanding IDE, incredible code-completion and code suggestions with the power of ReSharper, cross-platform Visual Studio Code - Free, multi-purpose editor, cross-platform, can be used for C# development with plugins. Installing IDE Visual Studio Community JetBrains Rider Visual Studio Code Download the installer from the Visual Studio download page and run it Inside the Visual Studio installer, ensure the .NET Desktop Development component is selected, then proceed with the installation. Download the installer from the JetBrains Rider download page Run the installer and follow the wizard steps. Download the installer from the VS Code download page and run it Install the .NET extension pack. This pack includes these extensions: C# for Visual Studio Code Ionide for F# Jupyter Notebooks Polyglot Notebooks You can also install extensions separately. Installing BepInEx BepInEx is a mod loader that we use to load Subnautica mods to the game. We recommend using the Subnautica BepInEx Pack as it's configured specifically for the game. The installation process is explained in the provided link. Installing Nautilus Download Nautilus from one of Nexus Mods, Submodica or GitHub Releases. Drop and drop the plugins folder in the zip file to: PathToSubnautica\\BepInEx\\ Installing Subnautica Modding templates Since the project setup can be quite tedious for experienced developers and confusing for new-comers, we have published a series of templates to help you setup your projects more easily. To install the template, run the following command in a terminal: dotnet new -i Subnautica.Templates Once the install is completed, you will receive an output similar to the message below displaying the process as successful. Template Name Short Name Language Tags ---------------------------------------- -------------- -------- --------------------------------------------- Subnautica Empty Template snmod_empty [C#] SNModding/Subnautica/Mod Subnautica Nautilus Template snmod_nautilus [C#] SNModding/Subnautica/Mod/Nautilus Subnautica Template snmod [C#] SNModding/Subnautica/Mod Subnautica: Below Zero Empty Template bzmod_empty [C#] SNModding/Subnautica: Below Zero/Mod Subnautica: Below Zero Nautilus Template bzmod_nautilus [C#] SNModding/Subnautica: Below Zero/Mod/Nautilus Subnautica: Below Zero Template bzmod [C#] SNModding/Subnautica: Below Zero/Mod Below is a description of what each of these templates represent: Template Name Short Name (ID) Description Subnautica Template snmod Contains all the essential configurations, dependencies, and a basic Plugin.cs with the Logger and harmony patcher. Subnautica Empty Template snmod_empty Contains all the essential configurations and dependencies with no additional files. Subnautica Nautilus Template snmod_nautilus Contains all the essential configurations, dependencies with Nautilus installed and a simple example demonstrating the usage of Nautilus. The Subnautica: Below Zero templates contain the exact same configurations as their corresponding Subnautica versions, except they install BZ dependencies instead. Creating a new mod project Once you installed the templates, they will appear among other templates in the \"Create new project\" section of your favorite IDE. You can also create the project using CLI: Subnautica Subnautica: Below Zero dotnet new snmod -n MyBeautifulMod Now you can add more code to the project, then build and put the compiled dll in Subnautica/BepInEx/plugins/. dotnet new bzmod -n MyBeautifulMod Now you can add more code to the project, then build and put the compiled dll in SubnauticaZero/BepInEx/plugins/."
  },
  "guides/overview.html": {
    "href": "guides/overview.html",
    "title": "Guides",
    "keywords": "Guides Development Setup Guide Simple Mod Guide Updating from SML 2.0 to Nautilus"
  },
  "guides/simple-mod.html": {
    "href": "guides/simple-mod.html",
    "title": "Simple Mod Guide",
    "keywords": "Simple Mod Guide In this guide we will make a new knife using Nautilus that knock-backs enemies on-hit. Additionally, we will also create a new mineral and add it to our knife's recipe. Firstly, we will need to setup a development environment. If you haven't already, check out our Development setup guide. Now that we have a development environment, we can create a project using the Subnautica Templates. Visual Studio 2022 JetBrains Rider .NET CLI Open Visual Studio Click on \"Create new project\" Search for \"Nautilus\", click on \"Subnautica Nautilus Template\" or \"Subnautica: Below Zero Nautilus Template\" depending on the game you're trying to mod then hit next Choose a name for your project, then create the project Open JetBrains Rider Click on \"New solution\" At the left section choose \"Subnautica Nautilus Template\" or \"Subnautica: Below Zero Nautilus Template\" depending on the game you're trying to mod Pick a name for your project, then create the project Open a terminal Create a folder for where your project will be stored mkdir YourProjectName Navigate to the new folder using cd YourProjectName Create the project Subnautica: dotnet new snmod_nautilus Subnautica Below Zero: dotnet new bzmod_nautilus The new project should contain the following structure: MyAwesomeMod/Items/Equipment/YeetKnifePrefab.cs MyAwesomeMod/Plugin.cs This template contains the code of a functional knife that knock-backs enemies on strike. This knife can be found in the Modification station. Now that we have the code for the knife, we will make our new custom mineral. Begin by creating a new directory under MyAwesomeMod/Items/ and name it Minerals. Create a new C# file by right clicking on the Minerals folder and call it Coal.cs. The project structure now should look like this: Our Coal mineral will be using the same model as the Nickel Ore. The Coal.cs file should end up looking something like this: public class Coal { // To access the TechType anywhere in the project public static PrefabInfo Info { get; private set; } public static void Register() { Info = PrefabInfo.WithTechType(\"Coal\", \"Coal\", \"Coal that makes me go yes.\"); var coalPrefab = new CustomPrefab(Info); // The model of our coal will use the same one as Nickel's. var coalObj = new CloneTemplate(Info, TechType.Nickel); coalPrefab.SetGameObject(coalObj); // register the coal to the game coalPrefab.Register(); } } Now we need to register this new Coal object into the game. To do that, open the Plugin.cs file and edit it to call the Coal.Register() method // Plugin.cs private void InitializePrefabs() { Coal.Register(); YeetKnifePrefab.Register(); } At this point, our Coal mineral is successfully added to the game. To add it as a recipe to our Yeet Knife, all we'll need to do is to edit the SetRecipe method of the YeetKnifePrefab object. // YeetKnifePrefab.cs ... public static void Register() { var customPrefab = new CustomPrefab(Info); var yeetKnifeObj = new CloneTemplate(Info, TechType.HeatBlade); yeetKnifeObj.ModifyPrefab += obj => { var heatBlade = obj.GetComponent<HeatBlade>(); var yeetKnife = obj.AddComponent<YeetKnife>().CopyComponent(heatBlade); Object.DestroyImmediate(heatBlade); yeetKnife.damage *= 2f; }; customPrefab.SetGameObject(yeetKnifeObj); // Recipe requires 1 Heat blade and 4 Coal. var recipe = new RecipeData(new Ingredient(TechType.HeatBlade), new Ingredient(Coal.Info.TechType, 4)); customPrefab.SetRecipe(recipe) .WithFabricatorType(CraftTree.Type.Workbench); customPrefab.SetEquipment(EquipmentType.Hand); customPrefab.Register(); } Now we can build the project, then put the compiled .dll file into Subnautica/BepInEx/plugins/ and launch the game to run our mod. As can be seen, the Coal does not have an icon and uses the default \"?\" sprite. To set an icon, we can simply call the WithIcon method on our PrefabInfo object. // Coal.cs public static void Register() { // Uses the Nickel Ore icon for the Coal item. Info = PrefabInfo.WithTechType(\"Coal\", \"Coal\", \"Coal that makes me go yes.\").WithIcon(SpriteManager.Get(TechType.Nickel)); var coalPrefab = new CustomPrefab(Info); // The model of our coal will use the same one as Nickel's. var coalObj = new CloneTemplate(Info, TechType.Nickel); coalPrefab.SetGameObject(coalObj); // register the coal to the game coalPrefab.Register(); } You can also set the icon to a .png file by using the ImageUtils class. This reaches the end of this guide. Please check out our Tutorials section to learn more about this library. For more examples, check out our Example mod."
  },
  "guides/sml2-to-nautilus.html": {
    "href": "guides/sml2-to-nautilus.html",
    "title": "Updating to Nautilus",
    "keywords": "Updating to Nautilus In this article, we will be talking about the necessary changes you must apply to update your mod to Nautilus from SMLHelper 2.0. Namespace The root namespace for Nautilus is not the same as SMLHelper 2.0. - <RootNamespace>SMLHelper.V2</RootNamespace> + <RootNamespace>Nautilus</RootNamespace> Handlers Handlers no longer implement an interface matching their name. Additionally, they're now public static. This means they also no longer have a public static Main property anymore, so you will have to drop it from anywhere mentioned in your code. Handler.cs Following the handler interfaces change, the overly under-used Handler class will leave us in Nautilus // Handler.cs - namespace SMLHelper.V2 - { - using Interfaces; - - /// <summary> - /// A simple location where every SMLHelper handler class can be accessed. - /// </summary> - public static class Handler - { - public static IBioReactorHandler BioReactorHandler => Handlers.BioReactorHandler.Main; - - public static ICraftDataHandler CraftDataHandler => Handlers.CraftDataHandler.Main; - - public static ICraftTreeHandler CraftTreeHandler => Handlers.CraftTreeHandler.Main; - - public static IIngameMenuHandler IngameMenuHandler => Handlers.IngameMenuHandler.Main; - ... - } BioReactorHandler The BioReactorHandler class is removed in Nautilus because it only had one very simple method to patch, and was forcing patch-time. That means if you tried to modify a bio charge after SML's entry point, it didn't get applied. The following example demonstrates how you can implement the same functionality the BioReactorHandler class offered. - BioReactorHandler.SetBioreactorCharge(TechType.Peeper, 69f); + BaseBioReactor.charge[TechType.Peeper] = 69f; FishHandler Ever since this class has been added, it never received any further updates due to unpopularity among modders, and unfamiliarity with how creatures worked in general and thus, has been broken for a long time. The FishHandler has been removed in Nautilus. At the time being, we have not added a system to replace it, so stay tuned for that. PDAEncyclopediaHandler And PDALogHandler Beginning with Nautilus, both of these handler methods were moved to PDAHandler as they only had one method each. PDAEncyclopedia.EntryData entry = new PDAEncyclopedia.EntryData() { key = \"SomeEncy\", path = \"Tech/Tools\", nodes = new[] { \"Tech\", \"Tools\" } }; - PDAEncyclopediaHandler.AddCustomEntry(entry); + PDAHandler.AddEncyclopediaEntry(entry); - PDALogHandler.AddCustomEntry(\"SomeLog\", \"SomeLanguageKey\"); + PDAHandler.AddLogEntry(\"SomeLog\", \"SomeLanguageKey\"); InGameMenuHandler The methods InGameMenuHandler class had have been moved to the Nautilus.Utility namespace and the class has been renamed to SaveUtils. - InGameMenuHandler.RegisterOnSaveEvent(() => ErrorMessage.AddMessage(\"We do be saving!\")); + SaveUtils.RegisterOnSaveEvent(() => ErrorMessage.AddMessage(\"We do be saving!\")); Enum Handlers Beginning with Nautilus, enum handling will be made generic. Instead of working with individual handlers associated with the enum type (E.G: For TechType we had TechTypeHandler), Now you can add a new enum value to any enum type by using EnumHandler.AddEntry<TEnum>(string enumName). This means the following handlers are removed: TechTypeHandler BackgroundTypeHandler EquipmentHandler PingTypeHandler TechCategoryHandler TechGroupHandler CraftTreeTypeHandler - Only the methods below are removed: CreateCustomCraftTreeAndType ModdedCraftTreeTypeExists The EnumHandler class contains the following methods, all of them can be used for any enum type: Signature Summary EnumBuilder<TEnum> AddEntry<TEnum>(string name) Adds a new enum value instance of TEnum type. bool ModdedEnumExists<TEnum>(string name) Safely looks for a custom enum object from another mod. bool TryGetValue<TEnum>(string name, out TEnum enumValue) Safely looks for a custom enum object from another mod and outputs the instance if found. Note The EnumHandler class only takes care of registering a new enum object for an enum type. Further configuration is now handled via extension methods for the EnumBuilder type. Below we will talk about the necessary changes you will need to make your custom enum values work for each of the aforementioned handlers. Configuring Custom TechType Objects - TechType customTech = TechTypeHandler.AddTechType(\"CustomTech\", \"Custom Tech\", \"Custom Tech that makes me go yes.\", SpriteManager.Get(TechType.Titanium), unlockedAtStart: false); + TechType customTech = EnumHandler.AddEntry<TechType>(\"CustomTech\") + .WithPdaInfo(\"Custom Tech\", \"Custom Tech that makes me go yes.\", unlockedAtStart: false) + .WithIcon(SpriteManager.Get(TechType.Titanium)); Configuring Custom CraftData.BackgroundType Objects - CraftData.BackgroundType customBG = BackgroundTypeHandler.AddBackgroundType(\"CustomBackground\", SpriteManager.GetBackground(TechType.Battery)); + CraftData.BackgroundType customBG = EnumHandler.AddEntry<CraftData.BackgroundType>(\"CustomBackground\") + .WithBackground(SpriteManager.GetBackground(TechType.Battery)); Configuring Custom EquipmentType Objects - EquipmentType customEquipment = EquipmentHandler.AddEquipmentType(\"CustomEquipment\"); + EquipmentType customEquipment = EnumHandler.AddEntry<EquipmentType>(\"CustomEquipment\"); Configuring Custom PingType Objects - PingType customPing = PingHandler.RegisterNewPingType(\"CustomPing\", SpriteManager.Get(SpriteManager.Group.Pings, PingType.Signal.ToString())); + PingType customPing = EnumHandler.AddEntry<PingType>(\"CustomPing\") + .WithIcon(SpriteManager.Get(SpriteManager.Group.Pings, PingType.Signal.ToString())); Configuring Custom TechCategory and TechGroup Objects - TechGroup customGroup = TechGroupHandler.AddTechCategory(\"CustomGroup\", \"Custom Group\"); + TechGroup customGroup = EnumHandler.AddEntry<TechCategory>(\"CustomGroup\").WithPdaInfo(\"Custom Group\"); - TechCategory customCategory = TechCategoryHandler.AddTechCategory(\"CustomCategory\", \"Custom Category\"); - TechCategoryHandler.TryRegisterTechCategoryToTechGroup(customGroup, customCategory); + TechCategory customCategory = EnumHandler.AddEntry<TechCategory>(\"CustomCategory\").WithPdaInfo(\"Custom Group\") + .RegisterToTechGroup(customGroup); Configuring Custom CraftTree.Type Objects - ModCraftTreeRoot root = CraftTreeHandler.CreateCustomCraftTreeAndType(CustomTree, out CraftTree.Type customTree); + CraftTree.Type customTree = EnumHandler.AddEntry<CraftTree.Type>(\"CustomTree\") + .CreateCraftTreeRoot(out ModCraftTreeRoot root); root.AddTabNode(\"SomeTab\"); Options The Options system backend was largely changed in Nautilus. This rewrite mostly effects the more in-depth options systems leaving the simplest usage(s) more or less untouched. Mods which made use of the ConfigFile attribute system should not require major changes. Mods which extended ModOptions to create their config system will require changes: All individual AddXYZOption methods have been replaced by a single unified generic AddItem method. This method takes a ModOption which can be created using ModXYZOption.Create(...). All individual Options_XXYZChanged methods have been replaced by a single unified OnChanged method. Option specific OnChanged events can be added to each option instead of being forced to use the global OnChange. ModChoiceOption has been made into a generic type ModChoiceOption<T> which can support an array of almost any type and enums. In addition to these Nautilus specific methods there have also been extensions provided to directly create Nautilus OptionItem instances from BepInEx ConfigEntry instances: var bepInExToggle = cfg.Bind<bool>( section: \"Testing boolean\", key: \"A boolean\", defaultValue: true ); AddItem(bepInExToggle.ToModToggleOption()); SML 2.0 public class ModOptionsV2 : ModOptions { public ModOptionsV2() : base(\"My Mod Options\") { OptionsPanelHandler.RegisterModOptions(this); SliderChanged += Options_SliderChanged; ChoiceChanged += Options_ChoiceChagned; } public override void BuildModOptions() { AddSliderOption(id: \"Foo\", label: \"Bar\", minValue: 0, maxValue: 100, value: 50); AddChoiceOption(id: \"Baz\", label: \"Qux\", options: new[] { \"ABC\", \"DEF\", \"XYZ\" }, index: 0); } private void Options_SliderChanged(object sender, SliderChangedEventArgs e) { switch (e.Id) { case \"Foo\": // Do stuff here break; } } private void Options_ChoiceChagned(object sender, ChoiceChangedEventArgs e) { switch (e.Id) { case \"Baz\": // Do stuff here break; } } } Nautilus public class ModOptionsV3 : ModOptions { public ModOptionsV3() : base(\"My Mod Options\") { OptionsPanelHandler.RegisterModOptions(this); OnChanged += GlobalOptions_Changed; var sliderWithChange = ModSliderOption.Create(id: \"Fancy\", label: \"Slider\", minValue: 0, maxValue: 100, value: 50); sliderWithChange.OnChanged += specific_OnChanged; AddItem(sliderWithChange); AddItem(ModSliderOption.Create(id: \"Foo\", label: \"Bar\", minValue: 0, maxValue: 100, value: 50)); AddItem(ModChoiceOption<string>.Create(id: \"Baz\", label: \"Qux\", options: new[] { \"ABC\", \"DEF\", \"XYZ\" }, index: 0)); } private void specific_OnChanged(object sender, SliderChangedEventArgs e) { // Do onChange here } private void GlobalOptions_Changed(object sender, OptionEventArgs e) { switch (e) { case SliderChangedEventArgs sliderArgs: switch (sliderArgs.Id) { case \"Foo\": // Do stuff here break; } break; case ChoiceChangedEventArgs<string> choiceArgs: switch (choiceArgs.Id) { case \"Baz\": // Do stuff here break; } break; } } } Assets The Assets system received a complete rewrite in Nautilus, making it the biggest change of this version. With this rewrite, asset classes are no longer an inherited chain mess, meaning Buildable, Craftable, CustomFabricator, Equipable, FishPrefab, PdaItem, Spawnable and ModPrefab classes have been removed. As of Nautilus, the asset system will have three main parts: Custom Prefabs, Gadgets, and Prefab Templates. The following table represents all the previous asset classes and what they have been replaced with in Nautilus. SML 2.0 (old) Nautilus (new) ModPrefab CustomPrefab Buildable, PdaItem ScanningGadget Equipable EquipmentGadget CustomFabricator FabricatorGadget Craftable CraftingGadget Spawnable ICustomPrefab.SetSpawns Custom Prefabs CustomPrefab is a class that takes care of registering gadgets and also the game object into the game. This class is essentially equivalent to the previous ModPrefab class. It is what you will use to actually make a custom prefab. Gadgets To put it simply, Gadgets are classes that take certain data and register them to the game for our custom prefab item. They are pretty much equivalent to the different asset classes and their properties we had before. Gadgets will be our primary way of interacting with game systems and to add functionality to a tech type and/or class ID. Note Gadgets only interact with tech types and/or class IDs. They don't have any business with a prefab's game object. Prefab Templates Previously on SML 2.0, asset classes optionally also provided game objects (E.G: CustomFabricator). To allow for diversity in the game object template you choose from and also to make it easier to manage such functionality and modularize game objects, we have moved game object templates to their own system: Prefab templates. Prefab templates will be our main way of providing a base game object for custom prefabs. There are a couple of options you can choose from that suit your needs, however, it is not enforced to choose one; you can still build up a game object from scratch. A couple of prefab templates that will be available in Nautilus are the following: CloneTemplate EnergySourceTemplate FabricatorTemplate Custom Prefab Examples In this example, we will demonstrate how you can change an SML 2.0 custom prefab to the Nautilus system. Equipable CustomFabricator SML 2.0 public class SeamothBrineResistanceModule : Equipable { public static TechType TechTypeID { get; protected set; } public SeamothBrineResistanceModule() : base(\"SeamothBrineResistModule\", \"Seamoth brine resistant coating\", \"Makes the Seamoth resistant to corrosive brine pools, by means of a protective coating.\") { OnFinishedPatching += () => { TechTypeID = this.TechType; }; } public override EquipmentType EquipmentType => EquipmentType.SeamothModule; public override TechType RequiredForUnlock => TechType.BaseUpgradeConsole; public override TechGroup GroupForPDA => TechGroup.VehicleUpgrades; public override TechCategory CategoryForPDA => TechCategory.VehicleUpgrades; public override CraftTree.Type FabricatorType => CraftTree.Type.SeamothUpgrades; public override string[] StepsToFabricatorTab => new string[] { \"SeamothModules\" }; public override QuickSlotType QuickSlotType => QuickSlotType.Passive; public override GameObject GetGameObject() { var prefab = CraftData.GetPrefabForTechType(TechType.SeamothElectricalDefense); var obj = GameObject.Instantiate(prefab); return obj; } protected override TechData GetBlueprintRecipe() { return new TechData() { craftAmount = 1, Ingredients = { new Ingredient(TechType.Polyaniline, 1), new Ingredient(TechType.CopperWire, 2), new Ingredient(TechType.AluminumOxide, 2), new Ingredient(TechType.Nickel, 1), }, }; } } Nautilus // Create a custom prefab instance and set the class ID, friendly name, and description respectively var seamothBrineResistanceModule = new CustomPrefab( \"SeamothBrineResistModule\", \"Seamoth brine resistant coating\", \"Makes the Seamoth resistant to corrosive brine pools, by means of a protective coating.\"); // Set our prefab to a clone of the Seamoth electrical defense module seamothBrineResistanceModule.SetGameObject(new CloneTemplate(seamothBrineResistanceModule.Info, TechType.SeamothElectricalDefense)); // Make our item compatible with the seamoth module slot seamothBrineResistanceModule.SetEquipment(EquipmentType.SeamothModule) .WithQuickSlotType(QuickSlotType.Passive); // Make the Vehicle upgrade console a requirement for our item's blueprint ScanningGadget scanning = seamothBrineResistanceModule.SetUnlock(TechType.BaseUpgradeConsole) // Add our item to the Vehicle upgrades category scanning.WithPdaGroupCategory(TechGroup.VehicleUpgrades, TechCategory.VehicleUpgrades); var recipe = new RecipeData() { craftAmount = 1, Ingredients = { new CraftData.Ingredient(TechType.Polyaniline, 1), new CraftData.Ingredient(TechType.CopperWire, 2), new CraftData.Ingredient(TechType.AluminumOxide, 2), new CraftData.Ingredient(TechType.Nickel, 1), }, }; // Add a recipe for our item, as well as add it to the Moonpool fabricator and Seamoth modules tab seamothBrineResistanceModule.SetRecipe(recipe) .WithFabricatorType(CraftTree.Type.SeamothUpgrades) .WithStepsToFabricatorTab(\"SeamothModules\"); // Register our item to the game seamothBrineResistanceModule.Register(); This example is based off of a real mod. You can get access to the full source code here. SML 2.0 public class AbyssFabricator : CustomFabricator { private static Texture2D texture; public override Models Model { get; } = Models.Fabricator; public AbyssFabricator() : base(\"AbyssFabricator\", \"Abyss Fabricator\", \"Abyss Batteries Fabricator\") { OnStartedPatching += () => { texture = ImageUtils.LoadTextureFromFile(Path.Combine(Main.AssetsFolder, \"AbyssFabricatorskin.png\")); }; } public override GameObject GetGameObject() { GameObject prefab = base.GetGameObject(); if (texture != null) { SkinnedMeshRenderer skinnedMeshRenderer = prefab.GetComponentInChildren<SkinnedMeshRenderer>(); skinnedMeshRenderer.material.mainTexture = texture; } return prefab; } protected override TechData GetBlueprintRecipe() { return new TechData { craftAmount = 1, Ingredients = new List<Ingredient> { new Ingredient(TechType.Titanium, 2), new Ingredient(TechType.Quartz, 2), new Ingredient(TechType.JeweledDiskPiece, 1), } }; } protected override Atlas.Sprite GetItemSprite() { return SpriteManager.Get(TechType.Fabricator); } public override TechCategory CategoryForPDA { get; } = TechCategory.InteriorModule; public override TechGroup GroupForPDA { get; } = TechGroup.InteriorModules; } Nautilus // Create a custom prefab instance and set the class ID, friendly name, description and icon respectively var abyssFabricator = new CustomPrefab( \"AbyssFabricator\", \"Abyss Fabricator\", \"Abyss Batteries Fabricator\", SpriteManager.Get(TechType.Fabricator)); // Create a custom crafting tree for this tech type. This method returns a FabricatorGadget, which we can use to customize our crafting tree. For example, to add a new tab or crafting node. var abyssFabCraftTree = abyssFabricator.CreateFabricator(out CraftTree.Type abyssFabType); // Load up the custom main (diffuse) texture from disk. var mainTexture = ImageUtils.LoadTextureFromFile(Path.Combine(AssetsFolder, \"AbyssFabricatorskin.png\")); // Create our fabricator game object. The fabricator game object will use the vanilla Fabricator model, then set the main texture to the texture we loaded earlier. var abyssFabricatorModel = new FabricatorTemplate(abyssFabricator.Info, abyssFabType) { FabricatorModel = FabricatorTemplate.Model.Fabricator, ModifyPrefab = obj => obj.GetComponentInChildren<SkinnedMeshRenderer>().material.mainTexture = mainTexture }; // Sets this prefab's game object to the model we created earlier. abyssFabricator.SetGameObject(abyssFabricatorModel); // Sets the recipe for the fabricator. abyssFabricator.SetRecipe(new RecipeData(new Ingredient(TechType.Titanium, 2), new Ingredient(TechType.Quartz, 2), new Ingredient(TechType.JeweledDiskPiece, 1))); // Adds the fabricator item to the Interior Modules group. This also makes our object buildable. abyssFabricator.SetPdaGroupCategory(TechGroup.InteriorModules, TechCategory.InteriorModule); // Register our item to the game. abyssFabricator.Register(); This example is based off of a real mod. You can get access to the full source code here. Audio and FMOD In the last few versions of SML 2, we made a lot of changes to the audio system SML offered, this was because of FMOD. FMOD is the sound engine Subnautica uses. It is more advanced and flexible compared to the built-in Unity audio system. Since we discovered the best practices and better ways to deal with custom sounds, we have deleted a bunch of previously-obsolete methods from CustomSoundHandler and AudioUtils classes, as well as the SoundChannel enumeration in Nautilus. Beginning with Nautilus, all custom sounds will require a bus instead of a SoundChannel to determine the effects (E.G: reverb, muffling, low-pass, etc..) and the volume slider. Additionally, the PlaySound signature was also modified and renamed to TryPlaySound. - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Music); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.Music, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Voice); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.PDAVoice, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Ambient); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.UnderwaterAmbient, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Master); + if (AudioUtils.TryPlaySound(soundPath, \"bus:/\", out Channel channel)) + { + // do something with channel + } Warning Creating or playing a custom sound on the master bus is il-advised as it is dangerous and has the possibility of breaking the audio for a game session. Try to set an appropriate bus for your sound instead of the master one."
  },
  "index.html": {
    "href": "index.html",
    "title": "Nautilus: Subnautica Modding Library",
    "keywords": "Nautilus: Subnautica Modding Library Nautilus is a modding library that aims to enhance developer productivity by offering common helper utilities as easy to use and robust as possible. Notable systems which Nautilus offers include but not limited to: Adding/editing items, implementing custom sprites & textures, custom audio, Subnautica-style configuration menu, and so much more! ⚠️ Nautilus is only supported on the latest version of Subnautica and Below Zero. If you're playing on the Legacy branch of Steam, use SMLHelper instead. Contributing - Issues"
  },
  "tutorials/background-type.html": {
    "href": "tutorials/background-type.html",
    "title": "How does the game handle background colors for items?",
    "keywords": "How does the game handle background colors for items? The game has a built-in enum called BackgroundType, which sits in the CraftData class. The possible values for this enum are listed below. public enum BackgroundType { Normal, Blueprint, PlantWater, PlantWaterSeed, PlantAir, PlantAirSeed, ExosuitArm } How can I create a custom background type? To create a new custom background type, you will need to register an image as the background for some BackgroundType instance. Fortunately, the custom enums system has made this step really simple. All you will have to do is name your brand new BackgroundType instance, then register an image for it. private void Awake() { var myCustomBackground = EnumHandler.AddEntry<CraftData.BackgroundType>(\"CustomBackground\") .WithBackground(ImageUtils.LoadSpriteFromFile(pathToImage)); } And that's it. Now you can use the new CraftData.BackgroundType instance anywhere you want. How can I change an item's background? To edit an item's background type, you need to call the CraftDataHandler.SetBackgroundType method sitting in the Nautilus.Handlers namespace Examples The following example demonstrates the usage of SetBackgroundType That makes the titanium background color green. CraftDataHandler.SetBackgroundType(TechType.Titanium, CraftData.BackgroundType.PlantAirSeed); Similarly, if we wanted to set the titanium's background to our custom background from earlier, it would look like the following: CraftDataHandler.SetBackgroundType(TechType.Titanium, myCustomBackground);"
  },
  "tutorials/console-commands.html": {
    "href": "tutorials/console-commands.html",
    "title": "Adding Custom Console Commands",
    "keywords": "Adding Custom Console Commands Nautilus provides a simple API for allowing you to define custom console commands for your mod to respond to when the user types them into the in-game dev console, with simple parameter type checking to enable user- and developer-friendly error reporting, both on-screen and in the log. Supported Parameter Types Currently, only the following types are supported by the API: string bool int float double If you wish to use a type not in this list, it is recommended to use string (as that is what the value coming from the user will be anyway) and handle converting and error-checking the value for yourself. If the user provides incorrect parameters for a command, they will be notified of the expected parameters on-screen and in the log file. Registering a Custom Console Command There are three ways to register custom console commands, so you can use whichever suits your purpose or coding-style best. Warning Registered commands must be unique. If any mod has already added the command, your command will be rejected. Note A command can have a return type, but it is not necessary. If it does return any type, it will be printed on-screen and in the log file. Registering a delegate (Callback) as a Command By calling ConsoleCommandsHandler.RegisterConsoleCommand<T>(string command, T callback), you can pass an instance of the delegate, whether it is an anonymous lambda or reference to a method that implements the delegate signature to register your callback as a response to the command. Note that with a delegate command, it is not possible to use optional parameters. If you want optional parameters, it is recommended to register a public static method as a command instead. In the example below, we are registering a console command by the use of a delegate. The delegate will respond to the \"delegatecommand\" command from the dev console in the game. You can also use System.Func or System.Action delegates to define the signature for your command signature. using BepInEx; using Nautilus.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommand<MyCommand>(\"delegatecommand\", (myString, myInt, myBool) => { return $\"Parameters: {myString} {myInt} {myBool}\"; }); } private delegate string MyCommand(string myString, int myInt, bool myBool); } The command: delegatecommand foo 3 true is a valid signature for the code above. Registering a public static Method as a Command By calling ConsoleCommandsHandler.RegisterConsoleCommand(string command, Type declaringType, string methodName, Type[] parameters = null), you can specify a public static method as a response to the command. The API here is similar to Harmony in that it will search for the method in the given type, using the optional Type[] parameters to target overloads. In the example below, we are registering a console command by specifying a target method. The method will respond to the \"methodcommand\" command from the dev console in the game. using BepInEx; using Nautilus.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommand(\"methodcommand\", typeof(MyMod), nameof(MyCommand)); Logger.LogInfo(\"Patched successfully!\"); } public static string MyCommand(string myString, int myInt, bool myBool = false) { return $\"Parameters: {myString} {myInt} {myBool}\"; } } The command: methodcommand foo 3 true is a valid signature for the code above. Registering Multiple public static Methods Within a Class as Commands By calling ConsoleCommandsHandler.RegisterConsoleCommands(Type type), you can register all public static methods decorated with the ConsoleCommandAttribute as console commands. In the example below, we are registering all console commands specified in the MyConsoleCommands types as console commands. Methods decorated with the ConsoleCommandAttribute will respond to the specified command from the dev console in the game. using BepInEx; using Nautilus.Commands; using Nautilus.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommands(typeof(MyConsoleCommands)); Logger.Log(Logger.Level.Info, \"Patched successfully!\"); } } public static class MyConsoleCommands { /// The MyAttributedCommand method will respond to the \"attributedcommand\" command from the dev console. [ConsoleCommand(\"attributedcommand\")] public static string MyAttributedCommand(string myString, int myInt, bool myBool = false) { return $\"Parameters: {myString} {myInt} {myBool}\"; } } The commands: attributedcommand foo 3 true attributedcommand foo 3 are both valid signatures for the code above. Note Optional arguments can be ignored when executing a command in the dev console. When ignored, the specified default value will be used instead."
  },
  "tutorials/crafting-recipes.html": {
    "href": "tutorials/crafting-recipes.html",
    "title": "Editing Crafting Recipes",
    "keywords": "Editing Crafting Recipes Recipes in Subnautica are combining one or multiple items to craft a new and more advanced item in various crafting stations. Nautilus offers the RecipeData class with sufficient data for recipes. Below is a table of all the parameters you may interact with in the RecipeData class. Parameter Name Type Description craftAmount int Amounts of copies of the item that is created for this recipe. Ingredients List<TechType> A list of ingredients required for this recipe. LinkedItems List<TechType> Items that will also be created when this recipe is crafted. To register or edit recipes, use the Nautilus.Handlers.CraftDataHandler.SetRecipeData() method. Examples The following examples demonstrate the usage of the SetRecipeData method. // Set the Titanium Ingot's recipe to only two titaniums RecipeData titaniumIngotRecipe = new RecipeData(new CraftData.Ingredient(TechType.Titanium, 2)); // register the recipe CraftDataHandler.SetRecipeData(TechType.TitaniumIngot, titaniumIngotRecipe); // Make the scrap metal recipe yield 10 titaniums instead of 5 RecipeData scrapMetalRecipe = new RecipeData { // We don't want to get a new scrap metal in this recipe, so it should be 0. craftAmount = 0, // Require a scrap metal for the recipe Ingredients = { new CraftData.Ingredient(TechType.ScrapMetal) }, // Yield 10 titaniums when crafted LinkedItems = Enumerable.Repeat(TechType.Titanium, 10).ToList() }; // register the recipe CraftDataHandler.SetRecipeData(TechType.ScrapMetal, scrapMetalRecipe); See also SetRecipeData() SetRecipeData() RecipeData"
  },
  "tutorials/databank-entries.html": {
    "href": "tutorials/databank-entries.html",
    "title": "Adding Custom Databank Entries",
    "keywords": "Adding Custom Databank Entries Important The terms \"Databank\", \"Encyclopedia\" and \"Ency\" are used interchangeably throughout the game, its codebase and in mods. These are also referred to as \"PDA Entries\". Keep all of this in mind! The PDA’s Databank is essential for providing players with large blocks of text that would otherwise take too long to read. These entries can also contain a custom image or audio file embedded within to enhance the player’s understanding of the information. It is recommended to set up an Asset Bundle for Databank entries that involve custom assets. Asset Bundles simplify the process of loading assets to one line per call, regardless of file type. Creating a Databank entry through Nautilus This tutorial will be based around the PDAHandler.AddEncyclopediaEntry(...) method. The method listed above is the easiest and most proper way to register a custom entry to the game through Nautilus. Therefore, the following sections on entry creation will elaborate upon all of the parameters. Keep in mind that there are also steps beyond creation. For example, your PDA entry must also be unlocked somehow. Creating an entry: Key Parameter name Value type Nullability key string Essential property; must be assigned a proper value! Every PDA Databank entry has its own internal \"key\", also referred to as an ID, which ensures it is unique and must be used in other systems when applicable. For example, a Story Goal that unlocks a Databank entry should have the same key/ID as the entry that it unlocks. Creating an entry: Path Parameter name Value type Nullability path string Essential property; must be assigned a proper value! Every PDA entry has its own \"path\" which determines where in the PDA this entry is found. A typical path looks something like Lifeforms/Fauna/Leviathans. Click here for a list of standard Databank paths Path Display Name Tech Blueprints Welcome Survival Package Welcome/StartGear Additional Technical Tech/Habitats Habitat Installations Tech/Equipment Equipment Tech/Vehicles Vehicles Tech/Power Power Lifeforms Indigenous Lifeforms Lifeforms/Coral Coral Lifeforms/Fauna Fauna Lifeforms/Flora Flora Lifeforms/Flora/Land Land Lifeforms/Flora/Sea Sea Lifeforms/Flora/Exploitable Exploitable Lifeforms/Fauna/Herbivores Herbivores (UNUSED) Lifeforms/Fauna/Carnivores Carnivores Lifeforms/Fauna/Rays Rays Lifeforms/Fauna/Sharks Sharks Lifeforms/Fauna/Leviathans Leviathans Lifeforms/Fauna/Other Other Predators (UNUSED) Lifeforms/Fauna/SmallHerbivores Herbivores - Small Lifeforms/Fauna/LargeHerbivores Herbivores - Large Lifeforms/Fauna/Scavengers Scavengers & Parasites Lifeforms/Fauna/Deceased Deceased PlanetaryGeology Geological Data Advanced Advanced Theories DownloadedData Data Downloads DownloadedData/BeforeCrash Operations Logs DownloadedData/PublicDocs Public Documents DownloadedData/Degasi Degasi Survivors DownloadedData/Degasi/Orders Alterra Search & Rescue Mission DownloadedData/Lifepods CORRUPTED (UNUSED) DownloadedData/AuroraSurvivors Aurora Survivors DownloadedData/Codes Codes & Clues DownloadedData/Precursor Alien Data DownloadedData/Precursor/Terminal Terminal Data DownloadedData/Precursor/Scan Scan Data DownloadedData/Precursor/Artifacts Artifacts TimeCapsules Time Capsules You can also create your own paths. When doing this, make sure you set the language line properly. The key for a path in the language system is EncyPath_{path}, i.e. EncyPath_Lifeforms/Fauna/Leviathans. Example of custom path creation LanguageHandler.SetLanguageLine(\"EncyPath_Lifeforms/Fauna/Pets\", \"Pets\"); LanguageHandler.SetLanguageLine(\"EncyPath_Lifeforms/Fauna/Pets/Robotic\", \"Robotic Pets\"); // Adds \"Doggo\" to the \"Pets\" category: PDAHandler.AddEncyclopediaEntry(\"Doggo\", \"Lifeforms/Fauna/Pets\" ...); // Adds \"Robot Dog\" to the \"Robotic\" category which is a subcategory of \"Pets\": PDAHandler.AddEncyclopediaEntry(\"Robot Dog\", \"Lifeforms/Fauna/Pets/Robotic\" ...); Creating an entry: Text Parameter name Value type Nullability title string Can be null if implementing proper localization. desc string Can be null if implementing proper localization. Adding the text contents is very simple as it is only composed of two strings that must be passed through into method. As long as the values passed through the title and desc parameters are valid (not null), the text will be automatically set and should appear properly in-game. Note Consider setting these parameters to null if you are using JSON-based localization in your mod. Creating an entry: The main image Parameter name Value type Nullability image UnityEngine.Texture2D Can safely be left unassigned. The image of a Databank entry is its primary visual element. Each entry can have up to one image. Creating your own image assets: You can make your own Databank images, but it is recommended that you are consistent with the vanilla style of the game. Photoshop is recommended, as it was used to make these originally, but any image editor can work. These tend to use the Agency FB font. Stock images are often used in the \"close up\" areas. A blank template for these is provided below: Important Please keep in mind that it is ILLEGAL to use Subnautica's art assets and style in other contexts. However, Unknown Worlds Entertainment has given modders permission to modify their assets for non-commercial purposes within Subnautica mods. Creating an entry: Popup image Parameter name Value type Nullability popupImage UnityEngine.Sprite Can safely be left unassigned. Uses a default image. The popup image is a rather insignificant image that can be applied to your Databank entries. This small image appears to the left side of the screen for a few seconds when your entry is unlocked. Creating your own popup images: These images should follow the rules below: Typically 256x128 pixels. The image is usually cropped so only a decent portion of the render fits in the space. The contents NEVER extend to the rightmost side of the image. The contents typically do not extend to the left side of the image. If nearing the left side, the leftmost corners must always be cut out. This image can be used as a template for cutting out the corners: A complete popup image looks like this: Creating an entry: Unlock sound Parameter name Value type Nullability unlockSound FMODAsset Can safely be left unassigned, but will be automatically resolved to the default sound. By default the unlockSound parameter is null. This will be automatically resolved to PDAHandler.UnlockBasic. While you can technically use any sound asset, the only other recommended sound is PDAHandler.UnlockImportant. Creating an entry: Voice logs Parameter name Value type Nullability voiceLog FMODAsset Can safely be left unassigned. Audio logs must first have their sounds be registered through the CustomSoundHandler class. The overload that takes an AudioClip is recommended due to its simplicity, but anything should work. Also, remember to use the AudioUtils.BusPaths.VoiceOvers bus. After registering a sound, you must make an FMODAsset. An FMODAsset essentially acts as a container for your sound path. To create one use the AudioUtils.GetFmodAsset(string) method, where the path is the ID that you just defined in the CustomSoundHandler. Finally, just pass this FMODAsset into the voiceLog parameter of the original method. Creating an entry: Examples Example 1 Registers a new PDA entry with a large image, popup image and proper title/description. // \"EldritchLogImage\" is the name of the image file in the asset bundle. remember to omit file extensions. Texture2D eldritchImage = assetBundle.LoadAsset<Texture2D>(\"EldritchLogImage\"); // remember: popup images must be imported as a sprite. Sprite eldritchPopup = assetBundle.LoadAsset<Sprite>(\"EldritchLogSprite\"); // description string (does not need a variable of its own): string eldritchDesc = \"There weren't enough lifeboats, I took the only one for myself.\"; // register the encyclopedia entry into the game: PDAHandler.AddEncyclopediaEntry(\"EldritchLog\", \"DownloadedData/PublicDocs\", \"Eldritch's Log\", eldritchDesc, eldritchImage, eldritchPopup, null); Example 2 Registers a new PDA entry with a voice log, popup image and proper title/description. // remember: popup images must be imported as a sprite. Sprite popupLee = assetBundle.LoadAsset<Sprite>(\"LeeLogSprite\"); // register the sound for FMOD. // the sound's ID can be anything, as long as it corresponds with the FMOD asset. CustomSoundHandler.RegisterCustomSound(\"LeeAudioLog\", assetBundle.LoadAsset<AudioClip>(), AudioUtils.BusPaths.VoiceOvers); // create an FMOD asset, which must have the same ID as the sound. // all this does is act as a container for the sound's ID, but it is required for the encyclopedia entry. FMODAsset leeLogSound = AudioUtils.GetFmodAsset(\"LeeAudioLog\"); // passed into the subtitles and PDA entry description string transcript = \"Hello? Hello? Anyone there? Oh... this isn't a radio, it's just an old voice recorder. Day 32 of being lost at sea. Or was it 33...? Getting lonely.\"; // add the translation for the subtitles: LanguageHandler.SetLanguageLine(\"LeeAudioLog\", transcript); // register the encyclopedia entry into the game: PDAHandler.AddEncyclopediaEntry(\"LeeLog\", \"DownloadedData/PublicDocs\", \"Lee's Log\", transcript, null, popupLee, leeLogSound); Making entries unlockable Tip The ency [key] command can be used to instantly unlock a Databank entry for testing purposes. PDA entries are not unlocked by default, but there are various ways to add them to the player’s databank. Some methods are listed below: Method Notes Story Goal completion Only occurs when GoalType is GoalType.Encyclopedia. See our documentation on the StoryGoalHandler class for more info. PDAEncyclopedia.AddAndPlaySound(string key) Adds the entry with the given key, shows a notification, and plays the correct sound (if defined) for this entry. PDAEncyclopedia.Add(string key, bool verbose) Adds the entry with the given key, and shows a notification if verbose is true. Example for unlocking with Story Goals: // Register encyclopedia entry like usual: PDAHandler.AddEncyclopediaEntry(\"SpadefishHate\", \"Advanced\", \"Spadefish are terrible\", \"Why do they lay eggs? Why do they damage your seamoth so heavily?\"); // Use the StoryGoalHandler to make it unlockable. // This particular example uses the RegisterItemGoal method to unlock the encyclopedia entry when picking up a Spadefish: StoryGoalHandler.RegisterItemGoal(\"SpadefishHate\", Story.GoalType.Encyclopedia, TechType.Spadefish);"
  },
  "tutorials/equipment-type.html": {
    "href": "tutorials/equipment-type.html",
    "title": "What are equipment types?",
    "keywords": "What are equipment types? EquipmentType is an enum that handles special items. The possible values for this enum are listed below. public enum EquipmentType { None, // Normal item Hand, // The item can be equipped in the Hand slot Head, // The item can be equipped in the Head slot Body, // The item can be equipped in the Body slot Gloves, // The item can be equipped in the Gloves slot Foots, // The item can be equipped in the Feet slot Tank, // The item can be equipped in the Oxygen Tank slot Chip, // The item can be equipped in the Chip slots CyclopsModule, // The item can be equipped in the Cyclops as an upgrade module VehicleModule, // The item can be equipped both in the Seamoth and in the Prawn Suit as an upgrade module NuclearReactor, // The item can be used in a Nuclear Reactor BatteryCharger, // When batteries are thrown in it, they get charged (for buildables) PowerCellCharger, // When power cells are thrown in it, they get charged (for buildables) SeamothModule, // The item can be equipped in the Seamoth as an upgrade module ExosuitModule, // The item can be equipped in the Prawn Suit as an upgrade module ExosuitArm, // The item can be equipped in the Prawn Suit as an arm DecoySlot // (Need actual name) Possibly for the decoy tube thing in the cyclops } How can I create a custom background type? Since equipment types are simply just enums, we can use the enum handler to create a new instance. private void Awake() { var myCustomEquipmentType = EnumHandler.AddEntry<EquipmentType>(\"CustomEquipmentType\"); } And that's it. Now you can use the new CraftData.BackgroundType instance anywhere you want. How can edit an item's equipment type? To edit an item's equipment type, you need to call the CraftDataHandler.SetEquipmentType method sitting in the Nautilus.Handlers namespace Examples The following example demonstrates the usage of SetEquipmentType that enables the player to wear titanium on their head. CraftDataHandler.SetEquipmentType(TechType.Titanium, EquipmentType.Head); Similarly, if we wanted to set the titanium's equipment type to our custom equipment type from earlier, it would look like the following: CraftDataHandler.SetBackgroundType(TechType.Titanium, myCustomEquipmentType); If you're setting the equipment type for a custom prefab, we recommend using the ICustomPrefab.SetEquipment method instead. var customPrefab = new CustomPrefab(\"CustomItem\", \".\", \".\"); customPrefab.SetEquipment(EquipmentType.Head); // rest of the custom prefab configuration is omitted for brevity. Warning It is dangerous to edit equipment types for items that already have one, because they can break. For instance, modifying the equipment type for the Radiation Helmet will disable the player from wearing it."
  },
  "tutorials/localization.html": {
    "href": "tutorials/localization.html",
    "title": "Localization",
    "keywords": "Localization In Subnautica, localization is a key-value string dataset where the key represents a unique identifier that is the same on all languages, and the value represents the translation in a language. Nautilus provides a few different approaches to go about adding localization in the LanguageHandler class. Json Files Localization The most common method of adding localization in game development is via json files where the json file name represents the language name (I.E: English.json for English). The json files contain a key-value pair where the key is the language key and the value is the translation. Examples The following examples demonstrate the usage of json-file-based localizations. Json files: // English.json { \"TitaniumClone\": \"Titanium Clone\", \"Tooltip_TitaniumClone\": \"Titanium clone that makes me go yes.\" } // Spanish.json { \"TitaniumClone\": \"Clon de Titanio\", \"Tooltip_TitaniumClone\": \"Clon de Titanio que me hace decir que sí\" } To register json-file-based localizations, all you will have to call is one line of code: LanguageHandler.RegisterLocalizationFolder(); Note By default, Nautilus expects these json files to be located in the {modFolder}/Localization folder. The following example registers the Translations folder as the localization folder: LanguageHandler.RegisterLocalizationFolder(\"Translations\"); Dictionary Localization Nautilus also offers to register string key-value dataset as localization. Examples The following examples demonstrate the usage of dictionary-based localization. Dictionary<string, string> _languageEntriesEng = new() { { \"TitaniumClone\", \"Titanium Clone\" }, { \"Tooltip_TitaniumClone\", \"Titanium clone that makes me go yes.\" } }; Dictionary<string, string> _languageEntriesEsp = new() { { \"TitaniumClone\", \"Clon de Titanio\" }, { \"Tooltip_TitaniumClone\", \"Clon de Titanio que me hace decir que sí\" } }; // Register our English language entries to the English language LanguageHandler.RegisterLocalization(\"English\", _languageEntriesEng); // Register our Spanish language entries to the Spanish language LanguageHandler.RegisterLocalization(\"Spanish\", _languageEntriesEsp); Singular Translation Another approach that can be used is translating one key to any desired language. Additionally, all Nautilus methods that interact with language keys also offer modders to choose the language to translate for. Examples The following examples demonstrate the usage of singular translations. LanguageHandler.SetLanguageLine(\"TitaniumClone\", \"Titanium Clone\", \"English\"); LanguageHandler.SetLanguageLine(\"TitaniumClone\", \"Clon de Titanio\", \"Spanish\"); // Adds Spanish translation instead of English PrefabInfo info = PrefabInfo.WithTechType(\"TitaniumClone\", \"Clon de Titanio\", \"Clon de Titanio que me hace decir que sí\", \"Spanish\"); See also LanguageHandler"
  },
  "tutorials/options.html": {
    "href": "tutorials/options.html",
    "title": "Adding Options",
    "keywords": "Adding Options Most mods will require/use some sort of user configuration from hotkeys to values to colors. Nautilus offers a wrapper to help easily create an entry in the settings for your mods options. Depending on the use case you can use a super simple ConfigFile or a more detailed and customizable ModOptions. ConfigFile A ConfigFile is the simplest way of managing your mod's options automatically. This is ideal if you just want a basic plain config with little custom functionality. The ConfigFile by itself is just a class which automatically stores persistent data to disk but with the addition of custom Attributes you can make it display nicely in game too. Creating your ConfigFile The following code is an example of how you could represent an integer value with a slider in game: using Nautilus.Json; using Nautilus.Options.Attributes; /// The Menu attribute allows us to set the title of our section within the \"Mods\" tab of the options menu. [Menu(\"My Options Menu\")] public class MyConfig : ConfigFile { /// A Slider attribute is used to represent a numeric value as a slider in the options menu with a /// minimum and maximum value. By default, the minimum value is 0 and maximum is 100. /// /// In this example we are setting a minimum value of 0 and a maximum of 50, with a /// DefaultValue of 25 which will be represented by a notch on the slider. [Slider(\"My slider\", 0, 50, DefaultValue = 25)] /// This is the actual definition for the value which should be saved. Its value controls the /// initial value that our option will have upon opening the game for the first time. public int SliderValue = 15; } See Attributes for a full list of available control types and attribute arguments. ModOptions A ModOptions is the more advanced way of managing your mod's options. This is ideal if you require more customization than is provided or want to manage your mods config separately (eg via BepInEx config). The ModOptions by itself is just a class which helps display your options nicely in game and relies on other classes to persist data across game loads (eg BepInEx config). OptionItems are added to your section with the AddItem function. When options are added to the list they will only be created once, this means that if they are changed outside of Nautilus (ex. BepInEx ConfigurationManager) they will not be updated inside of the Nautilus mods window. In order to refresh your values on every opening of the menu you must override ModOptions.BuildModOptions which is executed once every time the menu is opened. Creating your ModOptions The following code is an example of how you could represent an integer value with a slider in game: using Nautilus.Options; /// Inherit from the abstract ModOptions public class MyModOptions : ModOptions { /// The base ModOptions class takes a string name as an argument public MyModOptions() : base(\"My Mod Options\") { /// A ModSliderOption is used to draw a numeric value as a slider in the options menu with a /// minimum and maximum value. /// /// In this example we are setting a minimum value of 0 a maximum of 50, a /// DefaultValue of 25 (which will be represented by a notch on the slider) /// and an initial value of 15. AddItem(ModSliderOption.Create(\"SliderId\", \"My Slider\", 0, 50, 15, 25)); } } Saving your config As mentioned above, a ModOptions does not handle saving and retrieving config from disk and as such it does not persist across saves by default. One of the most convenient ways of accounting for this is to utilize BepInEx as a config store (we have it, may as well use it!). There are a few ways to accomplish this: (1) (Recommended) Using the builtin extensions for converting BepInEx ConfigEntry instances to OptionItem instances. See ConfigEntryExtensions for possible options. (2) Manually hooking to an external (likely BepInEx) config with individual OnChanged. See reacting to changed values (individual) below for further explanation on the details. (3) Manually hooking to an external (likely BepInEx) config with the global OnChanged. See reacting to changed values (global) below for further explanation on the details. In all cases, in order to support changes made outside of Nautilus (ex. BepInEx ConfigurationManager) you will need to override ModOptions.BuildModOptions which is executed once every time the menu is opened. Reacting to changed values Nautilus provides three different ways of dealing with changed values when using ModOptions: (1) Adding a listener to an OptionItem OnChanged. (2) Adding a listener to the global OnChanged event. This method is the most similar to SML 2.0's change handler. (3) A combination of (1) and (2) Individual OnChanged Every ModOption has a certain subclass of OptionEventArgs (eg ToggleChangedEventArgs) which is passed to the option's OnChanged event. You can add your own function to the OnChanged for it to be run whenever the value is changed as shown below: using Nautilus.Options; public class MyModOptions : ModOptions { public MyModOptions() : base(\"My Mod Options\") { OnChanged += Options_Changed; var Slider1 = ModSliderOption.Create(\"Slider1\", \"My Slider\", 0, 50, 15, 25); Slider1_OnChanged += Slider1_OnChanged; AddItem(Slider1); var Toggle1 = ModToggleOption.Create(\"Toggle1\", \"My Toggle\", true); Toggle1_OnChanged += Toggle1_OnChanged; AddItem(Toggle1); var Toggle2 = ModToggleOption.Create(\"Toggle2\", \"My Other Toggle\", true); Toggle2_OnChanged += (object sender, ToggleChangedEventArgs e) => { /// Handle changes here }; AddItem(Toggle2); } private void Slider1_OnChanged(object sender, SliderChangedEventArgs e) { /// Handle changes here } private void Toggle1_OnChanged(object sender, ToggleChangedEventArgs e) { /// Handle changes here } } Global OnChanged The base ModOptions has an OnChanged which every individual option OnChanged bubbles up to. You can add your own handler function to this class but you will need to differentiate between each type/individual option which can be done multiple ways. An example class may look like: using Nautilus.Options; public class MyModOptions : ModOptions { public MyModOptions() : base(\"My Mod Options\") { OnChanged += Options_Changed; AddItem(ModSliderOption.Create(\"Slider1\", \"My Slider\", 0, 50, 15, 25)); AddItem(ModToggleOption.Create(\"Toggle1\", \"My Toggle\", true)); AddItem(ModToggleOption.Create(\"Toggle2\", \"My Other Toggle\", true)); } private void Options_Changed(object sender, OptionEventArgs e) { switch (e) { case SliderChangedEventArgs sliderArgs: switch (sliderArgs.Id) { case \"Slider1\": /// Handle changes here break; } break; case ToggleChangedEventArgs toggleArgs: switch (toggleArgs.Id) { case \"Toggle1\": /// Handle changes here break; case \"Toggle2\": /// Handle changes here break; } break; } } }"
  },
  "tutorials/overview.html": {
    "href": "tutorials/overview.html",
    "title": "Tutorials",
    "keywords": "Tutorials This section covers step-by-step tutorials on how to get some of the useful features of Nautilus done with images, demos, and working code. If you've used SML 2.0 before, please start with our Updating to Nautilus Guide. Sections Adding Content Spawns Custom Console Commands Story Goals Databank Entries TODO: Audio (FMOD) Editing Content Background Type Equipment Type Crafting Recipes Utilities Localization In-Game Options"
  },
  "tutorials/spawns.html": {
    "href": "tutorials/spawns.html",
    "title": "Adding Spawns",
    "keywords": "Adding Spawns Most of the time in Subnautica, the game uses two different ways to spawn objects; static spawns that always have a fixed position in the world to spawn in, and loot distribution which is biome-based and sudo-random. Nautilus offers modders to add spawns to either systems. You can add spawns for your own custom item, you can also edit vanilla spawns, or straight up remove them. Coordinated Spawns Coordinated spawns is Nautilus' version of the aforementioned static spawns. With this system, you are allowed to specify exact world position and rotation spawns for an item. You may register one or more coordinated spawn(s) for any item by providing either their class ID, or their tech type. Examples The following examples demonstrate the usage of CoordinatedSpawnsHandler methods. private void Awake() { // Adds a Reaper Leviathan to the lava lakes SpawnInfo reaperInfo = new SpawnInfo(TechType.ReaperLeviathan, new Vector3(280f, -1400f, 47f)); // Lava Lakes CoordinatedSpawnsHandler.RegisterCoordinatedSpawn(reaperInfo); // Adds multiple spawn infos at once // Sand Shark's class ID string sandSharkId = \"5e5f00b4-1531-45c0-8aca-84cbd3b580a4\"; var spawnInfos = new List<SpawnInfo>() { new SpawnInfo(TechType.Seamoth, Vector3.zero), new SpawnInfo(sandSharkId, new Vector3(10, -4, 5), Vector3.up * 90f) // rotate its Y axis 90 degrees } CoordinatedSpawnsHandler.RegisterCoordinatedSpawns(spawnInfos); // Spawns a batch of titaniums around 10, -3, 15 world position var randomPositions = RandomPositions(new Vector3(10f, -3f, 15f)); CoordinatedSpawnsHandler.RegisterCoordinatedSpawnsForOneTechType( TechType.Titanium, randomPositions); } private List<Vector3> RandomPositions(Vector3 centerPosition) { var result = new List<Vector3>(); for (int i = 0; i < 5; i++) { result.Add(centerPosition + (Random.insideUnitSphere * i)); } return result; } For custom prefabs, it is advised to use the ICustomPrefab.SetSpawns(SpawnLocation[]) method instead of directly interacting with the CoordinatedSpawnsHandler class. The example below demonstrates the usage of the SetSpawns method. var blueReaper = new CustomPrefab(\"BlueReaper\", \"Blue Reaper Leviathan\", null); // Creates a clone of the Reaper Leviathan prefab and colors it blue, then set the new prefab as our Blue Reaper's game object. var blueReaperPrefab = new CloneTemplate(blueReaper.Info, TechType.ReaperLeviathan) { ModifyPrefab = prefab => prefab.GetComponentsInChildren<Renderer>().ForEach(r => r.materials.ForEach(m => m.color = Color.blue)) }; blueReaper.SetGameObject(blueReaperPrefab); // Adds a spawn for our Blue Reaper Leviathan in the lava lakes. blueReaper.SetSpawns(new SpawnLocation(280f, -1400, 47f)); // Register the Blue Reaper Leviathan to the game. blueReaper.Register(); Loot Distribution Loot distribution system is by far the most widely used spawning system in the game. Unlike static spawns, Nautilus does not have it's own version of this system, so we will be registering distributions into the game's system. Loot distribution only allows adding or editing distributions using a class ID and prefab file name. You normally will also need to provide a biome type, probability, and count for each loot you want to add. Below is a table of all the parameters you may interact with in the loot distribution system. Parameter Name Type Description classId string The classId of the entity to add loot for. prefabFileName string The internal file path of the entity to add. biomeDistribution LootDistributionData.BiomeData The biome data in which this entity might spawn in. probability float The chance of this entity spawning. This value can only be between 0-1 inclusive. 0 being no chance of spawning, while 1 is guaranteed to spawn. count float Multiplies 1 with this value. This multiplication is accounted everytime this entity has the highest chance to spawn, not a global count. srcData LootDistributionData.SrcData A class that combines the prefab file name and biome distribution to one data type. entityInfo WorldEntityInfo Contains information on how to spawn this entity. E.G: The size it should spawn in as, and how far it can stay before unloading. Warning An Entity Info for each class ID to spawn via loot distribution is required. If an entity info does not have one, the loot distribution will ignore it. Note Usually, vanilla prefabs do have a world entity info assigned to them. While you can, you don't have to register a new one for those that already have one. Examples The following examples demonstrate the usage of LootDistributionHandler methods. // Drillable Sulphur's class ID string drillableSulphurClassId = \"697beac5-e39a-4809-854d-9163da9f997e\"; var biomes = new LootDistribution.BiomeData[] { // Lost river's bones field ground new LootDistributionData.BiomeData { biome = BiomeType.BonesField_Ground, count = 1, probability = 0.07f }, // Inactive Lava Zone floor, near the lava new LootDistributionData.BiomeData { biome = BiomeType.InactiveLavaZone_Chamber_Floor_Far, count = 1, probability = 0.05f } }; // Add spawn for the drillable sulphur LootDistributionHandler.AddLootDistributionData(drillableSulphurClassId, biomes); string rockgrubClassId = CraftData.GetClassIdForTechType(TechType.Rockgrub); // Prevents the rockgrub from spawning in the Bulb zone caves. LootDistributionHandler.EditLootDistributionData(rockgrubClassId, BiomeType.KooshZone_CaveWall, 0f, 0); For custom prefabs, it is advised to use the ICustomPrefab.SetSpawns(LootDistributionData.BiomeData[]) method instead of directly interacting with the LootDistributionHandler class. The example below demonstrates the usage of the SetSpawns method. // Set the vanilla titanium icon for our item CustomPrefab titaniumClone = new CustomPrefab(\"TitaniumClone\", \"Titanium Clone\", \"Titanium clone that makes me go yes.\", SpriteManager.Get(TechType.Titanium)); // Creates a clone of the Titanium prefab and colors it red, then set the new prefab as our Titanium Clone's game object. PrefabTemplate cloneTemplate = new CloneTemplate(titaniumClone.Info, TechType.Titanium) { // Callback to change all material colors of this clone to red. ModifyPrefab = prefab => prefab.GetComponentsInChildren<Renderer>().ForEach(r => r.materials.ForEach(m => m.color = Color.red)) }; titaniumClone.SetGameObject(cloneTemplate); titaniumClone.SetSpawns( // Adds a chance for our titanium clone to spawn in Safe shallows grass, x4 each time. new BiomeData { biome = BiomeType.SafeShallows_Grass, count = 4, probability = 0.1f }, // Adds a chance for our titanium clone to spawn in Safe shallows caves, once each time. new BiomeData { biome = BiomeType.SafeShallows_CaveFloor, count = 1, probability = 0.4f }); // Register the Titanium Clone to the game. titaniumClone.Register(); See also CoordinatedSpawnsHandler LootDistributionHandler"
  },
  "tutorials/story-goals.html": {
    "href": "tutorials/story-goals.html",
    "title": "Using the Story Goal system",
    "keywords": "Using the Story Goal system The progression of Subnautica is primarily based around the Story Goal system. This system is composed of the StoryGoalManager class and several sub-systems which together handle hundreds of different goals, each with their own unique triggers and effects on completion. Nautilus provides a new handler for accessing this system, which was not available in SMLHelper. This guide covers the basics of how to use them, and how they may help you implement certain features into your mod. Vanilla use-cases Alien data terminals Data consoles in Alterra Wrecks Most story events & progression The PDA databank tab The PDA log tab (any sort of voice lines that play during progression!) The radio, which is an extension of the log system. Possible actions on completion Adding items to the player's inventory Adding PDA databank entries Adding pending radio messages. Playing voice lines through the PDA log system Triggering custom events (this in particular means that a goal can do ANYTHING on completion!) Unlocking achievements Unlocking blueprints Unlocking signal locations The StoryGoal class The StoryGoal object is the basis of all StoryGoals. Every Story Goal has a key, delay, and GoalType. It can also have associated data for what happens on completion, which must be defined in another class. An example of this is the OnGoalUnlockTracker (see StoryGoalHandler.RegisterOnGoalUnlockData). Many sub-classes and trackers exist to automate the unlocking process, as shown in the next section. Note A StoryGoal object can be instantiated directly, without accessing the StoryGoalHandler or any goal tracking classes. However, a goal created in this way must be triggered manually through its Trigger() method. Trackers These internal game classes manage the automatic unlocking of specific goals. You do not need to access them directly, but they are listed below to allow a deeper understanding of how this system works: Tracker type Description ItemGoalTracker Completes a goal (or multiple) when an object with the given TechType is picked up, equipped, or crafted through the Mobile Vehicle Bay. BiomeGoalTracker Completes a goal when the player stays in a given biome for a specified period of time. LocationGoalTracker Completes a goal when the player stays within range of a certain position for a specified period of time. CompoundGoalTracker Completes a goal when all required \"precondition\" goals have been completed. See the creating goals section for a list of methods that allow access to these systems. GoalType Every Story Goal has an assigned Goal Type which determines the action that is executed on completion (if any): GoalType Purpose GoalType.Story Generic GoalType with no default effects. Primarily used for tracking story progress and triggering custom events. GoalType.Encyclopedia Adds a PDA databank entry on completion with the corresponding key. Also see PDAHandler.AddEncyclopediaEntry(...). GoalType.PDA Adds a PDA Log message with the corresponding key. Also see PDAHandler.AddLogEntry(...). GoalType.Radio Adds a pending radio message with the corresponding key. Also see PDAHandler.AddLogEntry(...). StoryGoalHandler This is the main class for interacting with the game's Story Goal system. It allows you to add goals to specific trackers and gives you full control over their actions on completion. Warning As of now, the StoryGoalHandler class is only designed to work for the first Subnautica game. Remember, you can always contribute. A more comprehensive overview of the class can be viewed here. Creating goals There are various ways to create Story Goals, and different methods are recommended for different purposes. Remember Story Goals do nothing on their own, and you should also see the section on actions on completion to use them to their full potential. Method Notes new StoryGoal(string key, GoalType goalType, float delay) Creates a new StoryGoal that must be completed manually (through the Trigger() method). RegisterItemGoal(...) Adds a new goal to the ItemGoalTracker system. This goal is completed when an object with the given TechType is picked up, equipped, or crafted through the Mobile Vehicle Bay. RegisterBiomeGoal(...) Adds a new goal to the BiomeGoalTracker system. This goal is completed when the player stays in a given biome for a specified period of time. RegisterLocationGoal(...) Adds a new goal to the LocationGoalTracker system. This goal is completed when the player stays within range of a certain position for a specified period of time. RegisterCompoundGoal(...) Adds a new goal to the CompoundGoalTracker system. This goal is completed when all other specified \"prerequisite\" goals are completed. Completing goals Story goals can be completed in various ways, some more useful than others: Method Notes Automatically, through the tracker systems (handled by the StoryGoalHandler). This is the easiest way to add story goals and is recommended for typical use cases. No extra code is required; this is handled by the StoryGoalHandler methods. StoryGoal.Trigger() (instance) This is the recommended method for manually unlocking goals without a tracker. When called, schedules the goal for completion (based on the delay), then executes all associated actions. StoryGoalManager.main.OnGoalComplete(string key) Returns false if the goal has already been completed. Otherwise, returns true and adds the goal instantly. Has no delay and does not apply the actions defined by the goal's GoalType. StoryGoal.Execute(string key, GoalType goalType) (static) Instantly completes a goal by calling OnGoalComplete, without applying the delay. Properly applies the actions defined by the goal's GoalType. Note The most proper way to complete a Story Goal is through calling the StoryGoal.Trigger() method on a given instance. This specifically applies for goals created through the new StoryGoal(...) constructor rather than through any aforementioned methods. This is the only way to ensure the delay is applied properly and all actions are executed. Actions on completion Within the StoryGoalHandler class, the action(s) on completion can be defined in a couple ways: Method Notes StoryGoalHandler.RegisterCustomEvent(string key, Action customEventCallback) Allows code of any length to be run when the goal is completed. StoryGoalHandler.RegisterOnGoalUnlockData(...) Allows the user to define any blueprints, items, signals or achievements that are gained on completion. Example Example code for registering a Story Goal is shown below. This goal will be triggered after staying in the Kelp Forest for 30 seconds or more. On completion it plays a voice line, kills the player, and unlocks the Seamoth blueprint. using Story; // ... // Register the goal to the BiomeGoalTracker. A GoalType of PDA means that this goal will trigger a PDA line and add it to the log on completion: StoryGoalHandler.RegisterBiomeGoal(\"KelpForestEnjoyer\", GoalType.PDA, biomeName: \"kelpForest\", minStayDuration: 30f, delay: 3f); // Register the PDA voice line. Note how the key matches the key of the story goal: PDAHandler.AddLogEntry(\"KelpForestEnjoyer\", \"KelpForestEnjoyer\", sound); // Set the English translation for PDA message's subtitles: LanguageHandler.SetLanguageLine(\"KelpForestEnjoyer\", \"Congratulations for staying in the Kelp Forest for 30 seconds!\", \"English\"); // Add a custom event that kills the player when this goal is completed: StoryGoalHandler.RegisterCustomEvent(\"KelpForestEnjoyer\", () => { Player.main.liveMixin.TakeDamage(10000f); }); // Unlock the seamoth on completion of this goal: StoryGoalHandler.RegisterOnGoalUnlockData(\"KelpForestEnjoyer\", blueprints: new Story.UnlockBlueprintData[] { new Story.UnlockBlueprintData() {techType = TechType.Seamoth, unlockType = Story.UnlockBlueprintData.UnlockType.Available}, }); Saving progress Every story goal can only be completed once, so no custom saving logic is required. The StoryGoalManager.main.OnGoalComplete(string key) method can be used for one-time events (WITHOUT story goals!) because it will only return true once for any given string, which persists between game sessions. The StoryGoalManager.main.IsGoalComplete(string key) method can be used to check if a goal with the given key has already been completed. Summary The Story Goal system is a powerful tool for creating story and exploration-driven progression in Subnautica mods. By using the methods within the StoryGoalHandler class, you can easily add goals and customize their effects upon completion."
  }
}